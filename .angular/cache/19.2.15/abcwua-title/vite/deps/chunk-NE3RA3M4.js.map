{
  "version": 3,
  "sources": ["../../../../../../node_modules/@aws-amplify/auth/dist/esm/errors/types/validation.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/common/AuthErrorStrings.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/errors/AuthError.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/errors/constants.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/types.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/internal/getCurrentUser.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/getCurrentUser.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/parsers/regionParsers.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createUserPoolSerializer.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/errors/utils/assertServiceError.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createUserPoolDeserializer.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/constants.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/types/errors.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/cognitoUserPoolEndpointResolver.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/userContextData.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/refreshAuthTokens.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/errorHelpers.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/types.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/constants.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/TokenStore.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/signInWithRedirectStore.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/oAuthStore.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/inflightPromise.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/TokenOrchestrator.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/CognitoUserPoolsTokenProvider.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/tokenProvider.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/utils/store/autoSignInStore.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/utils/store/signInStore.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/autoSignIn.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/errors/utils/assertValidationError.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/utils/getAuthUserAgentValue.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createVerifySoftwareTokenClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/cacheTokens.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/dispatchSignedInHubEvent.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/errors.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/getIsPasskeySupported.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/convert/base64url/convertArrayBufferToBase64Url.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/convert/base64url/convertBase64UrlToArrayBuffer.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/serde.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/types/shared.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/types/index.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/getPasskey.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmDeviceClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/textEncoder/index.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/BigInteger/BigInteger.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/calculate/calculateS.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/constants.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getBytesFromHex.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHexFromBytes.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHashFromData.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHashFromHex.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getPaddedHex.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/calculate/calculateU.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHkdfKey.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getRandomBytes.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getRandomString.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/AuthenticationHelper/AuthenticationHelper.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/calculate/calculateA.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getAuthenticationHelper.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/getNewDeviceMetadata.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleWebAuthnSignInResult.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getNowString.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getSignatureString.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/handleDeviceSRPAuth.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/handlePasswordVerifierChallenge.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/retryOnResourceNotFoundException.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/setActiveSignInUsername.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/flows/shared/handlePasswordSRP.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleSelectChallenge.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleSelectChallengeWithPassword.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleSelectChallengeWithPasswordSRP.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/signInHelpers.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithCustomAuth.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithCustomSRPAuth.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithSRP.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithUserPassword.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleUserAuthFlow.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithUserAuth.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signIn.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/apiHelpers.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/signUpHelpers.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createSignUpClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signUp.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/resetPassword.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmResetPassword.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/resendSignUpCode.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmSignUp.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmSignIn.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createSetUserMFAPreferenceClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/updateMFAPreference.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/fetchMFAPreference.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/verifyTOTPSetup.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createChangePasswordClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/updatePassword.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/setUpTOTP.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateUserAttributesClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/updateUserAttributes.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/updateUserAttribute.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createVerifyUserAttributeClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmUserAttribute.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/Errors.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/types/Auth.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/createOAuthError.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/validateState.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/completeOAuthFlow.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/getRedirectUrl.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/handleFailure.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/attemptCompleteOAuthFlow.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/enableOAuthListener.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/types/models.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/utils/openAuthSession.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/generateCodeVerifier.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/generateState.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/cancelOAuthFlow.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithRedirect.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/internal/fetchUserAttributes.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/fetchUserAttributes.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/completeOAuthSignOut.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/oAuthSignOutRedirect.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/handleOAuthSignOut.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createRevokeTokenClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createGlobalSignOutClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signOut.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserAttributeVerificationCodeClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/sendUserAttributeVerificationCode.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createDeleteUserAttributesClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/deleteUserAttributes.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createEmptyResponseDeserializer.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createDeleteUserClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/deleteUser.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateDeviceStatusClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/rememberDevice.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createForgetDeviceClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/forgetDevice.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createListDevicesClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/fetchDevices.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/types.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/IdentityIdStore.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/factories/createCognitoIdentityPoolEndpointResolver.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/utils.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/IdentityIdProvider.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/credentialsProvider.mjs"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar AuthValidationErrorCode;\n(function (AuthValidationErrorCode) {\n  AuthValidationErrorCode[\"EmptySignInUsername\"] = \"EmptySignInUsername\";\n  AuthValidationErrorCode[\"EmptySignInPassword\"] = \"EmptySignInPassword\";\n  AuthValidationErrorCode[\"CustomAuthSignInPassword\"] = \"CustomAuthSignInPassword\";\n  AuthValidationErrorCode[\"EmptySignUpUsername\"] = \"EmptySignUpUsername\";\n  AuthValidationErrorCode[\"EmptySignUpPassword\"] = \"EmptySignUpPassword\";\n  AuthValidationErrorCode[\"EmptyConfirmSignUpUsername\"] = \"EmptyConfirmSignUpUsername\";\n  AuthValidationErrorCode[\"EmptyConfirmSignUpCode\"] = \"EmptyConfirmSignUpCode\";\n  AuthValidationErrorCode[\"EmptyResendSignUpCodeUsername\"] = \"EmptyresendSignUpCodeUsername\";\n  AuthValidationErrorCode[\"EmptyChallengeResponse\"] = \"EmptyChallengeResponse\";\n  AuthValidationErrorCode[\"EmptyConfirmResetPasswordUsername\"] = \"EmptyConfirmResetPasswordUsername\";\n  AuthValidationErrorCode[\"EmptyConfirmResetPasswordNewPassword\"] = \"EmptyConfirmResetPasswordNewPassword\";\n  AuthValidationErrorCode[\"EmptyConfirmResetPasswordConfirmationCode\"] = \"EmptyConfirmResetPasswordConfirmationCode\";\n  AuthValidationErrorCode[\"EmptyResetPasswordUsername\"] = \"EmptyResetPasswordUsername\";\n  AuthValidationErrorCode[\"EmptyVerifyTOTPSetupCode\"] = \"EmptyVerifyTOTPSetupCode\";\n  AuthValidationErrorCode[\"EmptyConfirmUserAttributeCode\"] = \"EmptyConfirmUserAttributeCode\";\n  AuthValidationErrorCode[\"IncorrectMFAMethod\"] = \"IncorrectMFAMethod\";\n  AuthValidationErrorCode[\"EmptyUpdatePassword\"] = \"EmptyUpdatePassword\";\n})(AuthValidationErrorCode || (AuthValidationErrorCode = {}));\nexport { AuthValidationErrorCode };\n", "import { AuthValidationErrorCode } from '../errors/types/validation.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst validationErrorMap = {\n  [AuthValidationErrorCode.EmptyChallengeResponse]: {\n    message: 'challengeResponse is required to confirmSignIn'\n  },\n  [AuthValidationErrorCode.EmptyConfirmResetPasswordUsername]: {\n    message: 'username is required to confirmResetPassword'\n  },\n  [AuthValidationErrorCode.EmptyConfirmSignUpCode]: {\n    message: 'code is required to confirmSignUp'\n  },\n  [AuthValidationErrorCode.EmptyConfirmSignUpUsername]: {\n    message: 'username is required to confirmSignUp'\n  },\n  [AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode]: {\n    message: 'confirmationCode is required to confirmResetPassword'\n  },\n  [AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword]: {\n    message: 'newPassword is required to confirmResetPassword'\n  },\n  [AuthValidationErrorCode.EmptyResendSignUpCodeUsername]: {\n    message: 'username is required to confirmSignUp'\n  },\n  [AuthValidationErrorCode.EmptyResetPasswordUsername]: {\n    message: 'username is required to resetPassword'\n  },\n  [AuthValidationErrorCode.EmptySignInPassword]: {\n    message: 'password is required to signIn'\n  },\n  [AuthValidationErrorCode.EmptySignInUsername]: {\n    message: 'username is required to signIn'\n  },\n  [AuthValidationErrorCode.EmptySignUpPassword]: {\n    message: 'password is required to signUp'\n  },\n  [AuthValidationErrorCode.EmptySignUpUsername]: {\n    message: 'username is required to signUp'\n  },\n  [AuthValidationErrorCode.CustomAuthSignInPassword]: {\n    message: 'A password is not needed when signing in with CUSTOM_WITHOUT_SRP',\n    recoverySuggestion: 'Do not include a password in your signIn call.'\n  },\n  [AuthValidationErrorCode.IncorrectMFAMethod]: {\n    message: 'Incorrect MFA method was chosen. It should be either SMS, TOTP, or EMAIL',\n    recoverySuggestion: 'Try to pass SMS, TOTP, or EMAIL as the challengeResponse'\n  },\n  [AuthValidationErrorCode.EmptyVerifyTOTPSetupCode]: {\n    message: 'code is required to verifyTotpSetup'\n  },\n  [AuthValidationErrorCode.EmptyUpdatePassword]: {\n    message: 'oldPassword and newPassword are required to changePassword'\n  },\n  [AuthValidationErrorCode.EmptyConfirmUserAttributeCode]: {\n    message: 'confirmation code is required to confirmUserAttribute'\n  }\n};\n// TODO: delete this code when the Auth class is removed.\nvar AuthErrorStrings;\n(function (AuthErrorStrings) {\n  AuthErrorStrings[\"DEFAULT_MSG\"] = \"Authentication Error\";\n  AuthErrorStrings[\"EMPTY_EMAIL\"] = \"Email cannot be empty\";\n  AuthErrorStrings[\"EMPTY_PHONE\"] = \"Phone number cannot be empty\";\n  AuthErrorStrings[\"EMPTY_USERNAME\"] = \"Username cannot be empty\";\n  AuthErrorStrings[\"INVALID_USERNAME\"] = \"The username should either be a string or one of the sign in types\";\n  AuthErrorStrings[\"EMPTY_PASSWORD\"] = \"Password cannot be empty\";\n  AuthErrorStrings[\"EMPTY_CODE\"] = \"Confirmation code cannot be empty\";\n  AuthErrorStrings[\"SIGN_UP_ERROR\"] = \"Error creating account\";\n  AuthErrorStrings[\"NO_MFA\"] = \"No valid MFA method provided\";\n  AuthErrorStrings[\"INVALID_MFA\"] = \"Invalid MFA type\";\n  AuthErrorStrings[\"EMPTY_CHALLENGE\"] = \"Challenge response cannot be empty\";\n  AuthErrorStrings[\"NO_USER_SESSION\"] = \"Failed to get the session because the user is empty\";\n  AuthErrorStrings[\"NETWORK_ERROR\"] = \"Network Error\";\n  AuthErrorStrings[\"DEVICE_CONFIG\"] = \"Device tracking has not been configured in this User Pool\";\n  AuthErrorStrings[\"AUTOSIGNIN_ERROR\"] = \"Please use your credentials to sign in\";\n  AuthErrorStrings[\"OAUTH_ERROR\"] = \"Couldn't finish OAuth flow, check your User Pool HostedUI settings\";\n})(AuthErrorStrings || (AuthErrorStrings = {}));\nvar AuthErrorCodes;\n(function (AuthErrorCodes) {\n  AuthErrorCodes[\"SignInException\"] = \"SignInException\";\n  AuthErrorCodes[\"OAuthSignInError\"] = \"OAuthSignInException\";\n})(AuthErrorCodes || (AuthErrorCodes = {}));\nexport { AuthErrorCodes, AuthErrorStrings, validationErrorMap };\n", "import { AmplifyError } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nclass AuthError extends AmplifyError {\n  constructor(params) {\n    super(params);\n    // Hack for making the custom error class work when transpiled to es5\n    // TODO: Delete the following 2 lines after we change the build target to >= es2015\n    this.constructor = AuthError;\n    Object.setPrototypeOf(this, AuthError.prototype);\n  }\n}\nexport { AuthError };\n", "import { AuthError } from './AuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst USER_UNAUTHENTICATED_EXCEPTION = 'UserUnAuthenticatedException';\nconst USER_ALREADY_AUTHENTICATED_EXCEPTION = 'UserAlreadyAuthenticatedException';\nconst DEVICE_METADATA_NOT_FOUND_EXCEPTION = 'DeviceMetadataNotFoundException';\nconst AUTO_SIGN_IN_EXCEPTION = 'AutoSignInException';\nconst INVALID_REDIRECT_EXCEPTION = 'InvalidRedirectException';\nconst INVALID_APP_SCHEME_EXCEPTION = 'InvalidAppSchemeException';\nconst INVALID_PREFERRED_REDIRECT_EXCEPTION = 'InvalidPreferredRedirectUrlException';\nconst invalidRedirectException = new AuthError({\n  name: INVALID_REDIRECT_EXCEPTION,\n  message: 'signInRedirect or signOutRedirect had an invalid format or was not found.',\n  recoverySuggestion: 'Please make sure the signIn/Out redirect in your oauth config is valid.'\n});\nconst invalidAppSchemeException = new AuthError({\n  name: INVALID_APP_SCHEME_EXCEPTION,\n  message: 'A valid non-http app scheme was not found in the config.',\n  recoverySuggestion: 'Please make sure a valid custom app scheme is present in the config.'\n});\nconst invalidPreferredRedirectUrlException = new AuthError({\n  name: INVALID_PREFERRED_REDIRECT_EXCEPTION,\n  message: 'The given preferredRedirectUrl does not match any items in the redirectSignOutUrls array from the config.',\n  recoverySuggestion: 'Please make sure a matching preferredRedirectUrl is provided.'\n});\nconst INVALID_ORIGIN_EXCEPTION = 'InvalidOriginException';\nconst invalidOriginException = new AuthError({\n  name: INVALID_ORIGIN_EXCEPTION,\n  message: 'redirect is coming from a different origin. The oauth flow needs to be initiated from the same origin',\n  recoverySuggestion: 'Please call signInWithRedirect from the same origin.'\n});\nconst OAUTH_SIGNOUT_EXCEPTION = 'OAuthSignOutException';\nconst TOKEN_REFRESH_EXCEPTION = 'TokenRefreshException';\nconst UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION = 'UnexpectedSignInInterruptionException';\nexport { AUTO_SIGN_IN_EXCEPTION, DEVICE_METADATA_NOT_FOUND_EXCEPTION, INVALID_APP_SCHEME_EXCEPTION, INVALID_ORIGIN_EXCEPTION, INVALID_PREFERRED_REDIRECT_EXCEPTION, INVALID_REDIRECT_EXCEPTION, OAUTH_SIGNOUT_EXCEPTION, TOKEN_REFRESH_EXCEPTION, UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION, USER_ALREADY_AUTHENTICATED_EXCEPTION, USER_UNAUTHENTICATED_EXCEPTION, invalidAppSchemeException, invalidOriginException, invalidPreferredRedirectUrlException, invalidRedirectException };\n", "import { AuthError } from '../../../errors/AuthError.mjs';\nimport { TOKEN_REFRESH_EXCEPTION, USER_UNAUTHENTICATED_EXCEPTION, DEVICE_METADATA_NOT_FOUND_EXCEPTION } from '../../../errors/constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction isTypeUserPoolConfig(authConfig) {\n  if (authConfig && authConfig.Cognito.userPoolId && authConfig.Cognito.userPoolClientId) {\n    return true;\n  }\n  return false;\n}\nfunction assertAuthTokens(tokens) {\n  if (!tokens || !tokens.accessToken) {\n    throw new AuthError({\n      name: USER_UNAUTHENTICATED_EXCEPTION,\n      message: 'User needs to be authenticated to call this API.',\n      recoverySuggestion: 'Sign in before calling this API again.'\n    });\n  }\n}\nfunction assertIdTokenInAuthTokens(tokens) {\n  if (!tokens || !tokens.idToken) {\n    throw new AuthError({\n      name: USER_UNAUTHENTICATED_EXCEPTION,\n      message: 'User needs to be authenticated to call this API.',\n      recoverySuggestion: 'Sign in before calling this API again.'\n    });\n  }\n}\nconst oAuthTokenRefreshException = new AuthError({\n  name: TOKEN_REFRESH_EXCEPTION,\n  message: `Token refresh is not supported when authenticated with the 'implicit grant' (token) oauth flow. \n\tPlease change your oauth configuration to use 'code grant' flow.`,\n  recoverySuggestion: `Please logout and change your Amplify configuration to use \"code grant\" flow. \n\tE.g { responseType: 'code' }`\n});\nconst tokenRefreshException = new AuthError({\n  name: USER_UNAUTHENTICATED_EXCEPTION,\n  message: 'User needs to be authenticated to call this API.',\n  recoverySuggestion: 'Sign in before calling this API again.'\n});\nfunction assertAuthTokensWithRefreshToken(tokens) {\n  if (isAuthenticatedWithImplicitOauthFlow(tokens)) {\n    throw oAuthTokenRefreshException;\n  }\n  if (!isAuthenticatedWithRefreshToken(tokens)) {\n    throw tokenRefreshException;\n  }\n}\nfunction assertDeviceMetadata(deviceMetadata) {\n  if (!deviceMetadata || !deviceMetadata.deviceKey || !deviceMetadata.deviceGroupKey || !deviceMetadata.randomPassword) {\n    throw new AuthError({\n      name: DEVICE_METADATA_NOT_FOUND_EXCEPTION,\n      message: 'Either deviceKey, deviceGroupKey or secretPassword were not found during the sign-in process.',\n      recoverySuggestion: 'Make sure to not clear storage after calling the signIn API.'\n    });\n  }\n}\nconst OAuthStorageKeys = {\n  inflightOAuth: 'inflightOAuth',\n  oauthSignIn: 'oauthSignIn',\n  oauthPKCE: 'oauthPKCE',\n  oauthState: 'oauthState'\n};\nfunction isAuthenticated(tokens) {\n  return tokens?.accessToken || tokens?.idToken;\n}\nfunction isAuthenticatedWithRefreshToken(tokens) {\n  return isAuthenticated(tokens) && tokens?.refreshToken;\n}\nfunction isAuthenticatedWithImplicitOauthFlow(tokens) {\n  return isAuthenticated(tokens) && !tokens?.refreshToken;\n}\nexport { OAuthStorageKeys, assertAuthTokens, assertAuthTokensWithRefreshToken, assertDeviceMetadata, assertIdTokenInAuthTokens, isTypeUserPoolConfig, oAuthTokenRefreshException, tokenRefreshException };\n", "import { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../utils/types.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getCurrentUser = async amplify => {\n  const authConfig = amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const tokens = await amplify.Auth.getTokens({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const {\n    'cognito:username': username,\n    sub\n  } = tokens.idToken?.payload ?? {};\n  const authUser = {\n    username: username,\n    userId: sub\n  };\n  const signInDetails = getSignInDetailsFromTokens(tokens);\n  if (signInDetails) {\n    authUser.signInDetails = signInDetails;\n  }\n  return authUser;\n};\nfunction getSignInDetailsFromTokens(tokens) {\n  return tokens?.signInDetails;\n}\nexport { getCurrentUser };\n", "import { Amplify } from '@aws-amplify/core';\nimport { getCurrentUser as getCurrentUser$1 } from './internal/getCurrentUser.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Gets the current user from the idToken.\n *\n * @param input -  The GetCurrentUserInput object.\n * @returns GetCurrentUserOutput\n * @throws - {@link InitiateAuthException} - Thrown when the service fails to refresh the tokens.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nconst getCurrentUser = async () => {\n  return getCurrentUser$1(Amplify);\n};\nexport { getCurrentUser };\n", "import { AuthError } from '../../errors/AuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction getRegionFromUserPoolId(userPoolId) {\n  const region = userPoolId?.split('_')[0];\n  if (!userPoolId || userPoolId.indexOf('_') < 0 || !region || typeof region !== 'string') throw new AuthError({\n    name: 'InvalidUserPoolId',\n    message: 'Invalid user pool id provided.'\n  });\n  return region;\n}\nfunction getRegionFromIdentityPoolId(identityPoolId) {\n  if (!identityPoolId || !identityPoolId.includes(':')) {\n    throw new AuthError({\n      name: 'InvalidIdentityPoolIdException',\n      message: 'Invalid identity pool id provided.',\n      recoverySuggestion: 'Make sure a valid identityPoolId is given in the config.'\n    });\n  }\n  return identityPoolId.split(':')[0];\n}\nexport { getRegionFromIdentityPoolId, getRegionFromUserPoolId };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createUserPoolSerializer = operation => (input, endpoint) => {\n  const headers = getSharedHeaders(operation);\n  const body = JSON.stringify(input);\n  return buildHttpRpcRequest(endpoint, headers, body);\n};\nconst getSharedHeaders = operation => ({\n  'content-type': 'application/x-amz-json-1.1',\n  'x-amz-target': `AWSCognitoIdentityProviderService.${operation}`\n});\nconst buildHttpRpcRequest = ({\n  url\n}, headers, body) => ({\n  headers,\n  url,\n  body,\n  method: 'POST'\n});\nexport { createUserPoolSerializer };\n", "import { AmplifyErrorCode } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../AuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction assertServiceError(error) {\n  if (!error || error.name === 'Error' || error instanceof TypeError) {\n    throw new AuthError({\n      name: AmplifyErrorCode.Unknown,\n      message: 'An unknown error has occurred.',\n      underlyingError: error\n    });\n  }\n}\nexport { assertServiceError };\n", "import { parseJsonError, parseJsonBody } from '@aws-amplify/core/internals/aws-client-utils';\nimport { assertServiceError } from '../../../../../../errors/utils/assertServiceError.mjs';\nimport { AuthError } from '../../../../../../errors/AuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createUserPoolDeserializer = () => async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseJsonError(response);\n    assertServiceError(error);\n    throw new AuthError({\n      name: error.name,\n      message: error.message,\n      metadata: error.$metadata\n    });\n  }\n  return parseJsonBody(response);\n};\nexport { createUserPoolDeserializer };\n", "import { composeTransferHandler } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { unauthenticatedHandler } from '@aws-amplify/core/internals/aws-client-utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * A Cognito Identity-specific middleware that disables caching for all requests.\n */\nconst disableCacheMiddlewareFactory = () => (next, _) => async function disableCacheMiddleware(request) {\n  request.headers['cache-control'] = 'no-store';\n  return next(request);\n};\n/**\n * A Cognito Identity-specific transfer handler that does NOT sign requests, and\n * disables caching.\n *\n * @internal\n */\nconst cognitoUserPoolTransferHandler = composeTransferHandler(unauthenticatedHandler, [disableCacheMiddlewareFactory]);\nexport { cognitoUserPoolTransferHandler };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * The service name used to sign requests if the API requires authentication.\n */\nconst COGNITO_IDP_SERVICE_NAME = 'cognito-idp';\nexport { COGNITO_IDP_SERVICE_NAME };\n", "import { getRetryDecider, parseJsonError, jitteredBackoff } from '@aws-amplify/core/internals/aws-client-utils';\nimport { getAmplifyUserAgent } from '@aws-amplify/core/internals/utils';\nimport { COGNITO_IDP_SERVICE_NAME } from '../../../constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst DEFAULT_SERVICE_CLIENT_API_CONFIG = {\n  service: COGNITO_IDP_SERVICE_NAME,\n  retryDecider: getRetryDecider(parseJsonError),\n  computeDelay: jitteredBackoff,\n  get userAgentValue() {\n    return getAmplifyUserAgent();\n  },\n  cache: 'no-store'\n};\nexport { DEFAULT_SERVICE_CLIENT_API_CONFIG };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createInitiateAuthClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('InitiateAuth'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createInitiateAuthClient };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar AssociateSoftwareTokenException;\n(function (AssociateSoftwareTokenException) {\n  AssociateSoftwareTokenException[\"ConcurrentModificationException\"] = \"ConcurrentModificationException\";\n  AssociateSoftwareTokenException[\"ForbiddenException\"] = \"ForbiddenException\";\n  AssociateSoftwareTokenException[\"InternalErrorException\"] = \"InternalErrorException\";\n  AssociateSoftwareTokenException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  AssociateSoftwareTokenException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  AssociateSoftwareTokenException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  AssociateSoftwareTokenException[\"SoftwareTokenMFANotFoundException\"] = \"SoftwareTokenMFANotFoundException\";\n})(AssociateSoftwareTokenException || (AssociateSoftwareTokenException = {}));\nvar ChangePasswordException;\n(function (ChangePasswordException) {\n  ChangePasswordException[\"ForbiddenException\"] = \"ForbiddenException\";\n  ChangePasswordException[\"InternalErrorException\"] = \"InternalErrorException\";\n  ChangePasswordException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  ChangePasswordException[\"InvalidPasswordException\"] = \"InvalidPasswordException\";\n  ChangePasswordException[\"LimitExceededException\"] = \"LimitExceededException\";\n  ChangePasswordException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  ChangePasswordException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  ChangePasswordException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  ChangePasswordException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  ChangePasswordException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  ChangePasswordException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ChangePasswordException || (ChangePasswordException = {}));\nvar ConfirmDeviceException;\n(function (ConfirmDeviceException) {\n  ConfirmDeviceException[\"ForbiddenException\"] = \"ForbiddenException\";\n  ConfirmDeviceException[\"InternalErrorException\"] = \"InternalErrorException\";\n  ConfirmDeviceException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n  ConfirmDeviceException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  ConfirmDeviceException[\"InvalidPasswordException\"] = \"InvalidPasswordException\";\n  ConfirmDeviceException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n  ConfirmDeviceException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  ConfirmDeviceException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  ConfirmDeviceException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  ConfirmDeviceException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  ConfirmDeviceException[\"UsernameExistsException\"] = \"UsernameExistsException\";\n  ConfirmDeviceException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  ConfirmDeviceException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ConfirmDeviceException || (ConfirmDeviceException = {}));\nvar ConfirmForgotPasswordException;\n(function (ConfirmForgotPasswordException) {\n  ConfirmForgotPasswordException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n  ConfirmForgotPasswordException[\"ExpiredCodeException\"] = \"ExpiredCodeException\";\n  ConfirmForgotPasswordException[\"ForbiddenException\"] = \"ForbiddenException\";\n  ConfirmForgotPasswordException[\"InternalErrorException\"] = \"InternalErrorException\";\n  ConfirmForgotPasswordException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n  ConfirmForgotPasswordException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  ConfirmForgotPasswordException[\"InvalidPasswordException\"] = \"InvalidPasswordException\";\n  ConfirmForgotPasswordException[\"LimitExceededException\"] = \"LimitExceededException\";\n  ConfirmForgotPasswordException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  ConfirmForgotPasswordException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  ConfirmForgotPasswordException[\"TooManyFailedAttemptsException\"] = \"TooManyFailedAttemptsException\";\n  ConfirmForgotPasswordException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  ConfirmForgotPasswordException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n  ConfirmForgotPasswordException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n  ConfirmForgotPasswordException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  ConfirmForgotPasswordException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ConfirmForgotPasswordException || (ConfirmForgotPasswordException = {}));\nvar ConfirmSignUpException;\n(function (ConfirmSignUpException) {\n  ConfirmSignUpException[\"AliasExistsException\"] = \"AliasExistsException\";\n  ConfirmSignUpException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n  ConfirmSignUpException[\"ExpiredCodeException\"] = \"ExpiredCodeException\";\n  ConfirmSignUpException[\"ForbiddenException\"] = \"ForbiddenException\";\n  ConfirmSignUpException[\"InternalErrorException\"] = \"InternalErrorException\";\n  ConfirmSignUpException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n  ConfirmSignUpException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  ConfirmSignUpException[\"LimitExceededException\"] = \"LimitExceededException\";\n  ConfirmSignUpException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  ConfirmSignUpException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  ConfirmSignUpException[\"TooManyFailedAttemptsException\"] = \"TooManyFailedAttemptsException\";\n  ConfirmSignUpException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  ConfirmSignUpException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n  ConfirmSignUpException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n  ConfirmSignUpException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ConfirmSignUpException || (ConfirmSignUpException = {}));\nvar DeleteUserAttributesException;\n(function (DeleteUserAttributesException) {\n  DeleteUserAttributesException[\"ForbiddenException\"] = \"ForbiddenException\";\n  DeleteUserAttributesException[\"InternalErrorException\"] = \"InternalErrorException\";\n  DeleteUserAttributesException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  DeleteUserAttributesException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  DeleteUserAttributesException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  DeleteUserAttributesException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  DeleteUserAttributesException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  DeleteUserAttributesException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  DeleteUserAttributesException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(DeleteUserAttributesException || (DeleteUserAttributesException = {}));\nvar DeleteUserException;\n(function (DeleteUserException) {\n  DeleteUserException[\"ForbiddenException\"] = \"ForbiddenException\";\n  DeleteUserException[\"InternalErrorException\"] = \"InternalErrorException\";\n  DeleteUserException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  DeleteUserException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  DeleteUserException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  DeleteUserException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  DeleteUserException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  DeleteUserException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  DeleteUserException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(DeleteUserException || (DeleteUserException = {}));\nvar ForgetDeviceException;\n(function (ForgetDeviceException) {\n  ForgetDeviceException[\"ForbiddenException\"] = \"ForbiddenException\";\n  ForgetDeviceException[\"InternalErrorException\"] = \"InternalErrorException\";\n  ForgetDeviceException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  ForgetDeviceException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n  ForgetDeviceException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  ForgetDeviceException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  ForgetDeviceException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  ForgetDeviceException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  ForgetDeviceException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  ForgetDeviceException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ForgetDeviceException || (ForgetDeviceException = {}));\nvar ForgotPasswordException;\n(function (ForgotPasswordException) {\n  ForgotPasswordException[\"CodeDeliveryFailureException\"] = \"CodeDeliveryFailureException\";\n  ForgotPasswordException[\"ForbiddenException\"] = \"ForbiddenException\";\n  ForgotPasswordException[\"InternalErrorException\"] = \"InternalErrorException\";\n  ForgotPasswordException[\"InvalidEmailRoleAccessPolicyException\"] = \"InvalidEmailRoleAccessPolicyException\";\n  ForgotPasswordException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n  ForgotPasswordException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  ForgotPasswordException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n  ForgotPasswordException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n  ForgotPasswordException[\"LimitExceededException\"] = \"LimitExceededException\";\n  ForgotPasswordException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  ForgotPasswordException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  ForgotPasswordException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  ForgotPasswordException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n  ForgotPasswordException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n  ForgotPasswordException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ForgotPasswordException || (ForgotPasswordException = {}));\nvar GetUserException;\n(function (GetUserException) {\n  GetUserException[\"ForbiddenException\"] = \"ForbiddenException\";\n  GetUserException[\"InternalErrorException\"] = \"InternalErrorException\";\n  GetUserException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  GetUserException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  GetUserException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  GetUserException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  GetUserException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  GetUserException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  GetUserException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(GetUserException || (GetUserException = {}));\nvar GetIdException;\n(function (GetIdException) {\n  GetIdException[\"ExternalServiceException\"] = \"ExternalServiceException\";\n  GetIdException[\"InternalErrorException\"] = \"InternalErrorException\";\n  GetIdException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  GetIdException[\"LimitExceededException\"] = \"LimitExceededException\";\n  GetIdException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  GetIdException[\"ResourceConflictException\"] = \"ResourceConflictException\";\n  GetIdException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  GetIdException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n})(GetIdException || (GetIdException = {}));\nvar GetCredentialsForIdentityException;\n(function (GetCredentialsForIdentityException) {\n  GetCredentialsForIdentityException[\"ExternalServiceException\"] = \"ExternalServiceException\";\n  GetCredentialsForIdentityException[\"InternalErrorException\"] = \"InternalErrorException\";\n  GetCredentialsForIdentityException[\"InvalidIdentityPoolConfigurationException\"] = \"InvalidIdentityPoolConfigurationException\";\n  GetCredentialsForIdentityException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  GetCredentialsForIdentityException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  GetCredentialsForIdentityException[\"ResourceConflictException\"] = \"ResourceConflictException\";\n  GetCredentialsForIdentityException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  GetCredentialsForIdentityException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n})(GetCredentialsForIdentityException || (GetCredentialsForIdentityException = {}));\nvar GetUserAttributeVerificationException;\n(function (GetUserAttributeVerificationException) {\n  GetUserAttributeVerificationException[\"CodeDeliveryFailureException\"] = \"CodeDeliveryFailureException\";\n  GetUserAttributeVerificationException[\"ForbiddenException\"] = \"ForbiddenException\";\n  GetUserAttributeVerificationException[\"InternalErrorException\"] = \"InternalErrorException\";\n  GetUserAttributeVerificationException[\"InvalidEmailRoleAccessPolicyException\"] = \"InvalidEmailRoleAccessPolicyException\";\n  GetUserAttributeVerificationException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n  GetUserAttributeVerificationException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  GetUserAttributeVerificationException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n  GetUserAttributeVerificationException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n  GetUserAttributeVerificationException[\"LimitExceededException\"] = \"LimitExceededException\";\n  GetUserAttributeVerificationException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  GetUserAttributeVerificationException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  GetUserAttributeVerificationException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  GetUserAttributeVerificationException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  GetUserAttributeVerificationException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n  GetUserAttributeVerificationException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n  GetUserAttributeVerificationException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  GetUserAttributeVerificationException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(GetUserAttributeVerificationException || (GetUserAttributeVerificationException = {}));\nvar GlobalSignOutException;\n(function (GlobalSignOutException) {\n  GlobalSignOutException[\"ForbiddenException\"] = \"ForbiddenException\";\n  GlobalSignOutException[\"InternalErrorException\"] = \"InternalErrorException\";\n  GlobalSignOutException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  GlobalSignOutException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  GlobalSignOutException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  GlobalSignOutException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  GlobalSignOutException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  GlobalSignOutException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n})(GlobalSignOutException || (GlobalSignOutException = {}));\nvar InitiateAuthException;\n(function (InitiateAuthException) {\n  InitiateAuthException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  InitiateAuthException[\"ForbiddenException\"] = \"ForbiddenException\";\n  InitiateAuthException[\"InternalErrorException\"] = \"InternalErrorException\";\n  InitiateAuthException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n  InitiateAuthException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  InitiateAuthException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n  InitiateAuthException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n  InitiateAuthException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n  InitiateAuthException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  InitiateAuthException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  InitiateAuthException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  InitiateAuthException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n  InitiateAuthException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n  InitiateAuthException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  InitiateAuthException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(InitiateAuthException || (InitiateAuthException = {}));\nvar ResendConfirmationException;\n(function (ResendConfirmationException) {\n  ResendConfirmationException[\"CodeDeliveryFailureException\"] = \"CodeDeliveryFailureException\";\n  ResendConfirmationException[\"ForbiddenException\"] = \"ForbiddenException\";\n  ResendConfirmationException[\"InternalErrorException\"] = \"InternalErrorException\";\n  ResendConfirmationException[\"InvalidEmailRoleAccessPolicyException\"] = \"InvalidEmailRoleAccessPolicyException\";\n  ResendConfirmationException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n  ResendConfirmationException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  ResendConfirmationException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n  ResendConfirmationException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n  ResendConfirmationException[\"LimitExceededException\"] = \"LimitExceededException\";\n  ResendConfirmationException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  ResendConfirmationException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  ResendConfirmationException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  ResendConfirmationException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n  ResendConfirmationException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n  ResendConfirmationException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ResendConfirmationException || (ResendConfirmationException = {}));\nvar RespondToAuthChallengeException;\n(function (RespondToAuthChallengeException) {\n  RespondToAuthChallengeException[\"AliasExistsException\"] = \"AliasExistsException\";\n  RespondToAuthChallengeException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n  RespondToAuthChallengeException[\"ExpiredCodeException\"] = \"ExpiredCodeException\";\n  RespondToAuthChallengeException[\"ForbiddenException\"] = \"ForbiddenException\";\n  RespondToAuthChallengeException[\"InternalErrorException\"] = \"InternalErrorException\";\n  RespondToAuthChallengeException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n  RespondToAuthChallengeException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  RespondToAuthChallengeException[\"InvalidPasswordException\"] = \"InvalidPasswordException\";\n  RespondToAuthChallengeException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n  RespondToAuthChallengeException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n  RespondToAuthChallengeException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n  RespondToAuthChallengeException[\"MFAMethodNotFoundException\"] = \"MFAMethodNotFoundException\";\n  RespondToAuthChallengeException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  RespondToAuthChallengeException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  RespondToAuthChallengeException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  RespondToAuthChallengeException[\"SoftwareTokenMFANotFoundException\"] = \"SoftwareTokenMFANotFoundException\";\n  RespondToAuthChallengeException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  RespondToAuthChallengeException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n  RespondToAuthChallengeException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n  RespondToAuthChallengeException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  RespondToAuthChallengeException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(RespondToAuthChallengeException || (RespondToAuthChallengeException = {}));\nvar SetUserMFAPreferenceException;\n(function (SetUserMFAPreferenceException) {\n  SetUserMFAPreferenceException[\"ForbiddenException\"] = \"ForbiddenException\";\n  SetUserMFAPreferenceException[\"InternalErrorException\"] = \"InternalErrorException\";\n  SetUserMFAPreferenceException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  SetUserMFAPreferenceException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  SetUserMFAPreferenceException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  SetUserMFAPreferenceException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  SetUserMFAPreferenceException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  SetUserMFAPreferenceException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(SetUserMFAPreferenceException || (SetUserMFAPreferenceException = {}));\nvar SignUpException;\n(function (SignUpException) {\n  SignUpException[\"CodeDeliveryFailureException\"] = \"CodeDeliveryFailureException\";\n  SignUpException[\"InternalErrorException\"] = \"InternalErrorException\";\n  SignUpException[\"InvalidEmailRoleAccessPolicyException\"] = \"InvalidEmailRoleAccessPolicyException\";\n  SignUpException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n  SignUpException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  SignUpException[\"InvalidPasswordException\"] = \"InvalidPasswordException\";\n  SignUpException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n  SignUpException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n  SignUpException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  SignUpException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  SignUpException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  SignUpException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n  SignUpException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n  SignUpException[\"UsernameExistsException\"] = \"UsernameExistsException\";\n})(SignUpException || (SignUpException = {}));\nvar UpdateUserAttributesException;\n(function (UpdateUserAttributesException) {\n  UpdateUserAttributesException[\"AliasExistsException\"] = \"AliasExistsException\";\n  UpdateUserAttributesException[\"CodeDeliveryFailureException\"] = \"CodeDeliveryFailureException\";\n  UpdateUserAttributesException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n  UpdateUserAttributesException[\"ExpiredCodeException\"] = \"ExpiredCodeException\";\n  UpdateUserAttributesException[\"ForbiddenException\"] = \"ForbiddenException\";\n  UpdateUserAttributesException[\"InternalErrorException\"] = \"InternalErrorException\";\n  UpdateUserAttributesException[\"InvalidEmailRoleAccessPolicyException\"] = \"InvalidEmailRoleAccessPolicyException\";\n  UpdateUserAttributesException[\"InvalidLambdaResponseException\"] = \"InvalidLambdaResponseException\";\n  UpdateUserAttributesException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  UpdateUserAttributesException[\"InvalidSmsRoleAccessPolicyException\"] = \"InvalidSmsRoleAccessPolicyException\";\n  UpdateUserAttributesException[\"InvalidSmsRoleTrustRelationshipException\"] = \"InvalidSmsRoleTrustRelationshipException\";\n  UpdateUserAttributesException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  UpdateUserAttributesException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  UpdateUserAttributesException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  UpdateUserAttributesException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  UpdateUserAttributesException[\"UnexpectedLambdaException\"] = \"UnexpectedLambdaException\";\n  UpdateUserAttributesException[\"UserLambdaValidationException\"] = \"UserLambdaValidationException\";\n  UpdateUserAttributesException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  UpdateUserAttributesException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(UpdateUserAttributesException || (UpdateUserAttributesException = {}));\nvar VerifySoftwareTokenException;\n(function (VerifySoftwareTokenException) {\n  VerifySoftwareTokenException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n  VerifySoftwareTokenException[\"EnableSoftwareTokenMFAException\"] = \"EnableSoftwareTokenMFAException\";\n  VerifySoftwareTokenException[\"ForbiddenException\"] = \"ForbiddenException\";\n  VerifySoftwareTokenException[\"InternalErrorException\"] = \"InternalErrorException\";\n  VerifySoftwareTokenException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  VerifySoftwareTokenException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n  VerifySoftwareTokenException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  VerifySoftwareTokenException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  VerifySoftwareTokenException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  VerifySoftwareTokenException[\"SoftwareTokenMFANotFoundException\"] = \"SoftwareTokenMFANotFoundException\";\n  VerifySoftwareTokenException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  VerifySoftwareTokenException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  VerifySoftwareTokenException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(VerifySoftwareTokenException || (VerifySoftwareTokenException = {}));\nvar VerifyUserAttributeException;\n(function (VerifyUserAttributeException) {\n  VerifyUserAttributeException[\"AliasExistsException\"] = \"AliasExistsException\";\n  VerifyUserAttributeException[\"CodeMismatchException\"] = \"CodeMismatchException\";\n  VerifyUserAttributeException[\"ExpiredCodeException\"] = \"ExpiredCodeException\";\n  VerifyUserAttributeException[\"ForbiddenException\"] = \"ForbiddenException\";\n  VerifyUserAttributeException[\"InternalErrorException\"] = \"InternalErrorException\";\n  VerifyUserAttributeException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  VerifyUserAttributeException[\"LimitExceededException\"] = \"LimitExceededException\";\n  VerifyUserAttributeException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  VerifyUserAttributeException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  VerifyUserAttributeException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  VerifyUserAttributeException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  VerifyUserAttributeException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  VerifyUserAttributeException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(VerifyUserAttributeException || (VerifyUserAttributeException = {}));\nvar UpdateDeviceStatusException;\n(function (UpdateDeviceStatusException) {\n  UpdateDeviceStatusException[\"ForbiddenException\"] = \"ForbiddenException\";\n  UpdateDeviceStatusException[\"InternalErrorException\"] = \"InternalErrorException\";\n  UpdateDeviceStatusException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  UpdateDeviceStatusException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n  UpdateDeviceStatusException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  UpdateDeviceStatusException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  UpdateDeviceStatusException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  UpdateDeviceStatusException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  UpdateDeviceStatusException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  UpdateDeviceStatusException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(UpdateDeviceStatusException || (UpdateDeviceStatusException = {}));\nvar ListDevicesException;\n(function (ListDevicesException) {\n  ListDevicesException[\"ForbiddenException\"] = \"ForbiddenException\";\n  ListDevicesException[\"InternalErrorException\"] = \"InternalErrorException\";\n  ListDevicesException[\"InvalidParameterException\"] = \"InvalidParameterException\";\n  ListDevicesException[\"InvalidUserPoolConfigurationException\"] = \"InvalidUserPoolConfigurationException\";\n  ListDevicesException[\"NotAuthorizedException\"] = \"NotAuthorizedException\";\n  ListDevicesException[\"PasswordResetRequiredException\"] = \"PasswordResetRequiredException\";\n  ListDevicesException[\"ResourceNotFoundException\"] = \"ResourceNotFoundException\";\n  ListDevicesException[\"TooManyRequestsException\"] = \"TooManyRequestsException\";\n  ListDevicesException[\"UserNotConfirmedException\"] = \"UserNotConfirmedException\";\n  ListDevicesException[\"UserNotFoundException\"] = \"UserNotFoundException\";\n})(ListDevicesException || (ListDevicesException = {}));\nconst SETUP_TOTP_EXCEPTION = 'SetUpTOTPException';\nexport { AssociateSoftwareTokenException, ChangePasswordException, ConfirmDeviceException, ConfirmForgotPasswordException, ConfirmSignUpException, DeleteUserAttributesException, DeleteUserException, ForgetDeviceException, ForgotPasswordException, GetCredentialsForIdentityException, GetIdException, GetUserAttributeVerificationException, GetUserException, GlobalSignOutException, InitiateAuthException, ListDevicesException, ResendConfirmationException, RespondToAuthChallengeException, SETUP_TOTP_EXCEPTION, SetUserMFAPreferenceException, SignUpException, UpdateDeviceStatusException, UpdateUserAttributesException, VerifySoftwareTokenException, VerifyUserAttributeException };\n", "import { getDnsSuffix } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { COGNITO_IDP_SERVICE_NAME } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst cognitoUserPoolEndpointResolver = ({\n  region\n}) => ({\n  url: new AmplifyUrl(`https://${COGNITO_IDP_SERVICE_NAME}.${region}.${getDnsSuffix(region)}`)\n});\nexport { cognitoUserPoolEndpointResolver };\n", "import { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { cognitoUserPoolEndpointResolver } from '../../../foundation/cognitoUserPoolEndpointResolver.mjs';\nconst createCognitoUserPoolEndpointResolver = ({\n  endpointOverride\n}) => input => {\n  if (endpointOverride) {\n    return {\n      url: new AmplifyUrl(endpointOverride)\n    };\n  }\n  return cognitoUserPoolEndpointResolver(input);\n};\nexport { createCognitoUserPoolEndpointResolver };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction getUserContextData({\n  username,\n  userPoolId,\n  userPoolClientId\n}) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n  const amazonCognitoAdvancedSecurityData = window.AmazonCognitoAdvancedSecurityData;\n  if (typeof amazonCognitoAdvancedSecurityData === 'undefined') {\n    return undefined;\n  }\n  const advancedSecurityData = amazonCognitoAdvancedSecurityData.getData(username, userPoolId, userPoolClientId);\n  if (advancedSecurityData) {\n    const userContextData = {\n      EncodedData: advancedSecurityData\n    };\n    return userContextData;\n  }\n  return {};\n}\nexport { getUserContextData };\n", "import { deDupeAsyncFunction, assertTokenProviderConfig, decodeJWT } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokensWithRefreshToken } from './types.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getUserContextData } from './userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst refreshAuthTokensFunction = async ({\n  tokens,\n  authConfig,\n  username\n}) => {\n  assertTokenProviderConfig(authConfig?.Cognito);\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = authConfig.Cognito;\n  const region = getRegionFromUserPoolId(userPoolId);\n  assertAuthTokensWithRefreshToken(tokens);\n  const refreshTokenString = tokens.refreshToken;\n  const AuthParameters = {\n    REFRESH_TOKEN: refreshTokenString\n  };\n  if (tokens.deviceMetadata?.deviceKey) {\n    AuthParameters.DEVICE_KEY = tokens.deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    AuthenticationResult\n  } = await initiateAuth({\n    region\n  }, {\n    ClientId: userPoolClientId,\n    AuthFlow: 'REFRESH_TOKEN_AUTH',\n    AuthParameters,\n    UserContextData\n  });\n  const accessToken = decodeJWT(AuthenticationResult?.AccessToken ?? '');\n  const idToken = AuthenticationResult?.IdToken ? decodeJWT(AuthenticationResult.IdToken) : undefined;\n  const {\n    iat\n  } = accessToken.payload;\n  // This should never happen. If it does, it's a bug from the service.\n  if (!iat) {\n    throw new AuthError({\n      name: 'iatNotFoundException',\n      message: 'iat not found in access token'\n    });\n  }\n  const clockDrift = iat * 1000 - new Date().getTime();\n  return {\n    accessToken,\n    idToken,\n    clockDrift,\n    refreshToken: refreshTokenString,\n    username\n  };\n};\nconst refreshAuthTokens = deDupeAsyncFunction(refreshAuthTokensFunction);\nconst refreshAuthTokensWithoutDedupe = refreshAuthTokensFunction;\nexport { refreshAuthTokens, refreshAuthTokensWithoutDedupe };\n", "import { createAssertionFunction } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar TokenProviderErrorCode;\n(function (TokenProviderErrorCode) {\n  TokenProviderErrorCode[\"InvalidAuthTokens\"] = \"InvalidAuthTokens\";\n})(TokenProviderErrorCode || (TokenProviderErrorCode = {}));\nconst tokenValidationErrorMap = {\n  [TokenProviderErrorCode.InvalidAuthTokens]: {\n    message: 'Invalid tokens.',\n    recoverySuggestion: 'Make sure the tokens are valid.'\n  }\n};\nconst assert = createAssertionFunction(tokenValidationErrorMap);\nexport { TokenProviderErrorCode, assert };\n", "const AuthTokenStorageKeys = {\n  accessToken: 'accessToken',\n  idToken: 'idToken',\n  oidcProvider: 'oidcProvider',\n  clockDrift: 'clockDrift',\n  refreshToken: 'refreshToken',\n  deviceKey: 'deviceKey',\n  randomPasswordKey: 'randomPasswordKey',\n  deviceGroupKey: 'deviceGroupKey',\n  signInDetails: 'signInDetails',\n  oauthMetadata: 'oauthMetadata'\n};\nexport { AuthTokenStorageKeys };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst AUTH_KEY_PREFIX = 'CognitoIdentityServiceProvider';\nexport { AUTH_KEY_PREFIX };\n", "import { decodeJWT, assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { AuthTokenStorageKeys } from './types.mjs';\nimport { assert, TokenProviderErrorCode } from './errorHelpers.mjs';\nimport { AUTH_KEY_PREFIX } from './constants.mjs';\nclass DefaultTokenStore {\n  getKeyValueStorage() {\n    if (!this.keyValueStorage) {\n      throw new AuthError({\n        name: 'KeyValueStorageNotFoundException',\n        message: 'KeyValueStorage was not found in TokenStore'\n      });\n    }\n    return this.keyValueStorage;\n  }\n  setKeyValueStorage(keyValueStorage) {\n    this.keyValueStorage = keyValueStorage;\n  }\n  setAuthConfig(authConfig) {\n    this.authConfig = authConfig;\n  }\n  async loadTokens() {\n    // TODO(v6): migration logic should be here\n    // Reading V5 tokens old format\n    try {\n      const authKeys = await this.getAuthKeys();\n      const accessTokenString = await this.getKeyValueStorage().getItem(authKeys.accessToken);\n      if (!accessTokenString) {\n        throw new AuthError({\n          name: 'NoSessionFoundException',\n          message: 'Auth session was not found. Make sure to call signIn.'\n        });\n      }\n      const accessToken = decodeJWT(accessTokenString);\n      const itString = await this.getKeyValueStorage().getItem(authKeys.idToken);\n      const idToken = itString ? decodeJWT(itString) : undefined;\n      const refreshToken = (await this.getKeyValueStorage().getItem(authKeys.refreshToken)) ?? undefined;\n      const clockDriftString = (await this.getKeyValueStorage().getItem(authKeys.clockDrift)) ?? '0';\n      const clockDrift = Number.parseInt(clockDriftString);\n      const signInDetails = await this.getKeyValueStorage().getItem(authKeys.signInDetails);\n      const tokens = {\n        accessToken,\n        idToken,\n        refreshToken,\n        deviceMetadata: (await this.getDeviceMetadata()) ?? undefined,\n        clockDrift,\n        username: await this.getLastAuthUser()\n      };\n      if (signInDetails) {\n        tokens.signInDetails = JSON.parse(signInDetails);\n      }\n      return tokens;\n    } catch (err) {\n      return null;\n    }\n  }\n  async storeTokens(tokens) {\n    assert(tokens !== undefined, TokenProviderErrorCode.InvalidAuthTokens);\n    const lastAuthUser = tokens.username;\n    await this.getKeyValueStorage().setItem(this.getLastAuthUserKey(), lastAuthUser);\n    const authKeys = await this.getAuthKeys();\n    await this.getKeyValueStorage().setItem(authKeys.accessToken, tokens.accessToken.toString());\n    if (tokens.idToken) {\n      await this.getKeyValueStorage().setItem(authKeys.idToken, tokens.idToken.toString());\n    } else {\n      await this.getKeyValueStorage().removeItem(authKeys.idToken);\n    }\n    if (tokens.refreshToken) {\n      await this.getKeyValueStorage().setItem(authKeys.refreshToken, tokens.refreshToken);\n    } else {\n      await this.getKeyValueStorage().removeItem(authKeys.refreshToken);\n    }\n    if (tokens.deviceMetadata) {\n      if (tokens.deviceMetadata.deviceKey) {\n        await this.getKeyValueStorage().setItem(authKeys.deviceKey, tokens.deviceMetadata.deviceKey);\n      }\n      if (tokens.deviceMetadata.deviceGroupKey) {\n        await this.getKeyValueStorage().setItem(authKeys.deviceGroupKey, tokens.deviceMetadata.deviceGroupKey);\n      }\n      await this.getKeyValueStorage().setItem(authKeys.randomPasswordKey, tokens.deviceMetadata.randomPassword);\n    }\n    if (tokens.signInDetails) {\n      await this.getKeyValueStorage().setItem(authKeys.signInDetails, JSON.stringify(tokens.signInDetails));\n    } else {\n      await this.getKeyValueStorage().removeItem(authKeys.signInDetails);\n    }\n    await this.getKeyValueStorage().setItem(authKeys.clockDrift, `${tokens.clockDrift}`);\n  }\n  async clearTokens() {\n    const authKeys = await this.getAuthKeys();\n    // Not calling clear because it can remove data that is not managed by AuthTokenStore\n    await Promise.all([this.getKeyValueStorage().removeItem(authKeys.accessToken), this.getKeyValueStorage().removeItem(authKeys.idToken), this.getKeyValueStorage().removeItem(authKeys.clockDrift), this.getKeyValueStorage().removeItem(authKeys.refreshToken), this.getKeyValueStorage().removeItem(authKeys.signInDetails), this.getKeyValueStorage().removeItem(this.getLastAuthUserKey()), this.getKeyValueStorage().removeItem(authKeys.oauthMetadata)]);\n  }\n  async getDeviceMetadata(username) {\n    const authKeys = await this.getAuthKeys(username);\n    const deviceKey = await this.getKeyValueStorage().getItem(authKeys.deviceKey);\n    const deviceGroupKey = await this.getKeyValueStorage().getItem(authKeys.deviceGroupKey);\n    const randomPassword = await this.getKeyValueStorage().getItem(authKeys.randomPasswordKey);\n    return randomPassword && deviceGroupKey && deviceKey ? {\n      deviceKey,\n      deviceGroupKey,\n      randomPassword\n    } : null;\n  }\n  async clearDeviceMetadata(username) {\n    const authKeys = await this.getAuthKeys(username);\n    await Promise.all([this.getKeyValueStorage().removeItem(authKeys.deviceKey), this.getKeyValueStorage().removeItem(authKeys.deviceGroupKey), this.getKeyValueStorage().removeItem(authKeys.randomPasswordKey)]);\n  }\n  async getAuthKeys(username) {\n    assertTokenProviderConfig(this.authConfig?.Cognito);\n    const lastAuthUser = username ?? (await this.getLastAuthUser());\n    return createKeysForAuthStorage(AUTH_KEY_PREFIX, `${this.authConfig.Cognito.userPoolClientId}.${lastAuthUser}`);\n  }\n  getLastAuthUserKey() {\n    assertTokenProviderConfig(this.authConfig?.Cognito);\n    const identifier = this.authConfig.Cognito.userPoolClientId;\n    return `${AUTH_KEY_PREFIX}.${identifier}.LastAuthUser`;\n  }\n  async getLastAuthUser() {\n    const lastAuthUser = (await this.getKeyValueStorage().getItem(this.getLastAuthUserKey())) ?? 'username';\n    return lastAuthUser;\n  }\n  async setOAuthMetadata(metadata) {\n    const {\n      oauthMetadata: oauthMetadataKey\n    } = await this.getAuthKeys();\n    await this.getKeyValueStorage().setItem(oauthMetadataKey, JSON.stringify(metadata));\n  }\n  async getOAuthMetadata() {\n    const {\n      oauthMetadata: oauthMetadataKey\n    } = await this.getAuthKeys();\n    const oauthMetadata = await this.getKeyValueStorage().getItem(oauthMetadataKey);\n    return oauthMetadata && JSON.parse(oauthMetadata);\n  }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n  return getAuthStorageKeys(AuthTokenStorageKeys)(`${provider}`, identifier);\n};\nfunction getAuthStorageKeys(authKeys) {\n  const keys = Object.values({\n    ...authKeys\n  });\n  return (prefix, identifier) => keys.reduce((acc, authKey) => ({\n    ...acc,\n    [authKey]: `${prefix}.${identifier}.${authKey}`\n  }), {});\n}\nexport { DefaultTokenStore, createKeysForAuthStorage, getAuthStorageKeys };\n", "import { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore.mjs';\nimport { OAuthStorageKeys } from './types.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst V5_HOSTED_UI_KEY = 'amplify-signin-with-hostedUI';\nconst name = 'CognitoIdentityServiceProvider';\nclass DefaultOAuthStore {\n  constructor(keyValueStorage) {\n    this.keyValueStorage = keyValueStorage;\n  }\n  async clearOAuthInflightData() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await Promise.all([this.keyValueStorage.removeItem(authKeys.inflightOAuth), this.keyValueStorage.removeItem(authKeys.oauthPKCE), this.keyValueStorage.removeItem(authKeys.oauthState)]);\n  }\n  async clearOAuthData() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await this.clearOAuthInflightData();\n    await this.keyValueStorage.removeItem(V5_HOSTED_UI_KEY); // remove in case a customer migrated an App from v5 to v6\n    return this.keyValueStorage.removeItem(authKeys.oauthSignIn);\n  }\n  loadOAuthState() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.getItem(authKeys.oauthState);\n  }\n  storeOAuthState(state) {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.setItem(authKeys.oauthState, state);\n  }\n  loadPKCE() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.getItem(authKeys.oauthPKCE);\n  }\n  storePKCE(pkce) {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return this.keyValueStorage.setItem(authKeys.oauthPKCE, pkce);\n  }\n  setAuthConfig(authConfigParam) {\n    this.cognitoConfig = authConfigParam;\n  }\n  async loadOAuthInFlight() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    return (await this.keyValueStorage.getItem(authKeys.inflightOAuth)) === 'true';\n  }\n  async storeOAuthInFlight(inflight) {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await this.keyValueStorage.setItem(authKeys.inflightOAuth, `${inflight}`);\n  }\n  async loadOAuthSignIn() {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    const isLegacyHostedUISignIn = await this.keyValueStorage.getItem(V5_HOSTED_UI_KEY);\n    const [isOAuthSignIn, preferPrivateSession] = (await this.keyValueStorage.getItem(authKeys.oauthSignIn))?.split(',') ?? [];\n    return {\n      isOAuthSignIn: isOAuthSignIn === 'true' || isLegacyHostedUISignIn === 'true',\n      preferPrivateSession: preferPrivateSession === 'true'\n    };\n  }\n  async storeOAuthSignIn(oauthSignIn, preferPrivateSession = false) {\n    assertTokenProviderConfig(this.cognitoConfig);\n    const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n    await this.keyValueStorage.setItem(authKeys.oauthSignIn, `${oauthSignIn},${preferPrivateSession}`);\n  }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n  return getAuthStorageKeys(OAuthStorageKeys)(provider, identifier);\n};\nexport { DefaultOAuthStore };\n", "import { defaultStorage } from '@aws-amplify/core';\nimport { DefaultOAuthStore } from '../signInWithRedirectStore.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst oAuthStore = new DefaultOAuthStore(defaultStorage);\nexport { oAuthStore };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst inflightPromises = [];\nconst addInflightPromise = resolver => {\n  inflightPromises.push(resolver);\n};\nconst resolveAndClearInflightPromises = () => {\n  while (inflightPromises.length) {\n    inflightPromises.pop()?.();\n  }\n};\nexport { addInflightPromise, resolveAndClearInflightPromises };\n", "import { Hub } from '@aws-amplify/core';\nimport { isBrowser, assertTokenProviderConfig, isTokenExpired, AMPLIFY_SYMBOL, AmplifyErrorCode } from '@aws-amplify/core/internals/utils';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { oAuthStore } from '../utils/oauth/oAuthStore.mjs';\nimport { addInflightPromise } from '../utils/oauth/inflightPromise.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nclass TokenOrchestrator {\n  constructor() {\n    this.waitForInflightOAuth = isBrowser() ? async () => {\n      if (!(await oAuthStore.loadOAuthInFlight())) {\n        return;\n      }\n      if (this.inflightPromise) {\n        return this.inflightPromise;\n      }\n      // when there is valid oauth config and there is an inflight oauth flow, try\n      // to block async calls that require fetching tokens before the oauth flow completes\n      // e.g. getCurrentUser, fetchAuthSession etc.\n      this.inflightPromise = new Promise((resolve, _reject) => {\n        addInflightPromise(resolve);\n      });\n      return this.inflightPromise;\n    } : async () => {\n      // no-op for non-browser environments\n    };\n  }\n  setAuthConfig(authConfig) {\n    oAuthStore.setAuthConfig(authConfig.Cognito);\n    this.authConfig = authConfig;\n  }\n  setTokenRefresher(tokenRefresher) {\n    this.tokenRefresher = tokenRefresher;\n  }\n  setAuthTokenStore(tokenStore) {\n    this.tokenStore = tokenStore;\n  }\n  getTokenStore() {\n    if (!this.tokenStore) {\n      throw new AuthError({\n        name: 'EmptyTokenStoreException',\n        message: 'TokenStore not set'\n      });\n    }\n    return this.tokenStore;\n  }\n  getTokenRefresher() {\n    if (!this.tokenRefresher) {\n      throw new AuthError({\n        name: 'EmptyTokenRefresherException',\n        message: 'TokenRefresher not set'\n      });\n    }\n    return this.tokenRefresher;\n  }\n  async getTokens(options) {\n    let tokens;\n    try {\n      assertTokenProviderConfig(this.authConfig?.Cognito);\n    } catch (_err) {\n      // Token provider not configured\n      return null;\n    }\n    await this.waitForInflightOAuth();\n    this.inflightPromise = undefined;\n    tokens = await this.getTokenStore().loadTokens();\n    const username = await this.getTokenStore().getLastAuthUser();\n    if (tokens === null) {\n      return null;\n    }\n    const idTokenExpired = !!tokens?.idToken && isTokenExpired({\n      expiresAt: (tokens.idToken?.payload?.exp ?? 0) * 1000,\n      clockDrift: tokens.clockDrift ?? 0\n    });\n    const accessTokenExpired = isTokenExpired({\n      expiresAt: (tokens.accessToken?.payload?.exp ?? 0) * 1000,\n      clockDrift: tokens.clockDrift ?? 0\n    });\n    if (options?.forceRefresh || idTokenExpired || accessTokenExpired) {\n      tokens = await this.refreshTokens({\n        tokens,\n        username\n      });\n      if (tokens === null) {\n        return null;\n      }\n    }\n    return {\n      accessToken: tokens?.accessToken,\n      idToken: tokens?.idToken,\n      signInDetails: tokens?.signInDetails\n    };\n  }\n  async refreshTokens({\n    tokens,\n    username\n  }) {\n    try {\n      const {\n        signInDetails\n      } = tokens;\n      const newTokens = await this.getTokenRefresher()({\n        tokens,\n        authConfig: this.authConfig,\n        username\n      });\n      newTokens.signInDetails = signInDetails;\n      await this.setTokens({\n        tokens: newTokens\n      });\n      Hub.dispatch('auth', {\n        event: 'tokenRefresh'\n      }, 'Auth', AMPLIFY_SYMBOL);\n      return newTokens;\n    } catch (err) {\n      return this.handleErrors(err);\n    }\n  }\n  handleErrors(err) {\n    assertServiceError(err);\n    if (err.name !== AmplifyErrorCode.NetworkError) {\n      // TODO(v6): Check errors on client\n      this.clearTokens();\n    }\n    Hub.dispatch('auth', {\n      event: 'tokenRefresh_failure',\n      data: {\n        error: err\n      }\n    }, 'Auth', AMPLIFY_SYMBOL);\n    if (err.name.startsWith('NotAuthorizedException')) {\n      return null;\n    }\n    throw err;\n  }\n  async setTokens({\n    tokens\n  }) {\n    return this.getTokenStore().storeTokens(tokens);\n  }\n  async clearTokens() {\n    return this.getTokenStore().clearTokens();\n  }\n  getDeviceMetadata(username) {\n    return this.getTokenStore().getDeviceMetadata(username);\n  }\n  clearDeviceMetadata(username) {\n    return this.getTokenStore().clearDeviceMetadata(username);\n  }\n  setOAuthMetadata(metadata) {\n    return this.getTokenStore().setOAuthMetadata(metadata);\n  }\n  getOAuthMetadata() {\n    return this.getTokenStore().getOAuthMetadata();\n  }\n}\nexport { TokenOrchestrator };\n", "import { defaultStorage } from '@aws-amplify/core';\nimport { refreshAuthTokens } from '../utils/refreshAuthTokens.mjs';\nimport { DefaultTokenStore } from './TokenStore.mjs';\nimport { TokenOrchestrator } from './TokenOrchestrator.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nclass CognitoUserPoolsTokenProvider {\n  constructor() {\n    this.authTokenStore = new DefaultTokenStore();\n    this.authTokenStore.setKeyValueStorage(defaultStorage);\n    this.tokenOrchestrator = new TokenOrchestrator();\n    this.tokenOrchestrator.setAuthTokenStore(this.authTokenStore);\n    this.tokenOrchestrator.setTokenRefresher(refreshAuthTokens);\n  }\n  getTokens({\n    forceRefresh\n  } = {\n    forceRefresh: false\n  }) {\n    return this.tokenOrchestrator.getTokens({\n      forceRefresh\n    });\n  }\n  setKeyValueStorage(keyValueStorage) {\n    this.authTokenStore.setKeyValueStorage(keyValueStorage);\n  }\n  setAuthConfig(authConfig) {\n    this.authTokenStore.setAuthConfig(authConfig);\n    this.tokenOrchestrator.setAuthConfig(authConfig);\n  }\n}\nexport { CognitoUserPoolsTokenProvider };\n", "import { CognitoUserPoolsTokenProvider } from './CognitoUserPoolsTokenProvider.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * The default provider for the JWT access token and ID token issued from the configured Cognito user pool. It manages\n * the refresh and storage of the tokens. It stores the tokens in `window.localStorage` if available, and falls back to\n * in-memory storage if not.\n */\nconst cognitoUserPoolsTokenProvider = new CognitoUserPoolsTokenProvider();\nconst {\n  tokenOrchestrator\n} = cognitoUserPoolsTokenProvider;\nexport { cognitoUserPoolsTokenProvider, tokenOrchestrator };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction defaultState() {\n  return {\n    active: false\n  };\n}\nconst autoSignInReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_USERNAME':\n      return {\n        ...state,\n        username: action.value\n      };\n    case 'SET_SESSION':\n      return {\n        ...state,\n        session: action.value\n      };\n    case 'START':\n      return {\n        ...state,\n        active: true\n      };\n    case 'RESET':\n      return defaultState();\n    default:\n      return state;\n  }\n};\nconst createAutoSignInStore = reducer => {\n  let currentState = reducer(defaultState(), {\n    type: 'RESET'\n  });\n  return {\n    getState: () => currentState,\n    dispatch: action => {\n      currentState = reducer(currentState, action);\n    }\n  };\n};\nconst autoSignInStore = createAutoSignInStore(autoSignInReducer);\nexport { autoSignInStore };\n", "import { syncSessionStorage } from '@aws-amplify/core';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Minutes until stored session invalidates is defaulted to 3 minutes\n// to maintain parity with Amazon Cognito user pools API behavior\nconst MS_TO_EXPIRY = 3 * 60 * 1000;\nconst TGT_STATE = 'CognitoSignInState';\nconst SIGN_IN_STATE_KEYS = {\n  username: `${TGT_STATE}.username`,\n  challengeName: `${TGT_STATE}.challengeName`,\n  signInSession: `${TGT_STATE}.signInSession`,\n  expiry: `${TGT_STATE}.expiry`\n};\nconst signInReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SIGN_IN_SESSION':\n      persistSignInState({\n        signInSession: action.value\n      });\n      return {\n        ...state,\n        signInSession: action.value\n      };\n    case 'SET_SIGN_IN_STATE':\n      persistSignInState(action.value);\n      return {\n        ...action.value\n      };\n    case 'SET_CHALLENGE_NAME':\n      persistSignInState({\n        challengeName: action.value\n      });\n      return {\n        ...state,\n        challengeName: action.value\n      };\n    case 'SET_USERNAME':\n      persistSignInState({\n        username: action.value\n      });\n      return {\n        ...state,\n        username: action.value\n      };\n    case 'SET_INITIAL_STATE':\n      return getInitialState();\n    case 'RESET_STATE':\n      clearPersistedSignInState();\n      return getDefaultState();\n    // this state is never reachable\n    default:\n      return state;\n  }\n};\nconst isExpired = expiryDate => {\n  const expiryTimestamp = Number(expiryDate);\n  const currentTimestamp = Date.now();\n  return expiryTimestamp <= currentTimestamp;\n};\nconst resetActiveSignInState = () => {\n  signInStore.dispatch({\n    type: 'RESET_STATE'\n  });\n};\nconst clearPersistedSignInState = () => {\n  for (const stateKey of Object.values(SIGN_IN_STATE_KEYS)) {\n    syncSessionStorage.removeItem(stateKey);\n  }\n};\nconst getDefaultState = () => ({\n  username: undefined,\n  challengeName: undefined,\n  signInSession: undefined\n});\n// Hydrate signInStore from syncSessionStorage if the session has not expired\nconst getInitialState = () => {\n  const expiry = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.expiry);\n  if (!expiry || isExpired(expiry)) {\n    clearPersistedSignInState();\n    return getDefaultState();\n  }\n  const username = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.username) ?? undefined;\n  const challengeName = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.challengeName) ?? undefined;\n  const signInSession = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.signInSession) ?? undefined;\n  return {\n    username,\n    challengeName,\n    signInSession\n  };\n};\nconst createStore = reducer => {\n  let currentState = reducer(getDefaultState(), {\n    type: 'SET_INITIAL_STATE'\n  });\n  return {\n    getState: () => currentState,\n    dispatch: action => {\n      currentState = reducer(currentState, action);\n    }\n  };\n};\nconst signInStore = createStore(signInReducer);\nfunction setActiveSignInState(state) {\n  signInStore.dispatch({\n    type: 'SET_SIGN_IN_STATE',\n    value: state\n  });\n}\n// Save local state into Session Storage\nconst persistSignInState = ({\n  challengeName,\n  signInSession,\n  username\n}) => {\n  username && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.username, username);\n  challengeName && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.challengeName, challengeName);\n  if (signInSession) {\n    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.signInSession, signInSession);\n    // Updates expiry when session is passed\n    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.expiry, String(Date.now() + MS_TO_EXPIRY));\n  }\n};\nexport { persistSignInState, resetActiveSignInState, setActiveSignInState, signInStore };\n", "import { autoSignInStore } from '../../../client/utils/store/autoSignInStore.mjs';\nimport '../../../client/utils/store/signInStore.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { AUTO_SIGN_IN_EXCEPTION } from '../../../errors/constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst initialAutoSignIn = async () => {\n  throw new AuthError({\n    name: AUTO_SIGN_IN_EXCEPTION,\n    message: 'The autoSignIn flow has not started, or has been cancelled/completed.',\n    recoverySuggestion: 'Please try to use the signIn API or log out before starting a new autoSignIn flow.'\n  });\n};\n/**\n * Signs a user in automatically after finishing the sign-up process.\n *\n * This API will automatically sign a user in if the autoSignIn flow has been completed in the following cases:\n * - User confirmed their account with a verification code sent to their phone or email (default option).\n * - User confirmed their account with a verification link sent to their phone or email. In order to\n * enable this option you need to go to the Amazon Cognito [console](https://aws.amazon.com/pm/cognito),\n * look for your userpool, then go to the `Messaging` tab and enable `link` mode inside the `Verification message` option.\n * Finally you need to define the `signUpVerificationMethod` in your `Auth` config.\n *\n * @example\n * ```typescript\n *  Amplify.configure({\n *    Auth: {\n *     Cognito: {\n *    ...cognitoConfig,\n *    signUpVerificationMethod: \"link\" // the default value is \"code\"\n *   }\n *\t}});\n * ```\n *\n * @throws AutoSignInException - Thrown when the autoSignIn flow has not started, or has been cancelled/completed.\n * @returns The signInOutput.\n *\n * @example\n * ```typescript\n *  // handleSignUp.ts\n * async function handleSignUp(\n *   username:string,\n *   password:string\n * ){\n *   try {\n *     const { nextStep } = await signUp({\n *       username,\n *       password,\n *       options: {\n *         userAttributes:{ email:'email@email.com'},\n *         autoSignIn: true // This enables the auto sign-in flow.\n *       },\n *     });\n *\n *     handleSignUpStep(nextStep);\n *\n *   } catch (error) {\n *     console.log(error);\n *   }\n * }\n *\n * // handleConfirmSignUp.ts\n * async function handleConfirmSignUp(username:string, confirmationCode:string) {\n *   try {\n *     const { nextStep } = await confirmSignUp({\n *       username,\n *       confirmationCode,\n *     });\n *\n *     handleSignUpStep(nextStep);\n *   } catch (error) {\n *     console.log(error);\n *   }\n * }\n *\n * // signUpUtils.ts\n * async function handleSignUpStep( step: SignUpOutput[\"nextStep\"]) {\n * switch (step.signUpStep) {\n *   case \"CONFIRM_SIGN_UP\":\n *\n *    // Redirect end-user to confirm-sign up screen.\n *\n *   case \"COMPLETE_AUTO_SIGN_IN\":\n *\t   const codeDeliveryDetails = step.codeDeliveryDetails;\n *     if (codeDeliveryDetails) {\n *      // Redirect user to confirm-sign-up with link screen.\n *     }\n *     const signInOutput = await autoSignIn();\n *   // handle sign-in steps\n * }\n *\n * ```\n */\n// TODO(Eslint): can this be refactored not using `let` on exported member?\n// eslint-disable-next-line import/no-mutable-exports\nlet autoSignIn = initialAutoSignIn;\n/**\n * Sets the context of autoSignIn at run time.\n * @internal\n */\nfunction setAutoSignIn(callback) {\n  autoSignIn = callback;\n}\n/**\n * Resets the context\n *\n * @internal\n */\nfunction resetAutoSignIn(resetCallback = true) {\n  if (resetCallback) {\n    autoSignIn = initialAutoSignIn;\n  }\n  autoSignInStore.dispatch({\n    type: 'RESET'\n  });\n}\nexport { autoSignIn, resetAutoSignIn, setAutoSignIn };\n", "import { validationErrorMap } from '../../common/AuthErrorStrings.mjs';\nimport { AuthError } from '../AuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction assertValidationError(assertion, name) {\n  const {\n    message,\n    recoverySuggestion\n  } = validationErrorMap[name];\n  if (!assertion) {\n    throw new AuthError({\n      name,\n      message,\n      recoverySuggestion\n    });\n  }\n}\nexport { assertValidationError };\n", "import { getAmplifyUserAgent, Category } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getAuthUserAgentValue = (action, customUserAgentDetails) => getAmplifyUserAgent({\n  category: Category.Auth,\n  action,\n  ...customUserAgentDetails\n});\nexport { getAuthUserAgentValue };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createRespondToAuthChallengeClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('RespondToAuthChallenge'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createRespondToAuthChallengeClient };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createVerifySoftwareTokenClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('VerifySoftwareToken'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createVerifySoftwareTokenClient };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createAssociateSoftwareTokenClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('AssociateSoftwareToken'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createAssociateSoftwareTokenClient };\n", "import { decodeJWT, AmplifyError } from '@aws-amplify/core/internals/utils';\nimport { tokenOrchestrator } from './tokenProvider.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function cacheCognitoTokens(AuthenticationResult) {\n  if (AuthenticationResult.AccessToken) {\n    const accessToken = decodeJWT(AuthenticationResult.AccessToken);\n    const accessTokenIssuedAtInMillis = (accessToken.payload.iat || 0) * 1000;\n    const currentTime = new Date().getTime();\n    const clockDrift = accessTokenIssuedAtInMillis > 0 ? accessTokenIssuedAtInMillis - currentTime : 0;\n    let idToken;\n    let refreshToken;\n    let deviceMetadata;\n    if (AuthenticationResult.RefreshToken) {\n      refreshToken = AuthenticationResult.RefreshToken;\n    }\n    if (AuthenticationResult.IdToken) {\n      idToken = decodeJWT(AuthenticationResult.IdToken);\n    }\n    if (AuthenticationResult?.NewDeviceMetadata) {\n      deviceMetadata = AuthenticationResult.NewDeviceMetadata;\n    }\n    const tokens = {\n      accessToken,\n      idToken,\n      refreshToken,\n      clockDrift,\n      deviceMetadata,\n      username: AuthenticationResult.username\n    };\n    if (AuthenticationResult?.signInDetails) {\n      tokens.signInDetails = AuthenticationResult.signInDetails;\n    }\n    await tokenOrchestrator.setTokens({\n      tokens\n    });\n  } else {\n    // This would be a service error\n    throw new AmplifyError({\n      message: 'Invalid tokens',\n      name: 'InvalidTokens',\n      recoverySuggestion: 'Check Cognito UserPool settings'\n    });\n  }\n}\nexport { cacheCognitoTokens };\n", "import { Hub } from '@aws-amplify/core';\nimport { AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nimport { getCurrentUser } from '../apis/getCurrentUser.mjs';\nimport { USER_UNAUTHENTICATED_EXCEPTION, UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION } from '../../../errors/constants.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst ERROR_MESSAGE = 'Unable to get user session following successful sign-in.';\nconst dispatchSignedInHubEvent = async () => {\n  try {\n    Hub.dispatch('auth', {\n      event: 'signedIn',\n      data: await getCurrentUser()\n    }, 'Auth', AMPLIFY_SYMBOL);\n  } catch (error) {\n    if (error.name === USER_UNAUTHENTICATED_EXCEPTION) {\n      throw new AuthError({\n        name: UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION,\n        message: ERROR_MESSAGE,\n        recoverySuggestion: 'This most likely is due to auth tokens not being persisted. If you are using cookie store, please ensure cookies can be correctly set from your server.'\n      });\n    }\n    throw error;\n  }\n};\nexport { ERROR_MESSAGE, dispatchSignedInHubEvent };\n", "import { createAssertionFunction, AmplifyError, AmplifyErrorCode } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nclass PasskeyError extends AmplifyError {\n  constructor(params) {\n    super(params);\n    // Hack for making the custom error class work when transpiled to es5\n    // TODO: Delete the following 2 lines after we change the build target to >= es2015\n    this.constructor = PasskeyError;\n    Object.setPrototypeOf(this, PasskeyError.prototype);\n  }\n}\nvar PasskeyErrorCode;\n(function (PasskeyErrorCode) {\n  // not supported\n  PasskeyErrorCode[\"PasskeyNotSupported\"] = \"PasskeyNotSupported\";\n  // duplicate passkey\n  PasskeyErrorCode[\"PasskeyAlreadyExists\"] = \"PasskeyAlreadyExists\";\n  // misconfigurations\n  PasskeyErrorCode[\"InvalidPasskeyRegistrationOptions\"] = \"InvalidPasskeyRegistrationOptions\";\n  PasskeyErrorCode[\"InvalidPasskeyAuthenticationOptions\"] = \"InvalidPasskeyAuthenticationOptions\";\n  PasskeyErrorCode[\"RelyingPartyMismatch\"] = \"RelyingPartyMismatch\";\n  // failed credential creation / retrieval\n  PasskeyErrorCode[\"PasskeyRegistrationFailed\"] = \"PasskeyRegistrationFailed\";\n  PasskeyErrorCode[\"PasskeyRetrievalFailed\"] = \"PasskeyRetrievalFailed\";\n  // cancel / aborts\n  PasskeyErrorCode[\"PasskeyRegistrationCanceled\"] = \"PasskeyRegistrationCanceled\";\n  PasskeyErrorCode[\"PasskeyAuthenticationCanceled\"] = \"PasskeyAuthenticationCanceled\";\n  PasskeyErrorCode[\"PasskeyOperationAborted\"] = \"PasskeyOperationAborted\";\n})(PasskeyErrorCode || (PasskeyErrorCode = {}));\nconst notSupportedRecoverySuggestion = 'Passkeys may not be supported on this device. Ensure your application is running in a secure context (HTTPS) and Web Authentication API is supported.';\nconst abortOrCancelRecoverySuggestion = 'User may have canceled the ceremony or another interruption has occurred. Check underlying error for details.';\nconst misconfigurationRecoverySuggestion = 'Ensure your user pool is configured to support the WEB_AUTHN as an authentication factor.';\nconst passkeyErrorMap = {\n  [PasskeyErrorCode.PasskeyNotSupported]: {\n    message: 'Passkeys may not be supported on this device.',\n    recoverySuggestion: notSupportedRecoverySuggestion\n  },\n  [PasskeyErrorCode.InvalidPasskeyRegistrationOptions]: {\n    message: 'Invalid passkey registration options.',\n    recoverySuggestion: misconfigurationRecoverySuggestion\n  },\n  [PasskeyErrorCode.InvalidPasskeyAuthenticationOptions]: {\n    message: 'Invalid passkey authentication options.',\n    recoverySuggestion: misconfigurationRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyRegistrationFailed]: {\n    message: 'Device failed to create passkey.',\n    recoverySuggestion: notSupportedRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyRetrievalFailed]: {\n    message: 'Device failed to retrieve passkey.',\n    recoverySuggestion: 'Passkeys may not be available on this device. Try an alternative authentication factor like PASSWORD, EMAIL_OTP, or SMS_OTP.'\n  },\n  [PasskeyErrorCode.PasskeyAlreadyExists]: {\n    message: 'Passkey already exists in authenticator.',\n    recoverySuggestion: 'Proceed with existing passkey or try again after deleting the credential.'\n  },\n  [PasskeyErrorCode.PasskeyRegistrationCanceled]: {\n    message: 'Passkey registration ceremony has been canceled.',\n    recoverySuggestion: abortOrCancelRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyAuthenticationCanceled]: {\n    message: 'Passkey authentication ceremony has been canceled.',\n    recoverySuggestion: abortOrCancelRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyOperationAborted]: {\n    message: 'Passkey operation has been aborted.',\n    recoverySuggestion: abortOrCancelRecoverySuggestion\n  },\n  [PasskeyErrorCode.RelyingPartyMismatch]: {\n    message: 'Relying party does not match current domain.',\n    recoverySuggestion: 'Ensure relying party identifier matches current domain.'\n  }\n};\nconst assertPasskeyError = createAssertionFunction(passkeyErrorMap, PasskeyError);\n/**\n * Handle Passkey Authentication Errors\n * https://w3c.github.io/webauthn/#sctn-get-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nconst handlePasskeyAuthenticationError = err => {\n  if (err instanceof PasskeyError) {\n    return err;\n  }\n  if (err instanceof Error) {\n    if (err.name === 'NotAllowedError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyAuthenticationCanceled];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyAuthenticationCanceled,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n  }\n  return handlePasskeyError(err);\n};\n/**\n * Handle Passkey Registration Errors\n * https://w3c.github.io/webauthn/#sctn-create-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nconst handlePasskeyRegistrationError = err => {\n  if (err instanceof PasskeyError) {\n    return err;\n  }\n  if (err instanceof Error) {\n    // Duplicate Passkey\n    if (err.name === 'InvalidStateError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyAlreadyExists];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyAlreadyExists,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n    // User Cancels Ceremony / Generic Catch All\n    if (err.name === 'NotAllowedError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyRegistrationCanceled];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyRegistrationCanceled,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n  }\n  return handlePasskeyError(err);\n};\n/**\n * Handles Overlapping Passkey Errors Between Registration & Authentication\n * https://w3c.github.io/webauthn/#sctn-create-request-exceptions\n * https://w3c.github.io/webauthn/#sctn-get-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nconst handlePasskeyError = err => {\n  if (err instanceof Error) {\n    // Passkey Operation Aborted\n    if (err.name === 'AbortError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyOperationAborted];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyOperationAborted,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n    // Relying Party / Domain Mismatch\n    if (err.name === 'SecurityError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.RelyingPartyMismatch];\n      return new PasskeyError({\n        name: PasskeyErrorCode.RelyingPartyMismatch,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n  }\n  return new PasskeyError({\n    name: AmplifyErrorCode.Unknown,\n    message: 'An unknown error has occurred.',\n    underlyingError: err\n  });\n};\nexport { PasskeyError, PasskeyErrorCode, assertPasskeyError, handlePasskeyAuthenticationError, handlePasskeyRegistrationError };\n", "import { isBrowser } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Determines if passkey is supported in current context\n * Will return false if executed in non-secure context\n * @returns boolean\n */\nconst getIsPasskeySupported = () => {\n  return isBrowser() && window.isSecureContext && 'credentials' in navigator && typeof window.PublicKeyCredential === 'function';\n};\nexport { getIsPasskeySupported };\n", "import { base64Encoder } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// https://datatracker.ietf.org/doc/html/rfc4648#page-7\n/**\n * Converts an ArrayBuffer to a base64url encoded string\n * @param buffer - the ArrayBuffer instance of a Uint8Array\n * @returns string - a base64url encoded string\n */\nconst convertArrayBufferToBase64Url = buffer => {\n  return base64Encoder.convert(new Uint8Array(buffer), {\n    urlSafe: true,\n    skipPadding: true\n  });\n};\nexport { convertArrayBufferToBase64Url };\n", "import { base64Decoder } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Converts a base64url encoded string to an ArrayBuffer\n * @param base64url - a base64url encoded string\n * @returns ArrayBuffer\n */\nconst convertBase64UrlToArrayBuffer = base64url => {\n  return Uint8Array.from(base64Decoder.convert(base64url, {\n    urlSafe: true\n  }), x => x.charCodeAt(0)).buffer;\n};\nexport { convertBase64UrlToArrayBuffer };\n", "import { convertArrayBufferToBase64Url } from '../../../foundation/convert/base64url/convertArrayBufferToBase64Url.mjs';\nimport { convertBase64UrlToArrayBuffer } from '../../../foundation/convert/base64url/convertBase64UrlToArrayBuffer.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Deserializes Public Key Credential Creation Options JSON\n * @param input PasskeyCreateOptionsJson\n * @returns PublicKeyCredentialCreationOptions\n */\nconst deserializeJsonToPkcCreationOptions = input => {\n  const userIdBuffer = convertBase64UrlToArrayBuffer(input.user.id);\n  const challengeBuffer = convertBase64UrlToArrayBuffer(input.challenge);\n  const excludeCredentialsWithBuffer = (input.excludeCredentials || []).map(excludeCred => ({\n    ...excludeCred,\n    id: convertBase64UrlToArrayBuffer(excludeCred.id)\n  }));\n  return {\n    ...input,\n    excludeCredentials: excludeCredentialsWithBuffer,\n    challenge: challengeBuffer,\n    user: {\n      ...input.user,\n      id: userIdBuffer\n    }\n  };\n};\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyCreateResult\n * @returns PasskeyCreateResultJson\n */\nconst serializePkcWithAttestationToJson = input => {\n  const response = {\n    clientDataJSON: convertArrayBufferToBase64Url(input.response.clientDataJSON),\n    attestationObject: convertArrayBufferToBase64Url(input.response.attestationObject),\n    transports: input.response.getTransports(),\n    publicKeyAlgorithm: input.response.getPublicKeyAlgorithm(),\n    authenticatorData: convertArrayBufferToBase64Url(input.response.getAuthenticatorData())\n  };\n  const publicKey = input.response.getPublicKey();\n  if (publicKey) {\n    response.publicKey = convertArrayBufferToBase64Url(publicKey);\n  }\n  const resultJson = {\n    type: input.type,\n    id: input.id,\n    rawId: convertArrayBufferToBase64Url(input.rawId),\n    clientExtensionResults: input.getClientExtensionResults(),\n    response\n  };\n  if (input.authenticatorAttachment) {\n    resultJson.authenticatorAttachment = input.authenticatorAttachment;\n  }\n  return resultJson;\n};\n/**\n * Deserializes Public Key Credential Get Options JSON\n * @param input PasskeyGetOptionsJson\n * @returns PublicKeyCredentialRequestOptions\n */\nconst deserializeJsonToPkcGetOptions = input => {\n  const challengeBuffer = convertBase64UrlToArrayBuffer(input.challenge);\n  const allowedCredentialsWithBuffer = (input.allowCredentials || []).map(allowedCred => ({\n    ...allowedCred,\n    id: convertBase64UrlToArrayBuffer(allowedCred.id)\n  }));\n  return {\n    ...input,\n    challenge: challengeBuffer,\n    allowCredentials: allowedCredentialsWithBuffer\n  };\n};\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyGetResult\n * @returns PasskeyGetResultJson\n */\nconst serializePkcWithAssertionToJson = input => {\n  const response = {\n    clientDataJSON: convertArrayBufferToBase64Url(input.response.clientDataJSON),\n    authenticatorData: convertArrayBufferToBase64Url(input.response.authenticatorData),\n    signature: convertArrayBufferToBase64Url(input.response.signature)\n  };\n  if (input.response.userHandle) {\n    response.userHandle = convertArrayBufferToBase64Url(input.response.userHandle);\n  }\n  const resultJson = {\n    id: input.id,\n    rawId: convertArrayBufferToBase64Url(input.rawId),\n    type: input.type,\n    clientExtensionResults: input.getClientExtensionResults(),\n    response\n  };\n  if (input.authenticatorAttachment) {\n    resultJson.authenticatorAttachment = input.authenticatorAttachment;\n  }\n  return resultJson;\n};\nexport { deserializeJsonToPkcCreationOptions, deserializeJsonToPkcGetOptions, serializePkcWithAssertionToJson, serializePkcWithAttestationToJson };\n", "import { assertPasskeyError, PasskeyErrorCode } from '../errors.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction assertValidCredentialCreationOptions(credentialCreationOptions) {\n  assertPasskeyError([!!credentialCreationOptions, !!credentialCreationOptions?.challenge, !!credentialCreationOptions?.user, !!credentialCreationOptions?.rp, !!credentialCreationOptions?.pubKeyCredParams].every(Boolean), PasskeyErrorCode.InvalidPasskeyRegistrationOptions);\n}\nexport { assertValidCredentialCreationOptions };\n", "import { assertPasskeyError, PasskeyErrorCode } from '../errors.mjs';\nexport { assertValidCredentialCreationOptions } from './shared.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction assertCredentialIsPkcWithAuthenticatorAttestationResponse(credential) {\n  assertPasskeyError(credential && credential instanceof PublicKeyCredential && credential.response instanceof AuthenticatorAttestationResponse, PasskeyErrorCode.PasskeyRegistrationFailed);\n}\nfunction assertCredentialIsPkcWithAuthenticatorAssertionResponse(credential) {\n  assertPasskeyError(credential && credential instanceof PublicKeyCredential && credential.response instanceof AuthenticatorAssertionResponse, PasskeyErrorCode.PasskeyRetrievalFailed);\n}\nexport { assertCredentialIsPkcWithAuthenticatorAssertionResponse, assertCredentialIsPkcWithAuthenticatorAttestationResponse };\n", "import { assertPasskeyError, PasskeyErrorCode, handlePasskeyAuthenticationError } from './errors.mjs';\nimport { getIsPasskeySupported } from './getIsPasskeySupported.mjs';\nimport { deserializeJsonToPkcGetOptions, serializePkcWithAssertionToJson } from './serde.mjs';\nimport { assertCredentialIsPkcWithAuthenticatorAssertionResponse } from './types/index.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getPasskey = async input => {\n  try {\n    const isPasskeySupported = getIsPasskeySupported();\n    assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);\n    const passkeyGetOptions = deserializeJsonToPkcGetOptions(input);\n    const credential = await navigator.credentials.get({\n      publicKey: passkeyGetOptions\n    });\n    assertCredentialIsPkcWithAuthenticatorAssertionResponse(credential);\n    return serializePkcWithAssertionToJson(credential);\n  } catch (err) {\n    throw handlePasskeyAuthenticationError(err);\n  }\n};\nexport { getPasskey };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createConfirmDeviceClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmDevice'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createConfirmDeviceClient };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst textEncoder = {\n  convert(input) {\n    return new TextEncoder().encode(input);\n  }\n};\nexport { textEncoder };\n", "/* eslint-disable */\n// @ts-nocheck -> BigInteger is already a vended utility\n// A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/\n//\n// All public methods have been removed except the following:\n//   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)\n//   toString (only radix 2, 4, 8, 16 and 32 supported)\n//   negate\n//   abs\n//   compareTo\n//   bitLength\n//   mod\n//   equals\n//   add\n//   subtract\n//   multiply\n//   divide\n//   modPow\n/*\n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n// (public) Constructor\nfunction BigInteger(a, b) {\n  if (a != null) this.fromString(a, b);\n}\n// return new, unset BigInteger\nfunction nbi() {\n  return new BigInteger(null, null);\n}\n// Bits per digit\nlet dbits;\n// JavaScript engine analysis\nconst canary = 0xdeadbeefcafe;\nconst j_lm = (canary & 0xffffff) === 0xefcafe;\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n  while (--n >= 0) {\n    const v = x * this[i++] + w[j] + c;\n    c = Math.floor(v / 0x4000000);\n    w[j++] = v & 0x3ffffff;\n  }\n  return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n  const xl = x & 0x7fff;\n  const xh = x >> 15;\n  while (--n >= 0) {\n    let l = this[i] & 0x7fff;\n    const h = this[i++] >> 15;\n    const m = xh * l + h * xl;\n    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n    w[j++] = l & 0x3fffffff;\n  }\n  return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n  const xl = x & 0x3fff;\n  const xh = x >> 14;\n  while (--n >= 0) {\n    let l = this[i] & 0x3fff;\n    const h = this[i++] >> 14;\n    const m = xh * l + h * xl;\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n    c = (l >> 28) + (m >> 14) + xh * h;\n    w[j++] = l & 0xfffffff;\n  }\n  return c;\n}\nconst inBrowser = typeof navigator !== 'undefined';\nif (inBrowser && j_lm && navigator.appName === 'Microsoft Internet Explorer') {\n  BigInteger.prototype.am = am2;\n  dbits = 30;\n} else if (inBrowser && j_lm && navigator.appName !== 'Netscape') {\n  BigInteger.prototype.am = am1;\n  dbits = 26;\n} else {\n  // Mozilla/Netscape seems to prefer am3\n  BigInteger.prototype.am = am3;\n  dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nconst BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nconst BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';\nconst BI_RC = [];\nlet rr, vv;\nrr = '0'.charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = 'a'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = 'A'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nfunction int2char(n) {\n  return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n  const c = BI_RC[s.charCodeAt(i)];\n  return c == null ? -1 : c;\n}\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for (let i = this.t - 1; i >= 0; --i) r[i] = this[i];\n  r.t = this.t;\n  r.s = this.s;\n}\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = x < 0 ? -1 : 0;\n  if (x > 0) this[0] = x;else if (x < -1) this[0] = x + this.DV;else this.t = 0;\n}\n// return bigint initialized to value\nfunction nbv(i) {\n  const r = nbi();\n  r.fromInt(i);\n  return r;\n}\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n  let k;\n  if (b === 16) k = 4;else if (b === 8) k = 3;else if (b === 2) k = 1;else if (b === 32) k = 5;else if (b === 4) k = 2;else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n  this.t = 0;\n  this.s = 0;\n  let i = s.length;\n  let mi = false;\n  let sh = 0;\n  while (--i >= 0) {\n    const x = intAt(s, i);\n    if (x < 0) {\n      if (s.charAt(i) === '-') mi = true;\n      continue;\n    }\n    mi = false;\n    if (sh === 0) this[this.t++] = x;else if (sh + k > this.DB) {\n      this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n      this[this.t++] = x >> this.DB - sh;\n    } else this[this.t - 1] |= x << sh;\n    sh += k;\n    if (sh >= this.DB) sh -= this.DB;\n  }\n  this.clamp();\n  if (mi) BigInteger.ZERO.subTo(this, this);\n}\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  const c = this.s & this.DM;\n  while (this.t > 0 && this[this.t - 1] == c) --this.t;\n}\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  if (this.s < 0) return '-' + this.negate().toString(b);\n  let k;\n  if (b == 16) k = 4;else if (b === 8) k = 3;else if (b === 2) k = 1;else if (b === 32) k = 5;else if (b === 4) k = 2;else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n  const km = (1 << k) - 1;\n  let d;\n  let m = false;\n  let r = '';\n  let i = this.t;\n  let p = this.DB - i * this.DB % k;\n  if (i-- > 0) {\n    if (p < this.DB && (d = this[i] >> p) > 0) {\n      m = true;\n      r = int2char(d);\n    }\n    while (i >= 0) {\n      if (p < k) {\n        d = (this[i] & (1 << p) - 1) << k - p;\n        d |= this[--i] >> (p += this.DB - k);\n      } else {\n        d = this[i] >> (p -= k) & km;\n        if (p <= 0) {\n          p += this.DB;\n          --i;\n        }\n      }\n      if (d > 0) m = true;\n      if (m) r += int2char(d);\n    }\n  }\n  return m ? r : '0';\n}\n// (public) -this\nfunction bnNegate() {\n  const r = nbi();\n  BigInteger.ZERO.subTo(this, r);\n  return r;\n}\n// (public) |this|\nfunction bnAbs() {\n  return this.s < 0 ? this.negate() : this;\n}\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  let r = this.s - a.s;\n  if (r != 0) return r;\n  let i = this.t;\n  r = i - a.t;\n  if (r != 0) return this.s < 0 ? -r : r;\n  while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;\n  return 0;\n}\n// returns bit length of the integer x\nfunction nbits(x) {\n  let r = 1;\n  let t;\n  if ((t = x >>> 16) !== 0) {\n    x = t;\n    r += 16;\n  }\n  if ((t = x >> 8) !== 0) {\n    x = t;\n    r += 8;\n  }\n  if ((t = x >> 4) !== 0) {\n    x = t;\n    r += 4;\n  }\n  if ((t = x >> 2) !== 0) {\n    x = t;\n    r += 2;\n  }\n  if ((t = x >> 1) !== 0) {\n    x = t;\n    r += 1;\n  }\n  return r;\n}\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if (this.t <= 0) return 0;\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n}\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n  let i;\n  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n  for (i = n - 1; i >= 0; --i) r[i] = 0;\n  r.t = this.t + n;\n  r.s = this.s;\n}\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n  for (let i = n; i < this.t; ++i) r[i - n] = this[i];\n  r.t = Math.max(this.t - n, 0);\n  r.s = this.s;\n}\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n  const bs = n % this.DB;\n  const cbs = this.DB - bs;\n  const bm = (1 << cbs) - 1;\n  const ds = Math.floor(n / this.DB);\n  let c = this.s << bs & this.DM;\n  let i;\n  for (i = this.t - 1; i >= 0; --i) {\n    r[i + ds + 1] = this[i] >> cbs | c;\n    c = (this[i] & bm) << bs;\n  }\n  for (i = ds - 1; i >= 0; --i) r[i] = 0;\n  r[ds] = c;\n  r.t = this.t + ds + 1;\n  r.s = this.s;\n  r.clamp();\n}\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n  r.s = this.s;\n  const ds = Math.floor(n / this.DB);\n  if (ds >= this.t) {\n    r.t = 0;\n    return;\n  }\n  const bs = n % this.DB;\n  const cbs = this.DB - bs;\n  const bm = (1 << bs) - 1;\n  r[0] = this[ds] >> bs;\n  for (let i = ds + 1; i < this.t; ++i) {\n    r[i - ds - 1] |= (this[i] & bm) << cbs;\n    r[i - ds] = this[i] >> bs;\n  }\n  if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n  r.t = this.t - ds;\n  r.clamp();\n}\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n  let i = 0;\n  let c = 0;\n  const m = Math.min(a.t, this.t);\n  while (i < m) {\n    c += this[i] - a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n  if (a.t < this.t) {\n    c -= a.s;\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  } else {\n    c += this.s;\n    while (i < a.t) {\n      c -= a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c -= a.s;\n  }\n  r.s = c < 0 ? -1 : 0;\n  if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n}\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n  const x = this.abs();\n  const y = a.abs();\n  let i = x.t;\n  r.t = i + y.t;\n  while (--i >= 0) r[i] = 0;\n  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n  r.s = 0;\n  r.clamp();\n  if (this.s !== a.s) BigInteger.ZERO.subTo(r, r);\n}\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  const x = this.abs();\n  let i = r.t = 2 * x.t;\n  while (--i >= 0) r[i] = 0;\n  for (i = 0; i < x.t - 1; ++i) {\n    const c = x.am(i, x[i], r, 2 * i, 0, 1);\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n      r[i + x.t] -= x.DV;\n      r[i + x.t + 1] = 1;\n    }\n  }\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n  r.s = 0;\n  r.clamp();\n}\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n  const pm = m.abs();\n  if (pm.t <= 0) return;\n  const pt = this.abs();\n  if (pt.t < pm.t) {\n    if (q != null) q.fromInt(0);\n    if (r != null) this.copyTo(r);\n    return;\n  }\n  if (r === null) r = nbi();\n  const y = nbi();\n  const ts = this.s;\n  const ms = m.s;\n  const nsh = this.DB - nbits(pm[pm.t - 1]);\n  // normalize modulus\n  if (nsh > 0) {\n    pm.lShiftTo(nsh, y);\n    pt.lShiftTo(nsh, r);\n  } else {\n    pm.copyTo(y);\n    pt.copyTo(r);\n  }\n  const ys = y.t;\n  const y0 = y[ys - 1];\n  if (y0 === 0) return;\n  const yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n  const d1 = this.FV / yt;\n  const d2 = (1 << this.F1) / yt;\n  const e = 1 << this.F2;\n  let i = r.t;\n  let j = i - ys;\n  const t = q === null ? nbi() : q;\n  y.dlShiftTo(j, t);\n  if (r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t, r);\n  }\n  BigInteger.ONE.dlShiftTo(ys, t);\n  t.subTo(y, y);\n  // \"negative\" y so we can replace sub with am later\n  while (y.t < ys) y[y.t++] = 0;\n  while (--j >= 0) {\n    // Estimate quotient digit\n    let qd = r[--i] === y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n      // Try it out\n      y.dlShiftTo(j, t);\n      r.subTo(t, r);\n      while (r[i] < --qd) r.subTo(t, r);\n    }\n  }\n  if (q !== null) {\n    r.drShiftTo(ys, q);\n    if (ts !== ms) BigInteger.ZERO.subTo(q, q);\n  }\n  r.t = ys;\n  r.clamp();\n  if (nsh > 0) r.rShiftTo(nsh, r);\n  // Denormalize remainder\n  if (ts < 0) BigInteger.ZERO.subTo(r, r);\n}\n// (public) this mod a\nfunction bnMod(a) {\n  const r = nbi();\n  this.abs().divRemTo(a, null, r);\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n  return r;\n}\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if (this.t < 1) return 0;\n  const x = this[0];\n  if ((x & 1) === 0) return 0;\n  let y = x & 3;\n  // y == 1/x mod 2^2\n  y = y * (2 - (x & 0xf) * y) & 0xf;\n  // y == 1/x mod 2^4\n  y = y * (2 - (x & 0xff) * y) & 0xff;\n  // y == 1/x mod 2^8\n  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff;\n  // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = y * (2 - x * y % this.DV) % this.DV;\n  // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return y > 0 ? this.DV - y : -y;\n}\nfunction bnEquals(a) {\n  return this.compareTo(a) === 0;\n}\n// (protected) r = this + a\nfunction bnpAddTo(a, r) {\n  let i = 0;\n  let c = 0;\n  const m = Math.min(a.t, this.t);\n  while (i < m) {\n    c += this[i] + a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n  if (a.t < this.t) {\n    c += a.s;\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  } else {\n    c += this.s;\n    while (i < a.t) {\n      c += a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c += a.s;\n  }\n  r.s = c < 0 ? -1 : 0;\n  if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;\n  r.t = i;\n  r.clamp();\n}\n// (public) this + a\nfunction bnAdd(a) {\n  const r = nbi();\n  this.addTo(a, r);\n  return r;\n}\n// (public) this - a\nfunction bnSubtract(a) {\n  const r = nbi();\n  this.subTo(a, r);\n  return r;\n}\n// (public) this * a\nfunction bnMultiply(a) {\n  const r = nbi();\n  this.multiplyTo(a, r);\n  return r;\n}\n// (public) this / a\nfunction bnDivide(a) {\n  const r = nbi();\n  this.divRemTo(a, r, null);\n  return r;\n}\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp & 0x7fff;\n  this.mph = this.mp >> 15;\n  this.um = (1 << m.DB - 15) - 1;\n  this.mt2 = 2 * m.t;\n}\n// xR mod m\nfunction montConvert(x) {\n  const r = nbi();\n  x.abs().dlShiftTo(this.m.t, r);\n  r.divRemTo(this.m, null, r);\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n  return r;\n}\n// x/R mod m\nfunction montRevert(x) {\n  const r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n}\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while (x.t <= this.mt2)\n  // pad x so am has enough room later\n  x[x.t++] = 0;\n  for (let i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    let j = x[i] & 0x7fff;\n    const u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;\n    // use am to combine the multiply-shift-add into one call\n    j = i + this.m.t;\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n    // propagate carry\n    while (x[j] >= x.DV) {\n      x[j] -= x.DV;\n      x[++j]++;\n    }\n  }\n  x.clamp();\n  x.drShiftTo(this.m.t, x);\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m, callback) {\n  let i = e.bitLength();\n  let k;\n  let r = nbv(1);\n  const z = new Montgomery(m);\n  if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;\n  // precomputation\n  const g = [];\n  let n = 3;\n  const k1 = k - 1;\n  const km = (1 << k) - 1;\n  g[1] = z.convert(this);\n  if (k > 1) {\n    const g2 = nbi();\n    z.sqrTo(g[1], g2);\n    while (n <= km) {\n      g[n] = nbi();\n      z.mulTo(g2, g[n - 2], g[n]);\n      n += 2;\n    }\n  }\n  let j = e.t - 1;\n  let w;\n  let is1 = true;\n  let r2 = nbi();\n  let t;\n  i = nbits(e[j]) - 1;\n  while (j >= 0) {\n    if (i >= k1) w = e[j] >> i - k1 & km;else {\n      w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n      if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n    }\n    n = k;\n    while ((w & 1) === 0) {\n      w >>= 1;\n      --n;\n    }\n    if ((i -= n) < 0) {\n      i += this.DB;\n      --j;\n    }\n    if (is1) {\n      // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    } else {\n      while (n > 1) {\n        z.sqrTo(r, r2);\n        z.sqrTo(r2, r);\n        n -= 2;\n      }\n      if (n > 0) z.sqrTo(r, r2);else {\n        t = r;\n        r = r2;\n        r2 = t;\n      }\n      z.mulTo(r2, g[w], r);\n    }\n    while (j >= 0 && (e[j] & 1 << i) === 0) {\n      z.sqrTo(r, r2);\n      t = r;\n      r = r2;\n      r2 = t;\n      if (--i < 0) {\n        i = this.DB - 1;\n        --j;\n      }\n    }\n  }\n  const result = z.revert(r);\n  callback(null, result);\n  return result;\n}\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.addTo = bnpAddTo;\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.modPow = bnModPow;\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\nexport { BigInteger as default };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @internal\n */\nconst calculateS = async ({\n  a,\n  g,\n  k,\n  x,\n  B,\n  N,\n  U\n}) => {\n  return new Promise((resolve, reject) => {\n    g.modPow(x, N, (outerErr, outerResult) => {\n      if (outerErr) {\n        reject(outerErr);\n        return;\n      }\n      B.subtract(k.multiply(outerResult)).modPow(a.add(U.multiply(x)), N, (innerErr, innerResult) => {\n        if (innerErr) {\n          reject(innerErr);\n          return;\n        }\n        resolve(innerResult.mod(N));\n      });\n    });\n  });\n};\nexport { calculateS };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst INIT_N = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\nconst SHORT_TO_HEX = {};\nconst HEX_TO_SHORT = {};\nfor (let i = 0; i < 256; i++) {\n  let encodedByte = i.toString(16).toLowerCase();\n  if (encodedByte.length === 1) {\n    encodedByte = `0${encodedByte}`;\n  }\n  SHORT_TO_HEX[i] = encodedByte;\n  HEX_TO_SHORT[encodedByte] = i;\n}\nexport { HEX_TO_SHORT, INIT_N, SHORT_TO_HEX };\n", "import { HEX_TO_SHORT } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Converts a hexadecimal encoded string to a Uint8Array of bytes.\n *\n * @param encoded The hexadecimal encoded string\n */\nconst getBytesFromHex = encoded => {\n  if (encoded.length % 2 !== 0) {\n    throw new Error('Hex encoded strings must have an even number length');\n  }\n  const out = new Uint8Array(encoded.length / 2);\n  for (let i = 0; i < encoded.length; i += 2) {\n    const encodedByte = encoded.slice(i, i + 2).toLowerCase();\n    if (encodedByte in HEX_TO_SHORT) {\n      out[i / 2] = HEX_TO_SHORT[encodedByte];\n    } else {\n      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n    }\n  }\n  return out;\n};\nexport { getBytesFromHex };\n", "import { SHORT_TO_HEX } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Converts a Uint8Array of binary data to a hexadecimal encoded string.\n *\n * @param bytes The binary data to encode\n */\nconst getHexFromBytes = bytes => {\n  let out = '';\n  for (let i = 0; i < bytes.byteLength; i++) {\n    out += SHORT_TO_HEX[bytes[i]];\n  }\n  return out;\n};\nexport { getHexFromBytes };\n", "import { Sha256 } from '@aws-crypto/sha256-js';\nimport { getHexFromBytes } from './getHexFromBytes.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Calculate a hash from a `SourceData`\n * @param {SourceData} data Value to hash.\n * @returns {string} Hex-encoded hash.\n * @private\n */\nconst getHashFromData = data => {\n  const sha256 = new Sha256();\n  sha256.update(data);\n  const hashedData = sha256.digestSync();\n  const hashHexFromUint8 = getHexFromBytes(hashedData);\n  return new Array(64 - hashHexFromUint8.length).join('0') + hashHexFromUint8;\n};\nexport { getHashFromData };\n", "import { getBytesFromHex } from './getBytesFromHex.mjs';\nimport { getHashFromData } from './getHashFromData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Calculate a hash from a hex string\n * @param {string} hexStr Value to hash.\n * @returns {string} Hex-encoded hash.\n * @private\n */\nconst getHashFromHex = hexStr => getHashFromData(getBytesFromHex(hexStr));\nexport { getHashFromHex };\n", "import BigInteger from './BigInteger/BigInteger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Tests if a hex string has it most significant bit set (case-insensitive regex)\n */\nconst HEX_MSB_REGEX = /^[89a-f]/i;\n/**\n * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.\n *\n * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a\n * byte array containing the two's-complement representation of a BigInteger. The array contains\n * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.\n *\n * Examples showing how ambiguity is avoided by left padding with:\n * \t\"00\" (for positive values where the most-significant-bit is set)\n *  \"FF\" (for negative values where the most-significant-bit is set)\n *\n * padHex(bigInteger.fromInt(-236))  === \"FF14\"\n * padHex(bigInteger.fromInt(20))    === \"14\"\n *\n * padHex(bigInteger.fromInt(-200))  === \"FF38\"\n * padHex(bigInteger.fromInt(56))    === \"38\"\n *\n * padHex(bigInteger.fromInt(-20))   === \"EC\"\n * padHex(bigInteger.fromInt(236))   === \"00EC\"\n *\n * padHex(bigInteger.fromInt(-56))   === \"C8\"\n * padHex(bigInteger.fromInt(200))   === \"00C8\"\n *\n * @param {AuthBigInteger} bigInt Number to encode.\n * @returns {String} even-length hex string of the two's complement encoding.\n */\nconst getPaddedHex = bigInt => {\n  if (!(bigInt instanceof BigInteger)) {\n    throw new Error('Not a BigInteger');\n  }\n  const isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;\n  /* Get a hex string for abs(bigInt) */\n  let hexStr = bigInt.abs().toString(16);\n  /* Pad hex to even length if needed */\n  hexStr = hexStr.length % 2 !== 0 ? `0${hexStr}` : hexStr;\n  /* Prepend \"00\" if the most significant bit is set */\n  hexStr = HEX_MSB_REGEX.test(hexStr) ? `00${hexStr}` : hexStr;\n  if (isNegative) {\n    /* Flip the bits of the representation */\n    const invertedNibbles = hexStr.split('').map(x => {\n      const invertedNibble = ~parseInt(x, 16) & 0xf;\n      return '0123456789ABCDEF'.charAt(invertedNibble);\n    }).join('');\n    /* After flipping the bits, add one to get the 2's complement representation */\n    const flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);\n    hexStr = flippedBitsBI.toString(16);\n    /*\n    For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128\n     Any sequence of '1' bits on the left can always be substituted with a single '1' bit\n    without changing the represented value.\n     This only happens in the case when the input is 80...00\n    */\n    if (hexStr.toUpperCase().startsWith('FF8')) {\n      hexStr = hexStr.substring(2);\n    }\n  }\n  return hexStr;\n};\nexport { getPaddedHex };\n", "import BigInteger from '../BigInteger/BigInteger.mjs';\nimport { getHashFromHex } from '../getHashFromHex.mjs';\nimport { getPaddedHex } from '../getPaddedHex.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @internal\n */\nconst calculateU = ({\n  A,\n  B\n}) => {\n  const U = new BigInteger(getHashFromHex(getPaddedHex(A) + getPaddedHex(B)), 16);\n  if (U.equals(BigInteger.ZERO)) {\n    throw new Error('U cannot be zero.');\n  }\n  return U;\n};\nexport { calculateU };\n", "import { Sha256 } from '@aws-crypto/sha256-js';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Standard HKDF algorithm.\n *\n * @param {Uint8Array} ikm Input key material.\n * @param {Uint8Array} salt Salt value.\n * @param {Uint8Array} info Context and application specific info.\n *\n * @returns {Uint8Array} Strong key material.\n *\n * @internal\n */\nconst getHkdfKey = (ikm, salt, info) => {\n  const awsCryptoHash = new Sha256(salt);\n  awsCryptoHash.update(ikm);\n  const resultFromAWSCryptoPrk = awsCryptoHash.digestSync();\n  const awsCryptoHashHmac = new Sha256(resultFromAWSCryptoPrk);\n  awsCryptoHashHmac.update(info);\n  const resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();\n  const hashHexFromAWSCrypto = resultFromAWSCryptoHmac;\n  return hashHexFromAWSCrypto.slice(0, 16);\n};\nexport { getHkdfKey };\n", "import { WordArray } from '@aws-amplify/core/internals/utils';\nimport { getBytesFromHex } from './getBytesFromHex.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns a Uint8Array with a sequence of random nBytes\n *\n * @param {number} nBytes\n * @returns {Uint8Array} fixed-length sequence of random bytes\n */\nconst getRandomBytes = nBytes => {\n  const str = new WordArray().random(nBytes).toString();\n  return getBytesFromHex(str);\n};\nexport { getRandomBytes };\n", "import { base64Encoder } from '@aws-amplify/core/internals/utils';\nimport { getRandomBytes } from './getRandomBytes.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Helper function to generate a random string\n * @returns {string} a random value.\n *\n * @internal\n */\nconst getRandomString = () => base64Encoder.convert(getRandomBytes(40));\nexport { getRandomString };\n", "import { AuthError } from '../../../../../errors/AuthError.mjs';\nimport { textEncoder } from '../../textEncoder/index.mjs';\nimport BigInteger from '../BigInteger/BigInteger.mjs';\nimport { calculateS } from '../calculate/calculateS.mjs';\nimport { calculateU } from '../calculate/calculateU.mjs';\nimport { getBytesFromHex } from '../getBytesFromHex.mjs';\nimport { getHashFromData } from '../getHashFromData.mjs';\nimport { getHashFromHex } from '../getHashFromHex.mjs';\nimport { getHexFromBytes } from '../getHexFromBytes.mjs';\nimport { getHkdfKey } from '../getHkdfKey.mjs';\nimport { getPaddedHex } from '../getPaddedHex.mjs';\nimport { getRandomBytes } from '../getRandomBytes.mjs';\nimport { getRandomString } from '../getRandomString.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/** @class */\nclass AuthenticationHelper {\n  constructor({\n    userPoolName,\n    a,\n    g,\n    A,\n    N\n  }) {\n    this.encoder = textEncoder;\n    this.userPoolName = userPoolName;\n    this.a = a;\n    this.g = g;\n    this.A = A;\n    this.N = N;\n    this.k = new BigInteger(getHashFromHex(`${getPaddedHex(N)}${getPaddedHex(g)}`), 16);\n  }\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */\n  getRandomPassword() {\n    if (!this.randomPassword) {\n      throw new AuthError({\n        name: 'EmptyBigIntegerRandomPassword',\n        message: 'random password is empty'\n      });\n    }\n    return this.randomPassword;\n  }\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */\n  getSaltToHashDevices() {\n    if (!this.saltToHashDevices) {\n      throw new AuthError({\n        name: 'EmptyBigIntegersaltToHashDevices',\n        message: 'saltToHashDevices is empty'\n      });\n    }\n    return this.saltToHashDevices;\n  }\n  /**\n   * @returns {string} Value used to verify devices.\n   */\n  getVerifierDevices() {\n    if (!this.verifierDevices) {\n      throw new AuthError({\n        name: 'EmptyBigIntegerVerifierDevices',\n        message: 'verifyDevices is empty'\n      });\n    }\n    return this.verifierDevices;\n  }\n  /**\n   * Generate salts and compute verifier.\n   *\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   *\n   * @returns {Promise<void>}\n   */\n  async generateHashDevice(deviceGroupKey, username) {\n    this.randomPassword = getRandomString();\n    const combinedString = `${deviceGroupKey}${username}:${this.randomPassword}`;\n    const hashedString = getHashFromData(combinedString);\n    const hexRandom = getHexFromBytes(getRandomBytes(16));\n    // The random hex will be unambiguously represented as a postive integer\n    this.saltToHashDevices = getPaddedHex(new BigInteger(hexRandom, 16));\n    return new Promise((resolve, reject) => {\n      this.g.modPow(new BigInteger(getHashFromHex(this.saltToHashDevices + hashedString), 16), this.N, (err, result) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        this.verifierDevices = getPaddedHex(result);\n        resolve();\n      });\n    });\n  }\n  /**\n   * Calculates the final HKDF key based on computed S value, computed U value and the key\n   *\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {AuthBigInteger} B Server B value.\n   * @param {AuthBigInteger} salt Generated salt.\n   */\n  async getPasswordAuthenticationKey({\n    username,\n    password,\n    serverBValue,\n    salt\n  }) {\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n      throw new Error('B cannot be zero.');\n    }\n    const U = calculateU({\n      A: this.A,\n      B: serverBValue\n    });\n    const usernamePassword = `${this.userPoolName}${username}:${password}`;\n    const usernamePasswordHash = getHashFromData(usernamePassword);\n    const x = new BigInteger(getHashFromHex(getPaddedHex(salt) + usernamePasswordHash), 16);\n    const S = await calculateS({\n      a: this.a,\n      g: this.g,\n      k: this.k,\n      x,\n      B: serverBValue,\n      N: this.N,\n      U\n    });\n    const context = this.encoder.convert('Caldera Derived Key');\n    const spacer = this.encoder.convert(String.fromCharCode(1));\n    const info = new Uint8Array(context.byteLength + spacer.byteLength);\n    info.set(context, 0);\n    info.set(spacer, context.byteLength);\n    const hkdfKey = getHkdfKey(getBytesFromHex(getPaddedHex(S)), getBytesFromHex(getPaddedHex(U)), info);\n    return hkdfKey;\n  }\n}\nexport { AuthenticationHelper as default };\n", "import BigInteger from '../BigInteger/BigInteger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @internal\n */\nconst calculateA = async ({\n  a,\n  g,\n  N\n}) => {\n  return new Promise((resolve, reject) => {\n    g.modPow(a, N, (err, A) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      if (A.mod(N).equals(BigInteger.ZERO)) {\n        reject(new Error('Illegal parameter. A mod N cannot be 0.'));\n        return;\n      }\n      resolve(A);\n    });\n  });\n};\nexport { calculateA };\n", "import AuthenticationHelper from './AuthenticationHelper/AuthenticationHelper.mjs';\nimport BigInteger from './BigInteger/BigInteger.mjs';\nimport { calculateA } from './calculate/calculateA.mjs';\nimport { INIT_N } from './constants.mjs';\nimport '@aws-crypto/sha256-js';\nimport { getHexFromBytes } from './getHexFromBytes.mjs';\nimport { getRandomBytes } from './getRandomBytes.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns a new {@link AuthenticationHelper} instance with randomly generated BigInteger seed\n *\n * @param userPoolName Cognito user pool name.\n * @returns An {@link AuthenticationHelper} instance.\n *\n * @internal\n */\nconst getAuthenticationHelper = async userPoolName => {\n  const N = new BigInteger(INIT_N, 16);\n  const g = new BigInteger('2', 16);\n  const a = generateRandomBigInteger();\n  const A = await calculateA({\n    a,\n    g,\n    N\n  });\n  return new AuthenticationHelper({\n    userPoolName,\n    a,\n    g,\n    A,\n    N\n  });\n};\n/**\n * Generates a random BigInteger.\n *\n * @returns {BigInteger} a random value.\n */\nconst generateRandomBigInteger = () => {\n  // This will be interpreted as a postive 128-bit integer\n  const hexRandom = getHexFromBytes(getRandomBytes(128));\n  // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)\n  return new BigInteger(hexRandom, 16);\n};\nexport { getAuthenticationHelper };\n", "import { base64Encoder, getDeviceName } from '@aws-amplify/core/internals/utils';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createConfirmDeviceClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmDeviceClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthenticationHelper } from './srp/getAuthenticationHelper.mjs';\nimport { getBytesFromHex } from './srp/getBytesFromHex.mjs';\nimport '@aws-crypto/sha256-js';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * This function is used to kick off the device management flow.\n *\n * If an error is thrown while generating a hash device or calling the `ConfirmDevice`\n * client, then this API will ignore the error and return undefined. Otherwise the authentication\n * flow will not complete and the user won't be able to be signed in.\n *\n * @returns DeviceMetadata | undefined\n */\nasync function getNewDeviceMetadata({\n  userPoolId,\n  userPoolEndpoint,\n  newDeviceMetadata,\n  accessToken\n}) {\n  if (!newDeviceMetadata) return undefined;\n  const userPoolName = userPoolId.split('_')[1] || '';\n  const authenticationHelper = await getAuthenticationHelper(userPoolName);\n  const deviceKey = newDeviceMetadata?.DeviceKey;\n  const deviceGroupKey = newDeviceMetadata?.DeviceGroupKey;\n  try {\n    await authenticationHelper.generateHashDevice(deviceGroupKey ?? '', deviceKey ?? '');\n  } catch (errGenHash) {\n    // TODO: log error here\n    return undefined;\n  }\n  const deviceSecretVerifierConfig = {\n    Salt: base64Encoder.convert(getBytesFromHex(authenticationHelper.getSaltToHashDevices())),\n    PasswordVerifier: base64Encoder.convert(getBytesFromHex(authenticationHelper.getVerifierDevices()))\n  };\n  const randomPassword = authenticationHelper.getRandomPassword();\n  try {\n    const confirmDevice = createConfirmDeviceClient({\n      endpointResolver: createCognitoUserPoolEndpointResolver({\n        endpointOverride: userPoolEndpoint\n      })\n    });\n    await confirmDevice({\n      region: getRegionFromUserPoolId(userPoolId)\n    }, {\n      AccessToken: accessToken,\n      DeviceName: await getDeviceName(),\n      DeviceKey: newDeviceMetadata?.DeviceKey,\n      DeviceSecretVerifierConfig: deviceSecretVerifierConfig\n    });\n    return {\n      deviceKey,\n      deviceGroupKey,\n      randomPassword\n    };\n  } catch (error) {\n    // TODO: log error here\n    return undefined;\n  }\n}\nexport { getNewDeviceMetadata };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { cacheCognitoTokens } from '../../../providers/cognito/tokenProvider/cacheTokens.mjs';\nimport { dispatchSignedInHubEvent } from '../../../providers/cognito/utils/dispatchSignedInHubEvent.mjs';\nimport '../../utils/store/autoSignInStore.mjs';\nimport { signInStore, setActiveSignInState } from '../../utils/store/signInStore.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { assertPasskeyError, PasskeyErrorCode } from '../../utils/passkey/errors.mjs';\nimport { getPasskey } from '../../utils/passkey/getPasskey.mjs';\nimport { getNewDeviceMetadata } from '../../../providers/cognito/utils/getNewDeviceMetadata.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function handleWebAuthnSignInResult(challengeParameters) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    username,\n    signInSession,\n    signInDetails,\n    challengeName\n  } = signInStore.getState();\n  if (challengeName !== 'WEB_AUTHN' || !username) {\n    throw new AuthError({\n      name: AuthErrorCodes.SignInException,\n      message: 'Unable to proceed due to invalid sign in state.'\n    });\n  }\n  const {\n    CREDENTIAL_REQUEST_OPTIONS: credentialRequestOptions\n  } = challengeParameters;\n  assertPasskeyError(!!credentialRequestOptions, PasskeyErrorCode.InvalidPasskeyAuthenticationOptions);\n  const cred = await getPasskey(JSON.parse(credentialRequestOptions));\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: authConfig.userPoolEndpoint\n    })\n  });\n  const {\n    ChallengeName: nextChallengeName,\n    ChallengeParameters: nextChallengeParameters,\n    AuthenticationResult: authenticationResult,\n    Session: nextSession\n  } = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, {\n    ChallengeName: 'WEB_AUTHN',\n    ChallengeResponses: {\n      USERNAME: username,\n      CREDENTIAL: JSON.stringify(cred)\n    },\n    ClientId: authConfig.userPoolClientId,\n    Session: signInSession\n  });\n  setActiveSignInState({\n    signInSession: nextSession,\n    username,\n    challengeName: nextChallengeName,\n    signInDetails\n  });\n  if (authenticationResult) {\n    await cacheCognitoTokens({\n      ...authenticationResult,\n      username,\n      NewDeviceMetadata: await getNewDeviceMetadata({\n        userPoolId: authConfig.userPoolId,\n        userPoolEndpoint: authConfig.userPoolEndpoint,\n        newDeviceMetadata: authenticationResult.NewDeviceMetadata,\n        accessToken: authenticationResult.AccessToken\n      }),\n      signInDetails\n    });\n    signInStore.dispatch({\n      type: 'RESET_STATE'\n    });\n    await dispatchSignedInHubEvent();\n    return {\n      isSignedIn: true,\n      nextStep: {\n        signInStep: 'DONE'\n      }\n    };\n  }\n  if (nextChallengeName === 'WEB_AUTHN') {\n    throw new AuthError({\n      name: AuthErrorCodes.SignInException,\n      message: 'Sequential WEB_AUTHN challenges returned from underlying service cannot be handled.'\n    });\n  }\n  return {\n    challengeName: nextChallengeName,\n    challengeParameters: nextChallengeParameters\n  };\n}\nexport { handleWebAuthnSignInResult };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst MONTH_NAMES = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst WEEK_NAMES = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst getNowString = () => {\n  const now = new Date();\n  const weekDay = WEEK_NAMES[now.getUTCDay()];\n  const month = MONTH_NAMES[now.getUTCMonth()];\n  const day = now.getUTCDate();\n  let hours = now.getUTCHours();\n  if (hours < 10) {\n    hours = `0${hours}`;\n  }\n  let minutes = now.getUTCMinutes();\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n  let seconds = now.getUTCSeconds();\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n  const year = now.getUTCFullYear();\n  // ddd MMM D HH:mm:ss UTC YYYY\n  const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;\n  return dateNow;\n};\nexport { getNowString };\n", "import { Sha256 } from '@aws-crypto/sha256-js';\nimport { base64Encoder, base64Decoder } from '@aws-amplify/core/internals/utils';\nimport { textEncoder } from '../textEncoder/index.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getSignatureString = ({\n  userPoolName,\n  username,\n  challengeParameters,\n  dateNow,\n  hkdf\n}) => {\n  const bufUPIDaToB = textEncoder.convert(userPoolName);\n  const bufUNaToB = textEncoder.convert(username);\n  const bufSBaToB = urlB64ToUint8Array(challengeParameters.SECRET_BLOCK);\n  const bufDNaToB = textEncoder.convert(dateNow);\n  const bufConcat = new Uint8Array(bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength + bufDNaToB.byteLength);\n  bufConcat.set(bufUPIDaToB, 0);\n  bufConcat.set(bufUNaToB, bufUPIDaToB.byteLength);\n  bufConcat.set(bufSBaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength);\n  bufConcat.set(bufDNaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength);\n  const awsCryptoHash = new Sha256(hkdf);\n  awsCryptoHash.update(bufConcat);\n  const resultFromAWSCrypto = awsCryptoHash.digestSync();\n  const signatureString = base64Encoder.convert(resultFromAWSCrypto);\n  return signatureString;\n};\nconst urlB64ToUint8Array = base64String => {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = base64Decoder.convert(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\nexport { getSignatureString };\n", "import '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertDeviceMetadata } from './types.mjs';\nimport { getAuthenticationHelper } from './srp/getAuthenticationHelper.mjs';\nimport './srp/constants.mjs';\nimport { getNowString } from './srp/getNowString.mjs';\nimport { getSignatureString } from './srp/getSignatureString.mjs';\nimport BigInteger from './srp/BigInteger/BigInteger.mjs';\nimport { getUserContextData } from './userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function handleDeviceSRPAuth({\n  username,\n  config,\n  clientMetadata,\n  session,\n  tokenOrchestrator\n}) {\n  const {\n    userPoolId,\n    userPoolEndpoint\n  } = config;\n  const clientId = config.userPoolClientId;\n  const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n  assertDeviceMetadata(deviceMetadata);\n  const authenticationHelper = await getAuthenticationHelper(deviceMetadata.deviceGroupKey);\n  const challengeResponses = {\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16),\n    DEVICE_KEY: deviceMetadata.deviceKey\n  };\n  const jsonReqResponseChallenge = {\n    ChallengeName: 'DEVICE_SRP_AUTH',\n    ClientId: clientId,\n    ChallengeResponses: challengeResponses,\n    ClientMetadata: clientMetadata,\n    Session: session\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    ChallengeParameters: respondedChallengeParameters,\n    Session\n  } = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId)\n  }, jsonReqResponseChallenge);\n  return handleDevicePasswordVerifier(username, respondedChallengeParameters, clientMetadata, Session, authenticationHelper, config, tokenOrchestrator);\n}\nasync function handleDevicePasswordVerifier(username, challengeParameters, clientMetadata, session, authenticationHelper, {\n  userPoolId,\n  userPoolClientId,\n  userPoolEndpoint\n}, tokenOrchestrator) {\n  const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n  assertDeviceMetadata(deviceMetadata);\n  const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);\n  const salt = new BigInteger(challengeParameters?.SALT, 16);\n  const {\n    deviceKey\n  } = deviceMetadata;\n  const {\n    deviceGroupKey\n  } = deviceMetadata;\n  const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n    username: deviceMetadata.deviceKey,\n    password: deviceMetadata.randomPassword,\n    serverBValue,\n    salt\n  });\n  const dateNow = getNowString();\n  const challengeResponses = {\n    USERNAME: challengeParameters?.USERNAME ?? username,\n    PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,\n    TIMESTAMP: dateNow,\n    PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n      username: deviceKey,\n      userPoolName: deviceGroupKey,\n      challengeParameters,\n      dateNow,\n      hkdf\n    }),\n    DEVICE_KEY: deviceKey\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReqResponseChallenge = {\n    ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n    ClientId: userPoolClientId,\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    UserContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  return respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId)\n  }, jsonReqResponseChallenge);\n}\nexport { handleDeviceSRPAuth };\n", "import { AuthError } from '../../../errors/AuthError.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport BigInteger from './srp/BigInteger/BigInteger.mjs';\nimport './srp/constants.mjs';\nimport '@aws-crypto/sha256-js';\nimport { getNowString } from './srp/getNowString.mjs';\nimport { getSignatureString } from './srp/getSignatureString.mjs';\nimport { getUserContextData } from './userContextData.mjs';\nimport { handleDeviceSRPAuth } from './handleDeviceSRPAuth.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function handlePasswordVerifierChallenge(password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const userPoolName = userPoolId?.split('_')[1] || '';\n  const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);\n  const salt = new BigInteger(challengeParameters?.SALT, 16);\n  const username = challengeParameters?.USER_ID_FOR_SRP;\n  if (!username) throw new AuthError({\n    name: 'EmptyUserIdForSRPException',\n    message: 'USER_ID_FOR_SRP was not found in challengeParameters'\n  });\n  const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n    username,\n    password,\n    serverBValue,\n    salt\n  });\n  const dateNow = getNowString();\n  const challengeResponses = {\n    USERNAME: username,\n    PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,\n    TIMESTAMP: dateNow,\n    PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n      username,\n      userPoolName,\n      challengeParameters,\n      dateNow,\n      hkdf\n    })\n  };\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReqResponseChallenge = {\n    ChallengeName: 'PASSWORD_VERIFIER',\n    ChallengeResponses: challengeResponses,\n    ClientMetadata: clientMetadata,\n    Session: session,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId)\n  }, jsonReqResponseChallenge);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') return handleDeviceSRPAuth({\n    username,\n    config,\n    clientMetadata,\n    session: response.Session,\n    tokenOrchestrator\n  });\n  return response;\n}\nexport { handlePasswordVerifierChallenge };\n", "import { AuthError } from '../../../errors/AuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * It will retry the function if the error is a `ResourceNotFoundException` and\n * will clean the device keys stored in the storage mechanism.\n *\n */\nasync function retryOnResourceNotFoundException(func, args, username, tokenOrchestrator) {\n  try {\n    return await func(...args);\n  } catch (error) {\n    if (error instanceof AuthError && error.name === 'ResourceNotFoundException' && error.message.includes('Device does not exist.')) {\n      await tokenOrchestrator.clearDeviceMetadata(username);\n      return func(...args);\n    }\n    throw error;\n  }\n}\nexport { retryOnResourceNotFoundException };\n", "import '../../../client/utils/store/autoSignInStore.mjs';\nimport { signInStore } from '../../../client/utils/store/signInStore.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction setActiveSignInUsername(username) {\n  const {\n    dispatch\n  } = signInStore;\n  dispatch({\n    type: 'SET_USERNAME',\n    value: username\n  });\n}\nexport { setActiveSignInUsername };\n", "import { AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData.mjs';\nimport { getAuthenticationHelper } from '../../../providers/cognito/utils/srp/getAuthenticationHelper.mjs';\nimport '../../../providers/cognito/utils/srp/constants.mjs';\nimport '@aws-crypto/sha256-js';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { handlePasswordVerifierChallenge } from '../../../providers/cognito/utils/handlePasswordVerifierChallenge.mjs';\nimport { retryOnResourceNotFoundException } from '../../../providers/cognito/utils/retryOnResourceNotFoundException.mjs';\nimport { setActiveSignInUsername } from '../../../providers/cognito/utils/setActiveSignInUsername.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Handles the Password SRP (Secure Remote Password) authentication flow.\n * This function can be used with both USER_SRP_AUTH and USER_AUTH flows.\n *\n * @param {Object} params - The parameters for the Password SRP authentication\n * @param {string} params.username - The username for authentication\n * @param {string} params.password - The user's password\n * @param {ClientMetadata} [params.clientMetadata] - Optional metadata to be sent with auth requests\n * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration\n * @param {AuthTokenOrchestrator} params.tokenOrchestrator - Token orchestrator for managing auth tokens\n * @param {AuthFlowType} params.authFlow - The type of authentication flow ('USER_SRP_AUTH' or 'USER_AUTH')\n * @param {AuthFactorType} [params.preferredChallenge] - Optional preferred challenge type when using USER_AUTH flow\n *\n * @returns {Promise<RespondToAuthChallengeCommandOutput>} The authentication response\n */\nasync function handlePasswordSRP({\n  username,\n  password,\n  clientMetadata,\n  config,\n  tokenOrchestrator,\n  authFlow,\n  preferredChallenge\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const userPoolName = userPoolId?.split('_')[1] || '';\n  const authenticationHelper = await getAuthenticationHelper(userPoolName);\n  const authParameters = {\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16)\n  };\n  if (authFlow === 'USER_AUTH' && preferredChallenge) {\n    authParameters.PREFERRED_CHALLENGE = preferredChallenge;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: authFlow,\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const resp = await initiateAuth({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const {\n    ChallengeParameters: challengeParameters,\n    Session: session\n  } = resp;\n  const activeUsername = challengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  if (resp.ChallengeName === 'PASSWORD_VERIFIER') {\n    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator], activeUsername, tokenOrchestrator);\n  }\n  return resp;\n}\nexport { handlePasswordSRP };\n", "import { AuthAction } from '@aws-amplify/core/internals/utils';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Handles the SELECT_CHALLENGE response for authentication.\n * Initiates the selected authentication challenge based on user choice.\n *\n * @param {Object} params - The parameters for handling the selected challenge\n * @param {string} params.username - The username for authentication\n * @param {string} params.session - The current authentication session token\n * @param {string} params.selectedChallenge - The challenge type selected by the user\n * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration\n * @param {ClientMetadata} [params.clientMetadata] - Optional metadata to be sent with auth requests\n *\n * @returns {Promise<RespondToAuthChallengeCommandOutput>} The challenge response\n */\nasync function initiateSelectedChallenge({\n  username,\n  session,\n  selectedChallenge,\n  config,\n  clientMetadata\n}) {\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: config.userPoolEndpoint\n    })\n  });\n  return respondToAuthChallenge({\n    region: getRegionFromUserPoolId(config.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, {\n    ChallengeName: 'SELECT_CHALLENGE',\n    ChallengeResponses: {\n      USERNAME: username,\n      ANSWER: selectedChallenge\n    },\n    ClientId: config.userPoolClientId,\n    Session: session,\n    ClientMetadata: clientMetadata\n  });\n}\nexport { initiateSelectedChallenge };\n", "import { AuthAction } from '@aws-amplify/core/internals/utils';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData.mjs';\nimport { setActiveSignInUsername } from '../../../providers/cognito/utils/setActiveSignInUsername.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Handles the SELECT_CHALLENGE response specifically for Password authentication.\n * This function combines the SELECT_CHALLENGE flow with standard password authentication.\n *\n * @param {string} username - The username for authentication\n * @param {string} password - The user's password\n * @param {ClientMetadata} [clientMetadata] - Optional metadata to be sent with auth requests\n * @param {CognitoUserPoolConfig} config - Cognito User Pool configuration\n * @param {string} session - The current authentication session token\n *\n * @returns {Promise<RespondToAuthChallengeCommandOutput>} The challenge response\n */\nasync function handleSelectChallengeWithPassword(username, password, clientMetadata, config, session) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const authParameters = {\n    ANSWER: 'PASSWORD',\n    USERNAME: username,\n    PASSWORD: password\n  };\n  const userContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, {\n    ChallengeName: 'SELECT_CHALLENGE',\n    ChallengeResponses: authParameters,\n    ClientId: userPoolClientId,\n    ClientMetadata: clientMetadata,\n    Session: session,\n    UserContextData: userContextData\n  });\n  const activeUsername = response.ChallengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  return response;\n}\nexport { handleSelectChallengeWithPassword };\n", "import { AuthAction } from '@aws-amplify/core/internals/utils';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getAuthenticationHelper } from '../../../providers/cognito/utils/srp/getAuthenticationHelper.mjs';\nimport '../../../providers/cognito/utils/srp/constants.mjs';\nimport '@aws-crypto/sha256-js';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData.mjs';\nimport { setActiveSignInUsername } from '../../../providers/cognito/utils/setActiveSignInUsername.mjs';\nimport { retryOnResourceNotFoundException } from '../../../providers/cognito/utils/retryOnResourceNotFoundException.mjs';\nimport { handlePasswordVerifierChallenge } from '../../../providers/cognito/utils/handlePasswordVerifierChallenge.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Handles the SELECT_CHALLENGE response specifically for Password SRP authentication.\n * This function combines the SELECT_CHALLENGE flow with Password SRP protocol.\n *\n * @param {string} username - The username for authentication\n * @param {string} password - The user's password\n * @param {ClientMetadata} [clientMetadata] - Optional metadata to be sent with auth requests\n * @param {CognitoUserPoolConfig} config - Cognito User Pool configuration\n * @param {string} session - The current authentication session token\n * @param {AuthTokenOrchestrator} tokenOrchestrator - Token orchestrator for managing auth tokens\n *\n * @returns {Promise<RespondToAuthChallengeCommandOutput>} The challenge response\n */\nasync function handleSelectChallengeWithPasswordSRP(username, password, clientMetadata, config, session, tokenOrchestrator) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const userPoolName = userPoolId.split('_')[1] || '';\n  const authenticationHelper = await getAuthenticationHelper(userPoolName);\n  const authParameters = {\n    ANSWER: 'PASSWORD_SRP',\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16)\n  };\n  const userContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, {\n    ChallengeName: 'SELECT_CHALLENGE',\n    ChallengeResponses: authParameters,\n    ClientId: userPoolClientId,\n    ClientMetadata: clientMetadata,\n    Session: session,\n    UserContextData: userContextData\n  });\n  const activeUsername = response.ChallengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  if (response.ChallengeName === 'PASSWORD_VERIFIER') {\n    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [password, response.ChallengeParameters, clientMetadata, response.Session, authenticationHelper, config, tokenOrchestrator], activeUsername, tokenOrchestrator);\n  }\n  return response;\n}\nexport { handleSelectChallengeWithPasswordSRP };\n", "import { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { InitiateAuthException } from '../types/errors.mjs';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { USER_ALREADY_AUTHENTICATED_EXCEPTION } from '../../../errors/constants.mjs';\nimport { getCurrentUser } from '../apis/getCurrentUser.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createVerifySoftwareTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createVerifySoftwareTokenClient.mjs';\nimport { createAssociateSoftwareTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { handleWebAuthnSignInResult } from '../../../client/flows/userAuth/handleWebAuthnSignInResult.mjs';\nimport { handlePasswordSRP } from '../../../client/flows/shared/handlePasswordSRP.mjs';\nimport { initiateSelectedChallenge } from '../../../client/flows/userAuth/handleSelectChallenge.mjs';\nimport { handleSelectChallengeWithPassword } from '../../../client/flows/userAuth/handleSelectChallengeWithPassword.mjs';\nimport { handleSelectChallengeWithPasswordSRP } from '../../../client/flows/userAuth/handleSelectChallengeWithPasswordSRP.mjs';\nimport '../../../client/utils/store/autoSignInStore.mjs';\nimport { signInStore } from '../../../client/utils/store/signInStore.mjs';\nimport { getAuthenticationHelper } from './srp/getAuthenticationHelper.mjs';\nimport './srp/constants.mjs';\nimport '@aws-crypto/sha256-js';\nimport { getUserContextData } from './userContextData.mjs';\nimport { handlePasswordVerifierChallenge } from './handlePasswordVerifierChallenge.mjs';\nimport { handleDeviceSRPAuth } from './handleDeviceSRPAuth.mjs';\nimport { retryOnResourceNotFoundException } from './retryOnResourceNotFoundException.mjs';\nimport { setActiveSignInUsername } from './setActiveSignInUsername.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst USER_ATTRIBUTES = 'userAttributes.';\nfunction isWebAuthnResultAuthSignInOutput(result) {\n  return 'isSignedIn' in result && 'nextStep' in result;\n}\nasync function handleCustomChallenge({\n  challengeResponse,\n  clientMetadata,\n  session,\n  username,\n  config,\n  tokenOrchestrator\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const challengeResponses = {\n    USERNAME: username,\n    ANSWER: challengeResponse\n  };\n  const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: 'CUSTOM_CHALLENGE',\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') {\n    return handleDeviceSRPAuth({\n      username,\n      config,\n      clientMetadata,\n      session: response.Session,\n      tokenOrchestrator\n    });\n  }\n  return response;\n}\nasync function handleMFASetupChallenge({\n  challengeResponse,\n  username,\n  clientMetadata,\n  session,\n  deviceName,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  if (challengeResponse === 'EMAIL') {\n    return {\n      ChallengeName: 'MFA_SETUP',\n      Session: session,\n      ChallengeParameters: {\n        MFAS_CAN_SETUP: '[\"EMAIL_OTP\"]'\n      },\n      $metadata: {}\n    };\n  }\n  if (challengeResponse === 'TOTP') {\n    return {\n      ChallengeName: 'MFA_SETUP',\n      Session: session,\n      ChallengeParameters: {\n        MFAS_CAN_SETUP: '[\"SOFTWARE_TOKEN_MFA\"]'\n      },\n      $metadata: {}\n    };\n  }\n  const challengeResponses = {\n    USERNAME: username\n  };\n  const isTOTPCode = /^\\d+$/.test(challengeResponse);\n  if (isTOTPCode) {\n    const verifySoftwareToken = createVerifySoftwareTokenClient({\n      endpointResolver: createCognitoUserPoolEndpointResolver({\n        endpointOverride: userPoolEndpoint\n      })\n    });\n    const {\n      Session\n    } = await verifySoftwareToken({\n      region: getRegionFromUserPoolId(userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n    }, {\n      UserCode: challengeResponse,\n      Session: session,\n      FriendlyDeviceName: deviceName\n    });\n    signInStore.dispatch({\n      type: 'SET_SIGN_IN_SESSION',\n      value: Session\n    });\n    const jsonReq = {\n      ChallengeName: 'MFA_SETUP',\n      ChallengeResponses: challengeResponses,\n      Session,\n      ClientMetadata: clientMetadata,\n      ClientId: userPoolClientId\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n      endpointResolver: createCognitoUserPoolEndpointResolver({\n        endpointOverride: userPoolEndpoint\n      })\n    });\n    return respondToAuthChallenge({\n      region: getRegionFromUserPoolId(userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n    }, jsonReq);\n  }\n  const isEmail = challengeResponse.includes('@');\n  if (isEmail) {\n    challengeResponses.EMAIL = challengeResponse;\n    const jsonReq = {\n      ChallengeName: 'MFA_SETUP',\n      ChallengeResponses: challengeResponses,\n      Session: session,\n      ClientMetadata: clientMetadata,\n      ClientId: userPoolClientId\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n      endpointResolver: createCognitoUserPoolEndpointResolver({\n        endpointOverride: userPoolEndpoint\n      })\n    });\n    return respondToAuthChallenge({\n      region: getRegionFromUserPoolId(userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n    }, jsonReq);\n  }\n  throw new AuthError({\n    name: AuthErrorCodes.SignInException,\n    message: `Cannot proceed with MFA setup using challengeResponse: ${challengeResponse}`,\n    recoverySuggestion: 'Try passing \"EMAIL\", \"TOTP\", a valid email, or OTP code as the challengeResponse.'\n  });\n}\nasync function handleSelectMFATypeChallenge({\n  challengeResponse,\n  username,\n  clientMetadata,\n  session,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  assertValidationError(challengeResponse === 'TOTP' || challengeResponse === 'SMS' || challengeResponse === 'EMAIL', AuthValidationErrorCode.IncorrectMFAMethod);\n  const challengeResponses = {\n    USERNAME: username,\n    ANSWER: mapMfaType(challengeResponse)\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: 'SELECT_MFA_TYPE',\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  return respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n}\nasync function handleCompleteNewPasswordChallenge({\n  challengeResponse,\n  clientMetadata,\n  session,\n  username,\n  requiredAttributes,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const challengeResponses = {\n    ...createAttributes(requiredAttributes),\n    NEW_PASSWORD: challengeResponse,\n    USERNAME: username\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: 'NEW_PASSWORD_REQUIRED',\n    ChallengeResponses: challengeResponses,\n    ClientMetadata: clientMetadata,\n    Session: session,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  return respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n}\nasync function handleUserPasswordAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n  const {\n    userPoolClientId,\n    userPoolId,\n    userPoolEndpoint\n  } = config;\n  const authParameters = {\n    USERNAME: username,\n    PASSWORD: password\n  };\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    authParameters.DEVICE_KEY = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: 'USER_PASSWORD_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await initiateAuth({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const activeUsername = response.ChallengeParameters?.USERNAME ?? response.ChallengeParameters?.USER_ID_FOR_SRP ?? username;\n  setActiveSignInUsername(activeUsername);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') return handleDeviceSRPAuth({\n    username: activeUsername,\n    config,\n    clientMetadata,\n    session: response.Session,\n    tokenOrchestrator\n  });\n  return response;\n}\nasync function handleUserSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n  return handlePasswordSRP({\n    username,\n    password,\n    clientMetadata,\n    config,\n    tokenOrchestrator,\n    authFlow: 'USER_SRP_AUTH'\n  });\n}\nasync function handleCustomAuthFlowWithoutSRP(username, clientMetadata, config, tokenOrchestrator) {\n  const {\n    userPoolClientId,\n    userPoolId,\n    userPoolEndpoint\n  } = config;\n  const authParameters = {\n    USERNAME: username\n  };\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    authParameters.DEVICE_KEY = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: 'CUSTOM_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await initiateAuth({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const activeUsername = response.ChallengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') return handleDeviceSRPAuth({\n    username: activeUsername,\n    config,\n    clientMetadata,\n    session: response.Session,\n    tokenOrchestrator\n  });\n  return response;\n}\nasync function handleCustomSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n  assertTokenProviderConfig(config);\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const userPoolName = userPoolId?.split('_')[1] || '';\n  const authenticationHelper = await getAuthenticationHelper(userPoolName);\n  const authParameters = {\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16),\n    CHALLENGE_NAME: 'SRP_A'\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: 'CUSTOM_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    ChallengeParameters: challengeParameters,\n    Session: session\n  } = await initiateAuth({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const activeUsername = challengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator], activeUsername, tokenOrchestrator);\n}\nasync function getSignInResult(params) {\n  const {\n    challengeName,\n    challengeParameters,\n    availableChallenges\n  } = params;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  switch (challengeName) {\n    case 'CUSTOM_CHALLENGE':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE',\n          additionalInfo: challengeParameters\n        }\n      };\n    case 'MFA_SETUP':\n      {\n        const {\n          signInSession,\n          username\n        } = signInStore.getState();\n        const mfaSetupTypes = getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_SETUP)) || [];\n        const allowedMfaSetupTypes = getAllowedMfaSetupTypes(mfaSetupTypes);\n        const isTotpMfaSetupAvailable = allowedMfaSetupTypes.includes('TOTP');\n        const isEmailMfaSetupAvailable = allowedMfaSetupTypes.includes('EMAIL');\n        if (isTotpMfaSetupAvailable && isEmailMfaSetupAvailable) {\n          return {\n            isSignedIn: false,\n            nextStep: {\n              signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION',\n              allowedMFATypes: allowedMfaSetupTypes\n            }\n          };\n        }\n        if (isEmailMfaSetupAvailable) {\n          return {\n            isSignedIn: false,\n            nextStep: {\n              signInStep: 'CONTINUE_SIGN_IN_WITH_EMAIL_SETUP'\n            }\n          };\n        }\n        if (isTotpMfaSetupAvailable) {\n          const associateSoftwareToken = createAssociateSoftwareTokenClient({\n            endpointResolver: createCognitoUserPoolEndpointResolver({\n              endpointOverride: authConfig.userPoolEndpoint\n            })\n          });\n          const {\n            Session,\n            SecretCode: secretCode\n          } = await associateSoftwareToken({\n            region: getRegionFromUserPoolId(authConfig.userPoolId)\n          }, {\n            Session: signInSession\n          });\n          signInStore.dispatch({\n            type: 'SET_SIGN_IN_SESSION',\n            value: Session\n          });\n          return {\n            isSignedIn: false,\n            nextStep: {\n              signInStep: 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP',\n              totpSetupDetails: getTOTPSetupDetails(secretCode, username)\n            }\n          };\n        }\n        throw new AuthError({\n          name: AuthErrorCodes.SignInException,\n          message: `Cannot initiate MFA setup from available types: ${mfaSetupTypes}`\n        });\n      }\n    case 'NEW_PASSWORD_REQUIRED':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED',\n          missingAttributes: parseAttributes(challengeParameters.requiredAttributes)\n        }\n      };\n    case 'SELECT_MFA_TYPE':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SELECTION',\n          allowedMFATypes: getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_CHOOSE))\n        }\n      };\n    case 'SMS_OTP':\n    case 'SMS_MFA':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_SMS_CODE',\n          codeDeliveryDetails: {\n            deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,\n            destination: challengeParameters.CODE_DELIVERY_DESTINATION\n          }\n        }\n      };\n    case 'SOFTWARE_TOKEN_MFA':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_TOTP_CODE'\n        }\n      };\n    case 'EMAIL_OTP':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_EMAIL_CODE',\n          codeDeliveryDetails: {\n            deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,\n            destination: challengeParameters.CODE_DELIVERY_DESTINATION\n          }\n        }\n      };\n    case 'WEB_AUTHN':\n      {\n        const result = await handleWebAuthnSignInResult(challengeParameters);\n        if (isWebAuthnResultAuthSignInOutput(result)) {\n          return result;\n        }\n        return getSignInResult(result);\n      }\n    case 'PASSWORD':\n    case 'PASSWORD_SRP':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_PASSWORD'\n        }\n      };\n    case 'SELECT_CHALLENGE':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONTINUE_SIGN_IN_WITH_FIRST_FACTOR_SELECTION',\n          availableChallenges\n        }\n      };\n  }\n  // TODO: remove this error message for production apps\n  throw new AuthError({\n    name: AuthErrorCodes.SignInException,\n    message: 'An error occurred during the sign in process. ' + `${challengeName} challengeName returned by the underlying service was not addressed.`\n  });\n}\nfunction getTOTPSetupDetails(secretCode, username) {\n  return {\n    sharedSecret: secretCode,\n    getSetupUri: (appName, accountName) => {\n      const totpUri = `otpauth://totp/${appName}:${accountName ?? username}?secret=${secretCode}&issuer=${appName}`;\n      return new AmplifyUrl(totpUri);\n    }\n  };\n}\nfunction getSignInResultFromError(errorName) {\n  if (errorName === InitiateAuthException.PasswordResetRequiredException) {\n    return {\n      isSignedIn: false,\n      nextStep: {\n        signInStep: 'RESET_PASSWORD'\n      }\n    };\n  } else if (errorName === InitiateAuthException.UserNotConfirmedException) {\n    return {\n      isSignedIn: false,\n      nextStep: {\n        signInStep: 'CONFIRM_SIGN_UP'\n      }\n    };\n  }\n}\nfunction parseAttributes(attributes) {\n  if (!attributes) return [];\n  const parsedAttributes = JSON.parse(attributes).map(att => att.includes(USER_ATTRIBUTES) ? att.replace(USER_ATTRIBUTES, '') : att);\n  return parsedAttributes;\n}\nfunction createAttributes(attributes) {\n  if (!attributes) return {};\n  const newAttributes = {};\n  Object.entries(attributes).forEach(([key, value]) => {\n    if (value) newAttributes[`${USER_ATTRIBUTES}${key}`] = value;\n  });\n  return newAttributes;\n}\nasync function handleChallengeName(username, challengeName, session, challengeResponse, config, tokenOrchestrator, clientMetadata, options) {\n  const userAttributes = options?.userAttributes;\n  const deviceName = options?.friendlyDeviceName;\n  switch (challengeName) {\n    case 'WEB_AUTHN':\n    case 'SELECT_CHALLENGE':\n      if (challengeResponse === 'PASSWORD_SRP' || challengeResponse === 'PASSWORD') {\n        return {\n          ChallengeName: challengeResponse,\n          Session: session,\n          $metadata: {}\n        };\n      }\n      return initiateSelectedChallenge({\n        username,\n        session,\n        selectedChallenge: challengeResponse,\n        config,\n        clientMetadata\n      });\n    case 'SELECT_MFA_TYPE':\n      return handleSelectMFATypeChallenge({\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        config\n      });\n    case 'MFA_SETUP':\n      return handleMFASetupChallenge({\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        deviceName,\n        config\n      });\n    case 'NEW_PASSWORD_REQUIRED':\n      return handleCompleteNewPasswordChallenge({\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        requiredAttributes: userAttributes,\n        config\n      });\n    case 'CUSTOM_CHALLENGE':\n      return retryOnResourceNotFoundException(handleCustomChallenge, [{\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        config,\n        tokenOrchestrator\n      }], username, tokenOrchestrator);\n    case 'SMS_MFA':\n    case 'SOFTWARE_TOKEN_MFA':\n    case 'SMS_OTP':\n    case 'EMAIL_OTP':\n      return handleMFAChallenge({\n        challengeName,\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        config\n      });\n    case 'PASSWORD':\n      return handleSelectChallengeWithPassword(username, challengeResponse, clientMetadata, config, session);\n    case 'PASSWORD_SRP':\n      return handleSelectChallengeWithPasswordSRP(username, challengeResponse,\n      // This is the actual password\n      clientMetadata, config, session, tokenOrchestrator);\n  }\n  // TODO: remove this error message for production apps\n  throw new AuthError({\n    name: AuthErrorCodes.SignInException,\n    message: `An error occurred during the sign in process.\n\t\t${challengeName} challengeName returned by the underlying service was not addressed.`\n  });\n}\nfunction mapMfaType(mfa) {\n  let mfaType = 'SMS_MFA';\n  if (mfa === 'TOTP') mfaType = 'SOFTWARE_TOKEN_MFA';\n  if (mfa === 'EMAIL') mfaType = 'EMAIL_OTP';\n  return mfaType;\n}\nfunction getMFAType(type) {\n  if (type === 'SMS_MFA') return 'SMS';\n  if (type === 'SOFTWARE_TOKEN_MFA') return 'TOTP';\n  if (type === 'EMAIL_OTP') return 'EMAIL';\n  // TODO: log warning for unknown MFA type\n}\nfunction getMFATypes(types) {\n  if (!types) return undefined;\n  return types.map(getMFAType).filter(Boolean);\n}\nfunction parseMFATypes(mfa) {\n  if (!mfa) return [];\n  return JSON.parse(mfa);\n}\nfunction getAllowedMfaSetupTypes(availableMfaSetupTypes) {\n  return availableMfaSetupTypes.filter(authMfaType => authMfaType === 'EMAIL' || authMfaType === 'TOTP');\n}\nasync function assertUserNotAuthenticated() {\n  let authUser;\n  try {\n    authUser = await getCurrentUser();\n  } catch (error) {}\n  if (authUser && authUser.userId && authUser.username) {\n    throw new AuthError({\n      name: USER_ALREADY_AUTHENTICATED_EXCEPTION,\n      message: 'There is already a signed in user.',\n      recoverySuggestion: 'Call signOut before calling signIn again.'\n    });\n  }\n}\nfunction getActiveSignInUsername(username) {\n  const state = signInStore.getState();\n  return state.username ?? username;\n}\nasync function handleMFAChallenge({\n  challengeName,\n  challengeResponse,\n  clientMetadata,\n  session,\n  username,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const challengeResponses = {\n    USERNAME: username\n  };\n  if (challengeName === 'EMAIL_OTP') {\n    challengeResponses.EMAIL_OTP_CODE = challengeResponse;\n  }\n  if (challengeName === 'SMS_MFA') {\n    challengeResponses.SMS_MFA_CODE = challengeResponse;\n  }\n  if (challengeName === 'SMS_OTP') {\n    challengeResponses.SMS_OTP_CODE = challengeResponse;\n  }\n  if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n    challengeResponses.SOFTWARE_TOKEN_MFA_CODE = challengeResponse;\n  }\n  const userContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: challengeName,\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData: userContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  return respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n}\nexport { assertUserNotAuthenticated, createAttributes, getActiveSignInUsername, getAllowedMfaSetupTypes, getMFAType, getMFATypes, getSignInResult, getSignInResultFromError, getTOTPSetupDetails, handleChallengeName, handleCompleteNewPasswordChallenge, handleCustomAuthFlowWithoutSRP, handleCustomChallenge, handleCustomSRPAuthFlow, handleMFAChallenge, handleMFASetupChallenge, handleSelectMFATypeChallenge, handleUserPasswordAuthFlow, handleUserSRPAuthFlow, mapMfaType, parseAttributes, parseMFATypes };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { handleCustomAuthFlowWithoutSRP, getActiveSignInUsername, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { setActiveSignInState, resetActiveSignInState } from '../../../client/utils/store/signInStore.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../utils/types.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\nimport { retryOnResourceNotFoundException } from '../utils/retryOnResourceNotFoundException.mjs';\nimport { getNewDeviceMetadata } from '../utils/getNewDeviceMetadata.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in using a custom authentication flow without password\n *\n * @param input -  The SignInWithCustomAuthInput object\n * @returns AuthSignInResult\n * @throws service: {@link InitiateAuthException } - Cognito service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws SignInWithCustomAuthOutput - Thrown when the token provider config is invalid.\n */\nasync function signInWithCustomAuth(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    username,\n    password,\n    options\n  } = input;\n  const signInDetails = {\n    loginId: username,\n    authFlowType: 'CUSTOM_WITHOUT_SRP'\n  };\n  const metadata = options?.clientMetadata;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n  assertValidationError(!password, AuthValidationErrorCode.CustomAuthSignInPassword);\n  try {\n    const {\n      ChallengeName: retriedChallengeName,\n      ChallengeParameters: retiredChallengeParameters,\n      AuthenticationResult,\n      Session\n    } = await retryOnResourceNotFoundException(handleCustomAuthFlowWithoutSRP, [username, metadata, authConfig, tokenOrchestrator], username, tokenOrchestrator);\n    const activeUsername = getActiveSignInUsername(username);\n    // sets up local state used during the sign-in process\n    setActiveSignInState({\n      signInSession: Session,\n      username: activeUsername,\n      challengeName: retriedChallengeName,\n      signInDetails\n    });\n    if (AuthenticationResult) {\n      await cacheCognitoTokens({\n        username: activeUsername,\n        ...AuthenticationResult,\n        NewDeviceMetadata: await getNewDeviceMetadata({\n          userPoolId: authConfig.userPoolId,\n          userPoolEndpoint: authConfig.userPoolEndpoint,\n          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n          accessToken: AuthenticationResult.AccessToken\n        }),\n        signInDetails\n      });\n      resetActiveSignInState();\n      await dispatchSignedInHubEvent();\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: retriedChallengeName,\n      challengeParameters: retiredChallengeParameters\n    });\n  } catch (error) {\n    resetActiveSignInState();\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { signInWithCustomAuth };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { handleCustomSRPAuthFlow, getActiveSignInUsername, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { setActiveSignInState, resetActiveSignInState } from '../../../client/utils/store/signInStore.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../utils/types.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\nimport { getNewDeviceMetadata } from '../utils/getNewDeviceMetadata.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in using a custom authentication flow with SRP\n *\n * @param input -  The SignInWithCustomSRPAuthInput object\n * @returns SignInWithCustomSRPAuthOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito\n * service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signInWithCustomSRPAuth(input) {\n  const {\n    username,\n    password,\n    options\n  } = input;\n  const signInDetails = {\n    loginId: username,\n    authFlowType: 'CUSTOM_WITH_SRP'\n  };\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const metadata = options?.clientMetadata;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n  assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n  try {\n    const {\n      ChallengeName: handledChallengeName,\n      ChallengeParameters: handledChallengeParameters,\n      AuthenticationResult,\n      Session\n    } = await handleCustomSRPAuthFlow(username, password, metadata, authConfig, tokenOrchestrator);\n    const activeUsername = getActiveSignInUsername(username);\n    // sets up local state used during the sign-in process\n    setActiveSignInState({\n      signInSession: Session,\n      username: activeUsername,\n      challengeName: handledChallengeName,\n      signInDetails\n    });\n    if (AuthenticationResult) {\n      await cacheCognitoTokens({\n        username: activeUsername,\n        ...AuthenticationResult,\n        NewDeviceMetadata: await getNewDeviceMetadata({\n          userPoolId: authConfig.userPoolId,\n          userPoolEndpoint: authConfig.userPoolEndpoint,\n          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n          accessToken: AuthenticationResult.AccessToken\n        }),\n        signInDetails\n      });\n      resetActiveSignInState();\n      await dispatchSignedInHubEvent();\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: handledChallengeName,\n      challengeParameters: handledChallengeParameters\n    });\n  } catch (error) {\n    resetActiveSignInState();\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { signInWithCustomSRPAuth };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { handleUserSRPAuthFlow, getActiveSignInUsername, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { setActiveSignInState, resetActiveSignInState } from '../../../client/utils/store/signInStore.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../utils/types.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\nimport { getNewDeviceMetadata } from '../utils/getNewDeviceMetadata.mjs';\nimport { resetAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in\n *\n * @param input - The SignInWithSRPInput object\n * @returns SignInWithSRPOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito service errors\n * thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signInWithSRP(input) {\n  const {\n    username,\n    password\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const signInDetails = {\n    loginId: username,\n    authFlowType: 'USER_SRP_AUTH'\n  };\n  assertTokenProviderConfig(authConfig);\n  const clientMetaData = input.options?.clientMetadata;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n  assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n  try {\n    const {\n      ChallengeName: handledChallengeName,\n      ChallengeParameters: handledChallengeParameters,\n      AuthenticationResult,\n      Session\n    } = await handleUserSRPAuthFlow(username, password, clientMetaData, authConfig, tokenOrchestrator);\n    const activeUsername = getActiveSignInUsername(username);\n    // sets up local state used during the sign-in process\n    setActiveSignInState({\n      signInSession: Session,\n      username: activeUsername,\n      challengeName: handledChallengeName,\n      signInDetails\n    });\n    if (AuthenticationResult) {\n      await cacheCognitoTokens({\n        username: activeUsername,\n        ...AuthenticationResult,\n        NewDeviceMetadata: await getNewDeviceMetadata({\n          userPoolId: authConfig.userPoolId,\n          userPoolEndpoint: authConfig.userPoolEndpoint,\n          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n          accessToken: AuthenticationResult.AccessToken\n        }),\n        signInDetails\n      });\n      resetActiveSignInState();\n      await dispatchSignedInHubEvent();\n      resetAutoSignIn();\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: handledChallengeName,\n      challengeParameters: handledChallengeParameters\n    });\n  } catch (error) {\n    resetActiveSignInState();\n    resetAutoSignIn();\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { signInWithSRP };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { handleUserPasswordAuthFlow, getActiveSignInUsername, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { setActiveSignInState, resetActiveSignInState } from '../../../client/utils/store/signInStore.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../utils/types.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\nimport { retryOnResourceNotFoundException } from '../utils/retryOnResourceNotFoundException.mjs';\nimport { getNewDeviceMetadata } from '../utils/getNewDeviceMetadata.mjs';\nimport { resetAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in using USER_PASSWORD_AUTH AuthFlowType\n *\n * @param input - The SignInWithUserPasswordInput object\n * @returns SignInWithUserPasswordOutput\n * @throws service: {@link InitiateAuthException } - Cognito service error thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signInWithUserPassword(input) {\n  const {\n    username,\n    password,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const signInDetails = {\n    loginId: username,\n    authFlowType: 'USER_PASSWORD_AUTH'\n  };\n  assertTokenProviderConfig(authConfig);\n  const metadata = options?.clientMetadata;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n  assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n  try {\n    const {\n      ChallengeName: retiredChallengeName,\n      ChallengeParameters: retriedChallengeParameters,\n      AuthenticationResult,\n      Session\n    } = await retryOnResourceNotFoundException(handleUserPasswordAuthFlow, [username, password, metadata, authConfig, tokenOrchestrator], username, tokenOrchestrator);\n    const activeUsername = getActiveSignInUsername(username);\n    // sets up local state used during the sign-in process\n    setActiveSignInState({\n      signInSession: Session,\n      username: activeUsername,\n      challengeName: retiredChallengeName,\n      signInDetails\n    });\n    if (AuthenticationResult) {\n      await cacheCognitoTokens({\n        ...AuthenticationResult,\n        username: activeUsername,\n        NewDeviceMetadata: await getNewDeviceMetadata({\n          userPoolId: authConfig.userPoolId,\n          userPoolEndpoint: authConfig.userPoolEndpoint,\n          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n          accessToken: AuthenticationResult.AccessToken\n        }),\n        signInDetails\n      });\n      resetActiveSignInState();\n      await dispatchSignedInHubEvent();\n      resetAutoSignIn();\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: retiredChallengeName,\n      challengeParameters: retriedChallengeParameters\n    });\n  } catch (error) {\n    resetActiveSignInState();\n    resetAutoSignIn();\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { signInWithUserPassword };\n", "import { AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData.mjs';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { handlePasswordSRP } from '../shared/handlePasswordSRP.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { setActiveSignInUsername } from '../../../providers/cognito/utils/setActiveSignInUsername.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Handles user authentication flow with configurable challenge preferences.\n * Supports AuthFactorType challenges through the USER_AUTH flow.\n *\n * @param {HandleUserAuthFlowInput} params - Authentication flow parameters\n * @param {string} params.username - The username for authentication\n * @param {Record<string, string>} [params.clientMetadata] - Optional metadata to pass to authentication service\n * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration\n * @param {AuthTokenOrchestrator} params.tokenOrchestrator - Manages authentication tokens and device tracking\n * @param {AuthFactorType} [params.preferredChallenge] - Optional preferred authentication method\n * @param {string} [params.password] - Required when preferredChallenge is 'PASSWORD' or 'PASSWORD_SRP'\n *\n * @returns {Promise<InitiateAuthCommandOutput>} The authentication response from Cognito\n */\nasync function handleUserAuthFlow({\n  username,\n  clientMetadata,\n  config,\n  tokenOrchestrator,\n  preferredChallenge,\n  password,\n  session\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const authParameters = {\n    USERNAME: username\n  };\n  if (preferredChallenge) {\n    if (preferredChallenge === 'PASSWORD_SRP') {\n      assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n      return handlePasswordSRP({\n        username,\n        password,\n        clientMetadata,\n        config,\n        tokenOrchestrator,\n        authFlow: 'USER_AUTH',\n        preferredChallenge\n      });\n    }\n    if (preferredChallenge === 'PASSWORD') {\n      assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n      authParameters.PASSWORD = password;\n    }\n    authParameters.PREFERRED_CHALLENGE = preferredChallenge;\n  }\n  const jsonReq = {\n    AuthFlow: 'USER_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  if (session) {\n    jsonReq.Session = session;\n  }\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await initiateAuth({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  // Set the active username immediately after successful authentication attempt\n  // If a user starts a new sign-in while another sign-in is incomplete,\n  // this ensures we're tracking the correct user for subsequent auth challenges.\n  setActiveSignInUsername(username);\n  return response;\n}\nexport { handleUserAuthFlow };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { getActiveSignInUsername, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { autoSignInStore } from '../../../client/utils/store/autoSignInStore.mjs';\nimport { setActiveSignInState, resetActiveSignInState } from '../../../client/utils/store/signInStore.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../utils/types.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { handleUserAuthFlow } from '../../../client/flows/userAuth/handleUserAuthFlow.mjs';\nimport { getNewDeviceMetadata } from '../utils/getNewDeviceMetadata.mjs';\nimport { resetAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in through a registered email or phone number without a password by by receiving and entering an OTP.\n *\n * @param input - The SignInWithUserAuthInput object\n * @returns SignInWithUserAuthOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito service errors\n * thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password -- needs to change\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signInWithUserAuth(input) {\n  const {\n    username,\n    password,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const signInDetails = {\n    loginId: username,\n    authFlowType: 'USER_AUTH'\n  };\n  assertTokenProviderConfig(authConfig);\n  const clientMetaData = options?.clientMetadata;\n  const preferredChallenge = options?.preferredChallenge;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n  try {\n    const handleUserAuthFlowInput = {\n      username,\n      config: authConfig,\n      tokenOrchestrator,\n      clientMetadata: clientMetaData,\n      preferredChallenge,\n      password\n    };\n    const autoSignInStoreState = autoSignInStore.getState();\n    if (autoSignInStoreState.active && autoSignInStoreState.username === username) {\n      handleUserAuthFlowInput.session = autoSignInStoreState.session;\n    }\n    const response = await handleUserAuthFlow(handleUserAuthFlowInput);\n    const activeUsername = getActiveSignInUsername(username);\n    setActiveSignInState({\n      signInSession: response.Session,\n      username: activeUsername,\n      challengeName: response.ChallengeName,\n      signInDetails\n    });\n    if (response.AuthenticationResult) {\n      await cacheCognitoTokens({\n        username: activeUsername,\n        ...response.AuthenticationResult,\n        NewDeviceMetadata: await getNewDeviceMetadata({\n          userPoolId: authConfig.userPoolId,\n          userPoolEndpoint: authConfig.userPoolEndpoint,\n          newDeviceMetadata: response.AuthenticationResult.NewDeviceMetadata,\n          accessToken: response.AuthenticationResult.AccessToken\n        }),\n        signInDetails\n      });\n      resetActiveSignInState();\n      await dispatchSignedInHubEvent();\n      resetAutoSignIn();\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: response.ChallengeName,\n      challengeParameters: response.ChallengeParameters,\n      availableChallenges: 'AvailableChallenges' in response ? response.AvailableChallenges : undefined\n    });\n  } catch (error) {\n    resetActiveSignInState();\n    resetAutoSignIn();\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { signInWithUserAuth };\n", "import { assertUserNotAuthenticated } from '../utils/signInHelpers.mjs';\nimport { signInWithCustomAuth } from './signInWithCustomAuth.mjs';\nimport { signInWithCustomSRPAuth } from './signInWithCustomSRPAuth.mjs';\nimport { signInWithSRP } from './signInWithSRP.mjs';\nimport { signInWithUserPassword } from './signInWithUserPassword.mjs';\nimport { signInWithUserAuth } from './signInWithUserAuth.mjs';\nimport { resetAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in\n *\n * @param input -  The SignInInput object\n * @returns SignInOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException }\n *  - Cognito service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signIn(input) {\n  // Here we want to reset the store but not reassign the callback.\n  // The callback is reset when the underlying promise resolves or rejects.\n  // With the advent of session based sign in, this guarantees that the signIn API initiates a new auth flow,\n  // regardless of whether it is called for a user currently engaged in an active auto sign in session.\n  resetAutoSignIn(false);\n  const authFlowType = input.options?.authFlowType;\n  await assertUserNotAuthenticated();\n  switch (authFlowType) {\n    case 'USER_SRP_AUTH':\n      return signInWithSRP(input);\n    case 'USER_PASSWORD_AUTH':\n      return signInWithUserPassword(input);\n    case 'CUSTOM_WITHOUT_SRP':\n      return signInWithCustomAuth(input);\n    case 'CUSTOM_WITH_SRP':\n      return signInWithCustomSRPAuth(input);\n    case 'USER_AUTH':\n      return signInWithUserAuth(input);\n    default:\n      return signInWithSRP(input);\n  }\n}\nexport { signIn };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Transforms a user attributes object into an array of AttributeType objects.\n * @param attributes user attributes to be mapped to AttributeType objects.\n * @returns an array of AttributeType objects.\n */\nfunction toAttributeType(attributes) {\n  return Object.entries(attributes).map(([key, value]) => ({\n    Name: key,\n    Value: value\n  }));\n}\n/**\n * Transforms an array of AttributeType objects into a user attributes object.\n *\n * @param attributes - an array of AttributeType objects.\n * @returns AuthUserAttributes object.\n */\nfunction toAuthUserAttribute(attributes) {\n  const userAttributes = {};\n  attributes?.forEach(attribute => {\n    if (attribute.Name) userAttributes[attribute.Name] = attribute.Value;\n  });\n  return userAttributes;\n}\nexport { toAttributeType, toAuthUserAttribute };\n", "import { HubInternal } from '@aws-amplify/core/internals/utils';\nimport { signIn } from '../apis/signIn.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { setAutoSignIn, resetAutoSignIn } from '../apis/autoSignIn.mjs';\nimport { AUTO_SIGN_IN_EXCEPTION } from '../../../errors/constants.mjs';\nimport { signInWithUserAuth } from '../apis/signInWithUserAuth.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1000;\nfunction handleCodeAutoSignIn(signInInput) {\n  const stopHubListener = HubInternal.listen('auth-internal', async ({\n    payload\n  }) => {\n    switch (payload.event) {\n      case 'confirmSignUp':\n        {\n          const response = payload.data;\n          if (response?.isSignUpComplete) {\n            HubInternal.dispatch('auth-internal', {\n              event: 'autoSignIn'\n            });\n            setAutoSignIn(autoSignInWithCode(signInInput));\n            stopHubListener();\n          }\n        }\n    }\n  });\n  // This will stop the listener if confirmSignUp is not resolved.\n  const timeOutId = setTimeout(() => {\n    stopHubListener();\n    clearTimeout(timeOutId);\n    resetAutoSignIn();\n  }, MAX_AUTOSIGNIN_POLLING_MS);\n}\nfunction debounce(fun, delay) {\n  let timer;\n  return args => {\n    if (!timer) {\n      fun(...args);\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      timer = undefined;\n    }, delay);\n  };\n}\nfunction handleAutoSignInWithLink(signInInput, resolve, reject) {\n  const start = Date.now();\n  const autoSignInPollingIntervalId = setInterval(async () => {\n    const elapsedTime = Date.now() - start;\n    const maxTime = MAX_AUTOSIGNIN_POLLING_MS;\n    if (elapsedTime > maxTime) {\n      clearInterval(autoSignInPollingIntervalId);\n      reject(new AuthError({\n        name: AUTO_SIGN_IN_EXCEPTION,\n        message: 'The account was not confirmed on time.',\n        recoverySuggestion: 'Try to verify your account by clicking the link sent your email or phone and then login manually.'\n      }));\n      resetAutoSignIn();\n    } else {\n      try {\n        const signInOutput = await signIn(signInInput);\n        if (signInOutput.nextStep.signInStep !== 'CONFIRM_SIGN_UP') {\n          resolve(signInOutput);\n          clearInterval(autoSignInPollingIntervalId);\n          resetAutoSignIn();\n        }\n      } catch (error) {\n        clearInterval(autoSignInPollingIntervalId);\n        reject(error);\n        resetAutoSignIn();\n      }\n    }\n  }, 5000);\n}\nconst debouncedAutoSignInWithLink = debounce(handleAutoSignInWithLink, 300);\nconst debouncedAutoSignWithCodeOrUserConfirmed = debounce(handleAutoSignInWithCodeOrUserConfirmed, 300);\nfunction autoSignInWhenUserIsConfirmedWithLink(signInInput) {\n  return async () => {\n    return new Promise((resolve, reject) => {\n      debouncedAutoSignInWithLink([signInInput, resolve, reject]);\n    });\n  };\n}\nasync function handleAutoSignInWithCodeOrUserConfirmed(signInInput, resolve, reject) {\n  try {\n    const output = signInInput?.options?.authFlowType === 'USER_AUTH' ? await signInWithUserAuth(signInInput) : await signIn(signInInput);\n    resolve(output);\n    resetAutoSignIn();\n  } catch (error) {\n    reject(error);\n    resetAutoSignIn();\n  }\n}\nfunction autoSignInWithCode(signInInput) {\n  return async () => {\n    return new Promise((resolve, reject) => {\n      debouncedAutoSignWithCodeOrUserConfirmed([signInInput, resolve, reject]);\n    });\n  };\n}\nconst autoSignInUserConfirmed = autoSignInWithCode;\nexport { autoSignInUserConfirmed, autoSignInWhenUserIsConfirmedWithLink, handleCodeAutoSignIn };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { parseJsonError, parseJsonBody } from '@aws-amplify/core/internals/aws-client-utils';\nimport { validationErrorMap } from '../../../../common/AuthErrorStrings.mjs';\nimport { AuthError } from '../../../../errors/AuthError.mjs';\nimport { AuthValidationErrorCode } from '../../../../errors/types/validation.mjs';\nimport { assertServiceError } from '../../../../errors/utils/assertServiceError.mjs';\nimport { SignUpException } from '../../../../providers/cognito/types/errors.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createSignUpClientDeserializer = () => async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseJsonError(response);\n    assertServiceError(error);\n    if (\n    // Missing Password Error\n    // 1 validation error detected: Value at 'password'failed to satisfy constraint: Member must not be null\n    error.name === SignUpException.InvalidParameterException && /'password'/.test(error.message) && /Member must not be null/.test(error.message)) {\n      const name = AuthValidationErrorCode.EmptySignUpPassword;\n      const {\n        message,\n        recoverySuggestion\n      } = validationErrorMap[name];\n      throw new AuthError({\n        name,\n        message,\n        recoverySuggestion\n      });\n    }\n    throw new AuthError({\n      name: error.name,\n      message: error.message\n    });\n  }\n  return parseJsonBody(response);\n};\nconst createSignUpClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('SignUp'), createSignUpClientDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createSignUpClient, createSignUpClientDeserializer };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { toAttributeType } from '../utils/apiHelpers.mjs';\nimport { handleCodeAutoSignIn, autoSignInUserConfirmed, autoSignInWhenUserIsConfirmedWithLink } from '../utils/signUpHelpers.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport { createSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createSignUpClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { autoSignInStore } from '../../../client/utils/store/autoSignInStore.mjs';\nimport '../../../client/utils/store/signInStore.mjs';\nimport { setAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Creates a user\n *\n * @param input - The SignUpInput object\n * @returns SignUpOutput\n * @throws service: {@link SignUpException } - Cognito service errors thrown during the sign-up process.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signUp(input) {\n  const {\n    username,\n    password,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const signUpVerificationMethod = authConfig?.signUpVerificationMethod ?? 'code';\n  const {\n    clientMetadata,\n    validationData,\n    autoSignIn\n  } = input.options ?? {};\n  assertTokenProviderConfig(authConfig);\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n  const signInServiceOptions = typeof autoSignIn !== 'boolean' ? autoSignIn : undefined;\n  const signInInput = {\n    username,\n    options: signInServiceOptions\n  };\n  // if the authFlowType is 'CUSTOM_WITHOUT_SRP' then we don't include the password\n  if (signInServiceOptions?.authFlowType !== 'CUSTOM_WITHOUT_SRP') {\n    signInInput.password = password;\n  }\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = authConfig;\n  const signUpClient = createSignUpClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const signUpClientInput = {\n    Username: username,\n    Password: undefined,\n    UserAttributes: options?.userAttributes && toAttributeType(options?.userAttributes),\n    ClientMetadata: clientMetadata,\n    ValidationData: validationData && toAttributeType(validationData),\n    ClientId: userPoolClientId,\n    UserContextData: getUserContextData({\n      username,\n      userPoolId,\n      userPoolClientId\n    })\n  };\n  if (password) {\n    signUpClientInput.Password = password;\n  }\n  const {\n    UserSub: userId,\n    CodeDeliveryDetails: cdd,\n    UserConfirmed: userConfirmed,\n    Session: session\n  } = await signUpClient({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignUp)\n  }, signUpClientInput);\n  if (signInServiceOptions || autoSignIn === true) {\n    autoSignInStore.dispatch({\n      type: 'START'\n    });\n    autoSignInStore.dispatch({\n      type: 'SET_USERNAME',\n      value: username\n    });\n    autoSignInStore.dispatch({\n      type: 'SET_SESSION',\n      value: session\n    });\n  }\n  const codeDeliveryDetails = {\n    destination: cdd?.Destination,\n    deliveryMedium: cdd?.DeliveryMedium,\n    attributeName: cdd?.AttributeName\n  };\n  const isSignUpComplete = !!userConfirmed;\n  const isAutoSignInStarted = autoSignInStore.getState().active;\n  // Sign Up Complete\n  // No Confirm Sign In Step Required\n  if (isSignUpComplete) {\n    if (isAutoSignInStarted) {\n      setAutoSignIn(autoSignInUserConfirmed(signInInput));\n      return {\n        isSignUpComplete: true,\n        nextStep: {\n          signUpStep: 'COMPLETE_AUTO_SIGN_IN'\n        },\n        userId\n      };\n    }\n    return {\n      isSignUpComplete: true,\n      nextStep: {\n        signUpStep: 'DONE'\n      },\n      userId\n    };\n  }\n  // Sign Up Not Complete\n  // Confirm Sign Up Step Required\n  if (isAutoSignInStarted) {\n    // Confirmation Via Link Occurs In Separate Context\n    // AutoSignIn Fn Will Initiate Polling Once Executed\n    if (signUpVerificationMethod === 'link') {\n      setAutoSignIn(autoSignInWhenUserIsConfirmedWithLink(signInInput));\n      return {\n        isSignUpComplete: false,\n        nextStep: {\n          signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n          codeDeliveryDetails\n        },\n        userId\n      };\n    }\n    // Confirmation Via Code Occurs In Same Context\n    // AutoSignIn Next Step Will Be Returned From Confirm Sign Up\n    handleCodeAutoSignIn(signInInput);\n  }\n  return {\n    isSignUpComplete: false,\n    nextStep: {\n      signUpStep: 'CONFIRM_SIGN_UP',\n      codeDeliveryDetails\n    },\n    userId\n  };\n}\nexport { signUp };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createForgotPasswordClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ForgotPassword'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createForgotPasswordClient };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nasync function resetPassword(input) {\n  const {\n    username\n  } = input;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolClientId,\n    userPoolId,\n    userPoolEndpoint\n  } = authConfig;\n  const clientMetadata = input.options?.clientMetadata;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const forgotPassword = createForgotPasswordClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const res = await forgotPassword({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword)\n  }, {\n    Username: username,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  });\n  const codeDeliveryDetails = res.CodeDeliveryDetails;\n  return {\n    isPasswordReset: false,\n    nextStep: {\n      resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n      codeDeliveryDetails: {\n        deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n        destination: codeDeliveryDetails?.Destination,\n        attributeName: codeDeliveryDetails?.AttributeName\n      }\n    }\n  };\n}\nexport { resetPassword };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createConfirmForgotPasswordClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmForgotPassword'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createConfirmForgotPasswordClient };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createConfirmForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms the new password and verification code to reset the password.\n *\n * @param input -  The ConfirmResetPasswordInput object.\n * @throws -{@link ConfirmForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code, password or username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmResetPassword(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolClientId,\n    userPoolId,\n    userPoolEndpoint\n  } = authConfig;\n  const {\n    username,\n    newPassword\n  } = input;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);\n  assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);\n  const code = input.confirmationCode;\n  assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);\n  const metadata = input.options?.clientMetadata;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const confirmForgotPassword = createConfirmForgotPasswordClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await confirmForgotPassword({\n    region: getRegionFromUserPoolId(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword)\n  }, {\n    Username: username,\n    ConfirmationCode: code,\n    Password: newPassword,\n    ClientMetadata: metadata,\n    ClientId: authConfig.userPoolClientId,\n    UserContextData\n  });\n}\nexport { confirmResetPassword };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createResendConfirmationCodeClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ResendConfirmationCode'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createResendConfirmationCodeClient };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createResendConfirmationCodeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resend the confirmation code while signing up\n *\n * @param input -  The ResendSignUpCodeInput object\n * @returns ResendSignUpCodeOutput\n * @throws service: {@link ResendConfirmationException } - Cognito service errors thrown when resending the code.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function resendSignUpCode(input) {\n  const {\n    username\n  } = input;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolClientId,\n    userPoolId,\n    userPoolEndpoint\n  } = authConfig;\n  const clientMetadata = input.options?.clientMetadata;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const resendConfirmationCode = createResendConfirmationCodeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    CodeDeliveryDetails\n  } = await resendConfirmationCode({\n    region: getRegionFromUserPoolId(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ResendSignUpCode)\n  }, {\n    Username: username,\n    ClientMetadata: clientMetadata,\n    ClientId: authConfig.userPoolClientId,\n    UserContextData\n  });\n  const {\n    DeliveryMedium,\n    AttributeName,\n    Destination\n  } = {\n    ...CodeDeliveryDetails\n  };\n  return {\n    destination: Destination,\n    deliveryMedium: DeliveryMedium,\n    attributeName: AttributeName ? AttributeName : undefined\n  };\n}\nexport { resendSignUpCode };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createConfirmSignUpClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmSignUp'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createConfirmSignUpClient };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction, HubInternal } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createConfirmSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { autoSignInStore } from '../../../client/utils/store/autoSignInStore.mjs';\nimport '../../../client/utils/store/signInStore.mjs';\nimport { resetAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms a new user account.\n *\n * @param input -  The ConfirmSignUpInput object.\n * @returns ConfirmSignUpOutput\n * @throws -{@link ConfirmSignUpException }\n * Thrown due to an invalid confirmation code.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmSignUp(input) {\n  const {\n    username,\n    confirmationCode,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = authConfig;\n  const clientMetadata = options?.clientMetadata;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmSignUpUsername);\n  assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmSignUpCode);\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const confirmSignUpClient = createConfirmSignUpClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    Session: session\n  } = await confirmSignUpClient({\n    region: getRegionFromUserPoolId(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignUp)\n  }, {\n    Username: username,\n    ConfirmationCode: confirmationCode,\n    ClientMetadata: clientMetadata,\n    ForceAliasCreation: options?.forceAliasCreation,\n    ClientId: authConfig.userPoolClientId,\n    UserContextData\n  });\n  return new Promise((resolve, reject) => {\n    try {\n      const signUpOut = {\n        isSignUpComplete: true,\n        nextStep: {\n          signUpStep: 'DONE'\n        }\n      };\n      const autoSignInStoreState = autoSignInStore.getState();\n      if (!autoSignInStoreState.active || autoSignInStoreState.username !== username) {\n        resolve(signUpOut);\n        resetAutoSignIn();\n        return;\n      }\n      autoSignInStore.dispatch({\n        type: 'SET_SESSION',\n        value: session\n      });\n      const stopListener = HubInternal.listen('auth-internal', ({\n        payload\n      }) => {\n        switch (payload.event) {\n          case 'autoSignIn':\n            resolve({\n              isSignUpComplete: true,\n              nextStep: {\n                signUpStep: 'COMPLETE_AUTO_SIGN_IN'\n              }\n            });\n            stopListener();\n        }\n      });\n      HubInternal.dispatch('auth-internal', {\n        event: 'confirmSignUp',\n        data: signUpOut\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nexport { confirmSignUp };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport '../../../client/utils/store/autoSignInStore.mjs';\nimport { signInStore, setActiveSignInState, resetActiveSignInState } from '../../../client/utils/store/signInStore.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { handleChallengeName, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../utils/types.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\nimport { getNewDeviceMetadata } from '../utils/getNewDeviceMetadata.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Continues or completes the sign in process when required by the initial call to `signIn`.\n *\n * @param input -  The ConfirmSignInInput object\n * @returns ConfirmSignInOutput\n * @throws  -{@link VerifySoftwareTokenException }:\n * Thrown due to an invalid MFA token.\n * @throws  -{@link RespondToAuthChallengeException }:\n * Thrown due to an invalid auth challenge response.\n * @throws  -{@link AssociateSoftwareTokenException}:\n * Thrown due to a service error during the MFA setup process.\n * @throws  -{@link AuthValidationErrorCode }:\n * Thrown when `challengeResponse` is not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmSignIn(input) {\n  const {\n    challengeResponse,\n    options\n  } = input;\n  const {\n    username,\n    challengeName,\n    signInSession,\n    signInDetails\n  } = signInStore.getState();\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const clientMetaData = options?.clientMetadata;\n  assertValidationError(!!challengeResponse, AuthValidationErrorCode.EmptyChallengeResponse);\n  if (!username || !challengeName || !signInSession)\n    // TODO: remove this error message for production apps\n    throw new AuthError({\n      name: AuthErrorCodes.SignInException,\n      message: `\n\t\t\tAn error occurred during the sign in process.\n\n\t\t\tThis most likely occurred due to:\n\t\t\t1. signIn was not called before confirmSignIn.\n\t\t\t2. signIn threw an exception.\n\t\t\t3. page was refreshed during the sign in flow and session has expired.\n\t\t\t`,\n      recoverySuggestion: 'Make sure a successful call to signIn is made before calling confirmSignIn' + 'and that the session has not expired.'\n    });\n  try {\n    const {\n      Session,\n      ChallengeName: handledChallengeName,\n      AuthenticationResult,\n      ChallengeParameters: handledChallengeParameters\n    } = await handleChallengeName(username, challengeName, signInSession, challengeResponse, authConfig, tokenOrchestrator, clientMetaData, options);\n    // sets up local state used during the sign-in process\n    setActiveSignInState({\n      signInSession: Session,\n      username,\n      challengeName: handledChallengeName,\n      signInDetails\n    });\n    if (AuthenticationResult) {\n      await cacheCognitoTokens({\n        username,\n        ...AuthenticationResult,\n        NewDeviceMetadata: await getNewDeviceMetadata({\n          userPoolId: authConfig.userPoolId,\n          userPoolEndpoint: authConfig.userPoolEndpoint,\n          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n          accessToken: AuthenticationResult.AccessToken\n        }),\n        signInDetails\n      });\n      resetActiveSignInState();\n      await dispatchSignedInHubEvent();\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: handledChallengeName,\n      challengeParameters: handledChallengeParameters\n    });\n  } catch (error) {\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { confirmSignIn };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createSetUserMFAPreferenceClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('SetUserMFAPreference'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createSetUserMFAPreferenceClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createSetUserMFAPreferenceClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createSetUserMFAPreferenceClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Updates the MFA preference of the user.\n *\n * @param input - The UpdateMFAPreferenceInput object.\n * @throws -{@link SetUserMFAPreferenceException } - Service error thrown when the MFA preference cannot be updated.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function updateMFAPreference(input) {\n  const {\n    sms,\n    totp,\n    email\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const setUserMFAPreference = createSetUserMFAPreferenceClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await setUserMFAPreference({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.UpdateMFAPreference)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    SMSMfaSettings: getMFASettings(sms),\n    SoftwareTokenMfaSettings: getMFASettings(totp),\n    EmailMfaSettings: getMFASettings(email)\n  });\n}\nfunction getMFASettings(mfaPreference) {\n  if (mfaPreference === 'DISABLED') {\n    return {\n      Enabled: false\n    };\n  } else if (mfaPreference === 'PREFERRED') {\n    return {\n      Enabled: true,\n      PreferredMfa: true\n    };\n  } else if (mfaPreference === 'ENABLED') {\n    return {\n      Enabled: true\n    };\n  } else if (mfaPreference === 'NOT_PREFERRED') {\n    return {\n      Enabled: true,\n      PreferredMfa: false\n    };\n  }\n}\nexport { getMFASettings, updateMFAPreference };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createGetUserClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('GetUser'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createGetUserClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getMFATypes, getMFAType } from '../utils/signInHelpers.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createGetUserClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Fetches the preferred MFA setting and enabled MFA settings for the user.\n *\n * @returns FetchMFAPreferenceOutput\n * @throws  -{@link GetUserException} : error thrown when the service fails to fetch MFA preference\n * and settings.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function fetchMFAPreference() {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const getUser = createGetUserClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    PreferredMfaSetting,\n    UserMFASettingList\n  } = await getUser({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.FetchMFAPreference)\n  }, {\n    AccessToken: tokens.accessToken.toString()\n  });\n  return {\n    preferred: getMFAType(PreferredMfaSetting),\n    enabled: getMFATypes(UserMFASettingList)\n  };\n}\nexport { fetchMFAPreference };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createVerifySoftwareTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createVerifySoftwareTokenClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Verifies an OTP code retrieved from an associated authentication app.\n *\n * @param input - The VerifyTOTPSetupInput\n * @throws  -{@link VerifySoftwareTokenException }:\n * Thrown due to an invalid MFA token.\n * @throws  -{@link AuthValidationErrorCode }:\n * Thrown when `code` is not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function verifyTOTPSetup(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    code,\n    options\n  } = input;\n  assertValidationError(!!code, AuthValidationErrorCode.EmptyVerifyTOTPSetupCode);\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const verifySoftwareToken = createVerifySoftwareTokenClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await verifySoftwareToken({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.VerifyTOTPSetup)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    UserCode: code,\n    FriendlyDeviceName: options?.friendlyDeviceName\n  });\n}\nexport { verifyTOTPSetup };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createChangePasswordClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ChangePassword'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createChangePasswordClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createChangePasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createChangePasswordClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Updates user's password while authenticated.\n *\n * @param input - The UpdatePasswordInput object.\n * @throws - {@link ChangePasswordException} - Cognito service errors thrown when updating a password.\n * @throws - {@link AuthValidationErrorCode} - Validation errors thrown when oldPassword or newPassword are empty.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function updatePassword(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    oldPassword,\n    newPassword\n  } = input;\n  assertValidationError(!!oldPassword, AuthValidationErrorCode.EmptyUpdatePassword);\n  assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyUpdatePassword);\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const changePassword = createChangePasswordClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await changePassword({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.UpdatePassword)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    PreviousPassword: oldPassword,\n    ProposedPassword: newPassword\n  });\n}\nexport { updatePassword };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { SETUP_TOTP_EXCEPTION } from '../types/errors.mjs';\nimport { getTOTPSetupDetails } from '../utils/signInHelpers.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport { createAssociateSoftwareTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Sets up TOTP for the user.\n *\n * @returns SetUpTOTPOutput\n * @throws -{@link AssociateSoftwareTokenException}\n * Thrown if a service occurs while setting up TOTP.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nasync function setUpTOTP() {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const username = tokens.idToken?.payload['cognito:username'] ?? '';\n  const associateSoftwareToken = createAssociateSoftwareTokenClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    SecretCode\n  } = await associateSoftwareToken({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SetUpTOTP)\n  }, {\n    AccessToken: tokens.accessToken.toString()\n  });\n  if (!SecretCode) {\n    // This should never happen.\n    throw new AuthError({\n      name: SETUP_TOTP_EXCEPTION,\n      message: 'Failed to set up TOTP.'\n    });\n  }\n  return getTOTPSetupDetails(SecretCode, JSON.stringify(username));\n}\nexport { setUpTOTP };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createUpdateUserAttributesClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('UpdateUserAttributes'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createUpdateUserAttributesClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { toAttributeType } from '../utils/apiHelpers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createUpdateUserAttributesClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateUserAttributesClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Updates user's attributes while authenticated.\n *\n * @param input - The UpdateUserAttributesInput object\n * @returns UpdateUserAttributesOutput\n * @throws - {@link UpdateUserAttributesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nconst updateUserAttributes = async input => {\n  const {\n    userAttributes,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const clientMetadata = options?.clientMetadata;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const updateUserAttributesClient = createUpdateUserAttributesClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    CodeDeliveryDetailsList\n  } = await updateUserAttributesClient({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.UpdateUserAttributes)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    ClientMetadata: clientMetadata,\n    UserAttributes: toAttributeType(userAttributes)\n  });\n  return {\n    ...getConfirmedAttributes(userAttributes),\n    ...getUnConfirmedAttributes(CodeDeliveryDetailsList)\n  };\n};\nfunction getConfirmedAttributes(attributes) {\n  const confirmedAttributes = {};\n  Object.keys(attributes)?.forEach(key => {\n    confirmedAttributes[key] = {\n      isUpdated: true,\n      nextStep: {\n        updateAttributeStep: 'DONE'\n      }\n    };\n  });\n  return confirmedAttributes;\n}\nfunction getUnConfirmedAttributes(codeDeliveryDetailsList) {\n  const unConfirmedAttributes = {};\n  codeDeliveryDetailsList?.forEach(codeDeliveryDetails => {\n    const {\n      AttributeName,\n      DeliveryMedium,\n      Destination\n    } = codeDeliveryDetails;\n    if (AttributeName) unConfirmedAttributes[AttributeName] = {\n      isUpdated: false,\n      nextStep: {\n        updateAttributeStep: 'CONFIRM_ATTRIBUTE_WITH_CODE',\n        codeDeliveryDetails: {\n          attributeName: AttributeName,\n          deliveryMedium: DeliveryMedium,\n          destination: Destination\n        }\n      }\n    };\n  });\n  return unConfirmedAttributes;\n}\nexport { updateUserAttributes };\n", "import { updateUserAttributes } from './updateUserAttributes.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Updates user's attribute while authenticated.\n *\n * @param input - The UpdateUserAttributeInput object\n * @returns UpdateUserAttributeOutput\n * @throws - {@link UpdateUserAttributesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nconst updateUserAttribute = async input => {\n  const {\n    userAttribute: {\n      attributeKey,\n      value\n    },\n    options\n  } = input;\n  const output = await updateUserAttributes({\n    userAttributes: {\n      [attributeKey]: value\n    },\n    options\n  });\n  return Object.values(output)[0];\n};\nexport { updateUserAttribute };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createVerifyUserAttributeClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('VerifyUserAttribute'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createVerifyUserAttributeClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createVerifyUserAttributeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createVerifyUserAttributeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms a user attribute with the confirmation code.\n *\n * @param input -  The ConfirmUserAttributeInput object\n * @throws  -{@link AuthValidationErrorCode } -\n * Thrown when `confirmationCode` is not defined.\n * @throws  -{@link VerifyUserAttributeException } - Thrown due to an invalid confirmation code or attribute.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmUserAttribute(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    confirmationCode,\n    userAttributeKey\n  } = input;\n  assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmUserAttributeCode);\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const verifyUserAttribute = createVerifyUserAttributeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await verifyUserAttribute({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmUserAttribute)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    AttributeName: userAttributeKey,\n    Code: confirmationCode\n  });\n}\nexport { confirmUserAttribute };\n", "import { ConsoleLogger } from '@aws-amplify/core';\nimport { AuthErrorStrings } from './common/AuthErrorStrings.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// TODO: delete this module when the Auth class is removed.\nconst logger = new ConsoleLogger('AuthError');\nclass AuthError extends Error {\n  constructor(type) {\n    const {\n      message,\n      log\n    } = authErrorMessages[type];\n    super(message);\n    // Hack for making the custom error class work when transpiled to es5\n    // TODO: Delete the following 2 lines after we change the build target to >= es2015\n    this.constructor = AuthError;\n    Object.setPrototypeOf(this, AuthError.prototype);\n    this.name = 'AuthError';\n    this.log = log || message;\n    logger.error(this.log);\n  }\n}\nclass NoUserPoolError extends AuthError {\n  constructor(type) {\n    super(type);\n    // Hack for making the custom error class work when transpiled to es5\n    // TODO: Delete the following 2 lines after we change the build target to >= es2015\n    this.constructor = NoUserPoolError;\n    Object.setPrototypeOf(this, NoUserPoolError.prototype);\n    this.name = 'NoUserPoolError';\n  }\n}\nconst authErrorMessages = {\n  oauthSignInError: {\n    message: AuthErrorStrings.OAUTH_ERROR,\n    log: 'Make sure Cognito Hosted UI has been configured correctly'\n  },\n  noConfig: {\n    message: AuthErrorStrings.DEFAULT_MSG,\n    log: `\n            Error: Amplify has not been configured correctly.\n            This error is typically caused by one of the following scenarios:\n\n            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point\n                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information\n            \n            2. There might be multiple conflicting versions of amplify packages in your node_modules.\n\t\t\t\tRefer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)\n        `\n  },\n  missingAuthConfig: {\n    message: AuthErrorStrings.DEFAULT_MSG,\n    log: `\n            Error: Amplify has not been configured correctly. \n            The configuration object is missing required auth properties.\n            This error is typically caused by one of the following scenarios:\n\n            1. Did you run \\`amplify push\\` after adding auth via \\`amplify add auth\\`?\n                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information\n\n            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.\n        `\n  },\n  emptyUsername: {\n    message: AuthErrorStrings.EMPTY_USERNAME\n  },\n  // TODO: should include a list of valid sign-in types\n  invalidUsername: {\n    message: AuthErrorStrings.INVALID_USERNAME\n  },\n  emptyPassword: {\n    message: AuthErrorStrings.EMPTY_PASSWORD\n  },\n  emptyCode: {\n    message: AuthErrorStrings.EMPTY_CODE\n  },\n  signUpError: {\n    message: AuthErrorStrings.SIGN_UP_ERROR,\n    log: 'The first parameter should either be non-null string or object'\n  },\n  noMFA: {\n    message: AuthErrorStrings.NO_MFA\n  },\n  invalidMFA: {\n    message: AuthErrorStrings.INVALID_MFA\n  },\n  emptyChallengeResponse: {\n    message: AuthErrorStrings.EMPTY_CHALLENGE\n  },\n  noUserSession: {\n    message: AuthErrorStrings.NO_USER_SESSION\n  },\n  deviceConfig: {\n    message: AuthErrorStrings.DEVICE_CONFIG\n  },\n  networkError: {\n    message: AuthErrorStrings.NETWORK_ERROR\n  },\n  autoSignInError: {\n    message: AuthErrorStrings.AUTOSIGNIN_ERROR\n  },\n  default: {\n    message: AuthErrorStrings.DEFAULT_MSG\n  }\n};\nexport { AuthError, NoUserPoolError, authErrorMessages };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar AuthErrorTypes;\n(function (AuthErrorTypes) {\n  AuthErrorTypes[\"NoConfig\"] = \"noConfig\";\n  AuthErrorTypes[\"MissingAuthConfig\"] = \"missingAuthConfig\";\n  AuthErrorTypes[\"EmptyUsername\"] = \"emptyUsername\";\n  AuthErrorTypes[\"InvalidUsername\"] = \"invalidUsername\";\n  AuthErrorTypes[\"EmptyPassword\"] = \"emptyPassword\";\n  AuthErrorTypes[\"EmptyCode\"] = \"emptyCode\";\n  AuthErrorTypes[\"SignUpError\"] = \"signUpError\";\n  AuthErrorTypes[\"NoMFA\"] = \"noMFA\";\n  AuthErrorTypes[\"InvalidMFA\"] = \"invalidMFA\";\n  AuthErrorTypes[\"EmptyChallengeResponse\"] = \"emptyChallengeResponse\";\n  AuthErrorTypes[\"NoUserSession\"] = \"noUserSession\";\n  AuthErrorTypes[\"Default\"] = \"default\";\n  AuthErrorTypes[\"DeviceConfig\"] = \"deviceConfig\";\n  AuthErrorTypes[\"NetworkError\"] = \"networkError\";\n  AuthErrorTypes[\"AutoSignInError\"] = \"autoSignInError\";\n  AuthErrorTypes[\"OAuthSignInError\"] = \"oauthSignInError\";\n})(AuthErrorTypes || (AuthErrorTypes = {}));\nexport { AuthErrorTypes };\n", "import { authErrorMessages } from '../../../../Errors.mjs';\nimport { AuthErrorCodes } from '../../../../common/AuthErrorStrings.mjs';\nimport { AuthError } from '../../../../errors/AuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createOAuthError = (message, recoverySuggestion) => new AuthError({\n  message: message ?? 'An error has occurred during the oauth process.',\n  name: AuthErrorCodes.OAuthSignInError,\n  recoverySuggestion: recoverySuggestion ?? authErrorMessages.oauthSignInError.log\n});\nexport { createOAuthError };\n", "import { AuthError } from '../../../../errors/AuthError.mjs';\nimport { AuthErrorTypes } from '../../../../types/Auth.mjs';\nimport { oAuthStore } from './oAuthStore.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst flowCancelledMessage = '`signInWithRedirect` has been canceled.';\nconst validationFailedMessage = 'An error occurred while validating the state.';\nconst validationRecoverySuggestion = 'Try to initiate an OAuth flow from Amplify';\nconst validateState = async state => {\n  const savedState = await oAuthStore.loadOAuthState();\n  // This is because savedState only exists if the flow was initiated by Amplify\n  const validatedState = state === savedState ? savedState : undefined;\n  if (!validatedState) {\n    throw new AuthError({\n      name: AuthErrorTypes.OAuthSignInError,\n      message: state === null ? flowCancelledMessage : validationFailedMessage,\n      recoverySuggestion: state === null ? undefined : validationRecoverySuggestion\n    });\n  }\n  return validatedState;\n};\nexport { flowCancelledMessage, validateState, validationFailedMessage, validationRecoverySuggestion };\n", "import { AmplifyUrl, USER_AGENT_HEADER, urlSafeDecode, AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nimport { decodeJWT, Hub } from '@aws-amplify/core';\nimport { cacheCognitoTokens } from '../../tokenProvider/cacheTokens.mjs';\nimport { dispatchSignedInHubEvent } from '../dispatchSignedInHubEvent.mjs';\nimport '../refreshAuthTokens.mjs';\nimport '../../tokenProvider/errorHelpers.mjs';\nimport { oAuthStore } from './oAuthStore.mjs';\nimport { resolveAndClearInflightPromises } from './inflightPromise.mjs';\nimport { tokenOrchestrator } from '../../tokenProvider/tokenProvider.mjs';\nimport { createOAuthError } from './createOAuthError.mjs';\nimport { validateState } from './validateState.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst completeOAuthFlow = async ({\n  currentUrl,\n  userAgentValue,\n  clientId,\n  redirectUri,\n  responseType,\n  domain,\n  preferPrivateSession\n}) => {\n  const urlParams = new AmplifyUrl(currentUrl);\n  const error = urlParams.searchParams.get('error');\n  const errorMessage = urlParams.searchParams.get('error_description');\n  if (error) {\n    throw createOAuthError(errorMessage ?? error);\n  }\n  if (responseType === 'code') {\n    return handleCodeFlow({\n      currentUrl,\n      userAgentValue,\n      clientId,\n      redirectUri,\n      domain,\n      preferPrivateSession\n    });\n  }\n  return handleImplicitFlow({\n    currentUrl,\n    redirectUri,\n    preferPrivateSession\n  });\n};\nconst handleCodeFlow = async ({\n  currentUrl,\n  userAgentValue,\n  clientId,\n  redirectUri,\n  domain,\n  preferPrivateSession\n}) => {\n  /* Convert URL into an object with parameters as keys\n  { redirect_uri: 'http://localhost:3000/', response_type: 'code', ...} */\n  const url = new AmplifyUrl(currentUrl);\n  const code = url.searchParams.get('code');\n  const state = url.searchParams.get('state');\n  // if `code` or `state` is not presented in the redirect url, most likely\n  // that the end user cancelled the inflight oauth flow by:\n  // 1. clicking the back button of browser\n  // 2. closing the provider hosted UI page and coming back to the app\n  if (!code || !state) {\n    throw createOAuthError('User cancelled OAuth flow.');\n  }\n  // may throw error is being caught in attemptCompleteOAuthFlow.ts\n  const validatedState = await validateState(state);\n  const oAuthTokenEndpoint = 'https://' + domain + '/oauth2/token';\n  // TODO(v6): check hub events\n  // dispatchAuthEvent(\n  // \t'codeFlow',\n  // \t{},\n  // \t`Retrieving tokens from ${oAuthTokenEndpoint}`\n  // );\n  const codeVerifier = await oAuthStore.loadPKCE();\n  const oAuthTokenBody = {\n    grant_type: 'authorization_code',\n    code,\n    client_id: clientId,\n    redirect_uri: redirectUri,\n    ...(codeVerifier ? {\n      code_verifier: codeVerifier\n    } : {})\n  };\n  const body = Object.entries(oAuthTokenBody).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('&');\n  const {\n    access_token,\n    refresh_token: refreshToken,\n    id_token,\n    error,\n    error_message: errorMessage,\n    token_type,\n    expires_in\n  } = await (await fetch(oAuthTokenEndpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      [USER_AGENT_HEADER]: userAgentValue\n    },\n    body\n  })).json();\n  if (error) {\n    // error is being caught in attemptCompleteOAuthFlow.ts\n    throw createOAuthError(errorMessage ?? error);\n  }\n  const username = (access_token && decodeJWT(access_token).payload.username) ?? 'username';\n  await cacheCognitoTokens({\n    username,\n    AccessToken: access_token,\n    IdToken: id_token,\n    RefreshToken: refreshToken\n  });\n  return completeFlow({\n    redirectUri,\n    state: validatedState,\n    preferPrivateSession\n  });\n};\nconst handleImplicitFlow = async ({\n  currentUrl,\n  redirectUri,\n  preferPrivateSession\n}) => {\n  // hash is `null` if `#` doesn't exist on URL\n  const url = new AmplifyUrl(currentUrl);\n  const {\n    id_token,\n    access_token,\n    state,\n    token_type,\n    expires_in,\n    error_description,\n    error\n  } = (url.hash ?? '#').substring(1) // Remove # from returned code\n  .split('&').map(pairings => pairings.split('=')).reduce((accum, [k, v]) => ({\n    ...accum,\n    [k]: v\n  }), {\n    id_token: undefined,\n    access_token: undefined,\n    state: undefined,\n    token_type: undefined,\n    expires_in: undefined,\n    error_description: undefined,\n    error: undefined\n  });\n  if (error) {\n    throw createOAuthError(error_description ?? error);\n  }\n  if (!access_token) {\n    // error is being caught in attemptCompleteOAuthFlow.ts\n    throw createOAuthError('No access token returned from OAuth flow.');\n  }\n  const validatedState = await validateState(state);\n  const username = (access_token && decodeJWT(access_token).payload.username) ?? 'username';\n  await cacheCognitoTokens({\n    username,\n    AccessToken: access_token,\n    IdToken: id_token\n  });\n  return completeFlow({\n    redirectUri,\n    state: validatedState,\n    preferPrivateSession\n  });\n};\nconst completeFlow = async ({\n  redirectUri,\n  state,\n  preferPrivateSession\n}) => {\n  await tokenOrchestrator.setOAuthMetadata({\n    oauthSignIn: true\n  });\n  await oAuthStore.clearOAuthData();\n  await oAuthStore.storeOAuthSignIn(true, preferPrivateSession);\n  // this should be called before any call that involves `fetchAuthSession`\n  // e.g. `getCurrentUser()` below, so it allows every inflight async calls to\n  //  `fetchAuthSession` can be resolved\n  resolveAndClearInflightPromises();\n  // clear history before sending out final Hub events\n  clearHistory(redirectUri);\n  if (isCustomState(state)) {\n    Hub.dispatch('auth', {\n      event: 'customOAuthState',\n      data: urlSafeDecode(getCustomState(state))\n    }, 'Auth', AMPLIFY_SYMBOL);\n  }\n  Hub.dispatch('auth', {\n    event: 'signInWithRedirect'\n  }, 'Auth', AMPLIFY_SYMBOL);\n  await dispatchSignedInHubEvent();\n};\nconst isCustomState = state => {\n  return /-/.test(state);\n};\nconst getCustomState = state => {\n  return state.split('-').splice(1).join('-');\n};\nconst clearHistory = redirectUri => {\n  if (typeof window !== 'undefined' && typeof window.history !== 'undefined') {\n    window.history.replaceState(window.history.state, '', redirectUri);\n  }\n};\nexport { completeOAuthFlow };\n", "import { invalidOriginException, invalidRedirectException, invalidPreferredRedirectUrlException } from '../../../../errors/constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/** @internal */\nfunction getRedirectUrl(redirects, preferredRedirectUrl) {\n  if (preferredRedirectUrl) {\n    const redirectUrl = redirects?.find(redirect => redirect === preferredRedirectUrl);\n    if (!redirectUrl) {\n      throw invalidPreferredRedirectUrlException;\n    }\n    return redirectUrl;\n  } else {\n    const redirectUrlFromTheSameOrigin = redirects?.find(isSameOriginAndPathName) ?? redirects?.find(isTheSameDomain);\n    const redirectUrlFromDifferentOrigin = redirects?.find(isHttps) ?? redirects?.find(isHttp);\n    if (redirectUrlFromTheSameOrigin) {\n      return redirectUrlFromTheSameOrigin;\n    } else if (redirectUrlFromDifferentOrigin) {\n      throw invalidOriginException;\n    }\n    throw invalidRedirectException;\n  }\n}\n// origin + pathname => https://example.com/app\nconst isSameOriginAndPathName = redirect => redirect.startsWith(String(window.location.origin + (window.location.pathname || '/')));\n// domain => outlook.live.com, github.com\nconst isTheSameDomain = redirect => redirect.includes(String(window.location.hostname));\nconst isHttp = redirect => redirect.startsWith('http://');\nconst isHttps = redirect => redirect.startsWith('https://');\nexport { getRedirectUrl };\n", "import { Hub } from '@aws-amplify/core';\nimport { AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nimport { oAuthStore } from './oAuthStore.mjs';\nimport { resolveAndClearInflightPromises } from './inflightPromise.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst handleFailure = async error => {\n  resolveAndClearInflightPromises();\n  await oAuthStore.clearOAuthInflightData();\n  Hub.dispatch('auth', {\n    event: 'signInWithRedirect_failure',\n    data: {\n      error\n    }\n  }, 'Auth', AMPLIFY_SYMBOL);\n};\nexport { handleFailure };\n", "import { assertTokenProviderConfig, assertOAuthConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getAuthUserAgentValue } from '../../../../utils/getAuthUserAgentValue.mjs';\nimport { oAuthStore } from './oAuthStore.mjs';\nimport { completeOAuthFlow } from './completeOAuthFlow.mjs';\nimport { getRedirectUrl } from './getRedirectUrl.mjs';\nimport { handleFailure } from './handleFailure.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst attemptCompleteOAuthFlow = async authConfig => {\n  try {\n    assertTokenProviderConfig(authConfig);\n    assertOAuthConfig(authConfig);\n    oAuthStore.setAuthConfig(authConfig);\n  } catch (_) {\n    // no-op\n    // This should not happen as Amplify singleton checks the oauth config key\n    // unless the oauth config object doesn't contain required properties\n    return;\n  }\n  // No inflight OAuth\n  if (!(await oAuthStore.loadOAuthInFlight())) {\n    return;\n  }\n  try {\n    const currentUrl = window.location.href;\n    const {\n      loginWith,\n      userPoolClientId\n    } = authConfig;\n    const {\n      domain,\n      redirectSignIn,\n      responseType\n    } = loginWith.oauth;\n    const redirectUri = getRedirectUrl(redirectSignIn);\n    await completeOAuthFlow({\n      currentUrl,\n      clientId: userPoolClientId,\n      domain,\n      redirectUri,\n      responseType,\n      userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect)\n    });\n  } catch (err) {\n    await handleFailure(err);\n  }\n};\nexport { attemptCompleteOAuthFlow };\n", "import { Amplify } from '@aws-amplify/core';\nimport { isBrowser, ADD_OAUTH_LISTENER } from '@aws-amplify/core/internals/utils';\nimport { attemptCompleteOAuthFlow } from './attemptCompleteOAuthFlow.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// attach the side effect for handling the completion of an inflight oauth flow\n// this side effect works only on Web\nisBrowser() && (() => {\n  // add the listener to the singleton for triggering\n  Amplify[ADD_OAUTH_LISTENER](attemptCompleteOAuthFlow);\n})();\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst cognitoHostedUIIdentityProviderMap = {\n  Google: 'Google',\n  Facebook: 'Facebook',\n  Amazon: 'LoginWithAmazon',\n  Apple: 'SignInWithApple'\n};\nexport { cognitoHostedUIIdentityProviderMap };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst openAuthSession = async url => {\n  if (!window?.location) {\n    return;\n  }\n  // enforce HTTPS\n  window.location.href = url.replace('http://', 'https://');\n};\nexport { openAuthSession };\n", "import { Sha256 } from '@aws-crypto/sha256-js';\nimport { getCrypto, base64Encoder } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst CODE_VERIFIER_CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n/**\n *\n * @param length Desired length of the code verifier.\n *\n * **NOTE:** According to the [RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636#section-4.1)\n * A code verifier must be with a length >= 43 and <= 128.\n *\n * @returns An object that contains the generated `codeVerifier` and a method\n * `toCodeChallenge` to generate the code challenge from the `codeVerifier`\n * following the spec of [RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2).\n */\nconst generateCodeVerifier = length => {\n  const randomBytes = new Uint8Array(length);\n  getCrypto().getRandomValues(randomBytes);\n  let value = '';\n  let codeChallenge;\n  for (const byte of randomBytes) {\n    value += CODE_VERIFIER_CHARSET.charAt(byte % CODE_VERIFIER_CHARSET.length);\n  }\n  return {\n    value,\n    method: 'S256',\n    toCodeChallenge() {\n      if (codeChallenge) {\n        return codeChallenge;\n      }\n      codeChallenge = generateCodeChallenge(value);\n      return codeChallenge;\n    }\n  };\n};\nfunction generateCodeChallenge(codeVerifier) {\n  const awsCryptoHash = new Sha256();\n  awsCryptoHash.update(codeVerifier);\n  const codeChallenge = removePaddingChar(base64Encoder.convert(awsCryptoHash.digestSync(), {\n    urlSafe: true\n  }));\n  return codeChallenge;\n}\nfunction removePaddingChar(base64Encoded) {\n  return base64Encoded.replace(/=/g, '');\n}\nexport { generateCodeVerifier };\n", "import { generateRandomString } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst generateState = () => {\n  return generateRandomString(32);\n};\nexport { generateState };\n", "import { createOAuthError } from './createOAuthError.mjs';\nimport { handleFailure } from './handleFailure.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst listenForOAuthFlowCancellation = store => {\n  async function handleCancelOAuthFlow(event) {\n    const isBfcache = event.persisted;\n    if (isBfcache && (await store.loadOAuthInFlight())) {\n      const error = createOAuthError('User cancelled OAuth flow.');\n      await handleFailure(error);\n    }\n    window.removeEventListener('pageshow', handleCancelOAuthFlow);\n  }\n  window.addEventListener('pageshow', handleCancelOAuthFlow);\n};\nexport { listenForOAuthFlowCancellation };\n", "import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, urlSafeEncode, isBrowser, AuthAction } from '@aws-amplify/core/internals/utils';\nimport '../utils/oauth/enableOAuthListener.mjs';\nimport { cognitoHostedUIIdentityProviderMap } from '../types/models.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { openAuthSession } from '../../../utils/openAuthSession.mjs';\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers.mjs';\nimport { generateCodeVerifier } from '../utils/oauth/generateCodeVerifier.mjs';\nimport { generateState } from '../utils/oauth/generateState.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { oAuthStore } from '../utils/oauth/oAuthStore.mjs';\nimport '../tokenProvider/tokenProvider.mjs';\nimport { getRedirectUrl } from '../utils/oauth/getRedirectUrl.mjs';\nimport { handleFailure } from '../utils/oauth/handleFailure.mjs';\nimport { completeOAuthFlow } from '../utils/oauth/completeOAuthFlow.mjs';\nimport '../../../types/Auth.mjs';\nimport { createOAuthError } from '../utils/oauth/createOAuthError.mjs';\nimport { listenForOAuthFlowCancellation } from '../utils/oauth/cancelOAuthFlow.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs in a user with OAuth. Redirects the application to an Identity Provider.\n *\n * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI\n *\n * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.\n * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.\n */\nasync function signInWithRedirect(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  assertOAuthConfig(authConfig);\n  oAuthStore.setAuthConfig(authConfig);\n  await assertUserNotAuthenticated();\n  let provider = 'COGNITO'; // Default\n  if (typeof input?.provider === 'string') {\n    provider = cognitoHostedUIIdentityProviderMap[input.provider];\n  } else if (input?.provider?.custom) {\n    provider = input.provider.custom;\n  }\n  return oauthSignIn({\n    oauthConfig: authConfig.loginWith.oauth,\n    clientId: authConfig.userPoolClientId,\n    provider,\n    customState: input?.customState,\n    preferPrivateSession: input?.options?.preferPrivateSession,\n    options: {\n      loginHint: input?.options?.loginHint,\n      lang: input?.options?.lang,\n      nonce: input?.options?.nonce\n    }\n  });\n}\nconst oauthSignIn = async ({\n  oauthConfig,\n  provider,\n  clientId,\n  customState,\n  preferPrivateSession,\n  options\n}) => {\n  const {\n    domain,\n    redirectSignIn,\n    responseType,\n    scopes\n  } = oauthConfig;\n  const {\n    loginHint,\n    lang,\n    nonce\n  } = options ?? {};\n  const randomState = generateState();\n  /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n  single-encodes/decodes url on first sign in and double-encodes/decodes url\n  when user already signed in. Using encodeURIComponent, Base32, Base64 add\n  characters % or = which on further encoding becomes unsafe. '=' create issue\n  for parsing query params.\n  Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n  const state = customState ? `${randomState}-${urlSafeEncode(customState)}` : randomState;\n  const {\n    value,\n    method,\n    toCodeChallenge\n  } = generateCodeVerifier(128);\n  const redirectUri = getRedirectUrl(oauthConfig.redirectSignIn);\n  if (isBrowser()) oAuthStore.storeOAuthInFlight(true);\n  oAuthStore.storeOAuthState(state);\n  oAuthStore.storePKCE(value);\n  const queryString = Object.entries({\n    redirect_uri: redirectUri,\n    response_type: responseType,\n    client_id: clientId,\n    identity_provider: provider,\n    scope: scopes.join(' '),\n    // eslint-disable-next-line camelcase\n    ...(loginHint && {\n      login_hint: loginHint\n    }),\n    ...(lang && {\n      lang\n    }),\n    ...(nonce && {\n      nonce\n    }),\n    state,\n    ...(responseType === 'code' && {\n      code_challenge: toCodeChallenge(),\n      code_challenge_method: method\n    })\n  }).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('&');\n  // TODO(v6): use URL object instead\n  const oAuthUrl = `https://${domain}/oauth2/authorize?${queryString}`;\n  // this will only take effect in the following scenarios:\n  // 1. the user cancels the OAuth flow on web via back button, and\n  // 2. when bfcache is enabled\n  listenForOAuthFlowCancellation(oAuthStore);\n  // the following is effective only in react-native as openAuthSession resolves only in react-native\n  const {\n    type,\n    error,\n    url\n  } = (await openAuthSession(oAuthUrl)) ?? {};\n  try {\n    if (type === 'error') {\n      throw createOAuthError(String(error));\n    }\n    if (type === 'success' && url) {\n      await completeOAuthFlow({\n        currentUrl: url,\n        clientId,\n        domain,\n        redirectUri,\n        responseType,\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n        preferPrivateSession\n      });\n    }\n  } catch (err) {\n    await handleFailure(err);\n    // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native\n    throw err;\n  }\n};\nexport { signInWithRedirect };\n", "import { assertTokenProviderConfig, fetchAuthSession, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../../utils/types.mjs';\nimport { toAuthUserAttribute } from '../../utils/apiHelpers.mjs';\nimport { getAuthUserAgentValue } from '../../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../../common/AuthErrorStrings.mjs';\nimport '../../../../errors/types/validation.mjs';\nimport '../../types/errors.mjs';\nimport { createGetUserClient } from '../../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst fetchUserAttributes = async amplify => {\n  const authConfig = amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession(amplify, {\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const getUser = createGetUserClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    UserAttributes\n  } = await getUser({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.FetchUserAttributes)\n  }, {\n    AccessToken: tokens.accessToken.toString()\n  });\n  return toAuthUserAttribute(UserAttributes);\n};\nexport { fetchUserAttributes };\n", "import { Amplify } from '@aws-amplify/core';\nimport { fetchUserAttributes as fetchUserAttributes$1 } from './internal/fetchUserAttributes.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Fetches the current user attributes while authenticated.\n *\n * @throws - {@link GetUserException} - Cognito service errors thrown when the service is not able to get the user.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nconst fetchUserAttributes = () => {\n  return fetchUserAttributes$1(Amplify);\n};\nexport { fetchUserAttributes };\n", "import { clearCredentials, Hub } from '@aws-amplify/core';\nimport { AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nimport '../refreshAuthTokens.mjs';\nimport '../../tokenProvider/errorHelpers.mjs';\nimport '../types.mjs';\nimport { tokenOrchestrator } from '../../tokenProvider/tokenProvider.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst completeOAuthSignOut = async store => {\n  await store.clearOAuthData();\n  tokenOrchestrator.clearTokens();\n  await clearCredentials();\n  Hub.dispatch('auth', {\n    event: 'signedOut'\n  }, 'Auth', AMPLIFY_SYMBOL);\n};\nexport { completeOAuthSignOut };\n", "import { assertOAuthConfig } from '@aws-amplify/core/internals/utils';\nimport { openAuthSession } from '../../../../utils/openAuthSession.mjs';\nimport { getRedirectUrl } from './getRedirectUrl.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst oAuthSignOutRedirect = async (authConfig, preferPrivateSession = false, redirectUrl) => {\n  assertOAuthConfig(authConfig);\n  const {\n    loginWith,\n    userPoolClientId\n  } = authConfig;\n  const {\n    domain,\n    redirectSignOut\n  } = loginWith.oauth;\n  const signoutUri = getRedirectUrl(redirectSignOut, redirectUrl);\n  const oAuthLogoutEndpoint = `https://${domain}/logout?${Object.entries({\n    client_id: userPoolClientId,\n    logout_uri: encodeURIComponent(signoutUri)\n  }).map(([k, v]) => `${k}=${v}`).join('&')}`;\n  return openAuthSession(oAuthLogoutEndpoint);\n};\nexport { oAuthSignOutRedirect };\n", "import { completeOAuthSignOut } from './completeOAuthSignOut.mjs';\nimport { oAuthSignOutRedirect } from './oAuthSignOutRedirect.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst handleOAuthSignOut = async (cognitoConfig, store, tokenOrchestrator, redirectUrl) => {\n  const {\n    isOAuthSignIn\n  } = await store.loadOAuthSignIn();\n  const oauthMetadata = await tokenOrchestrator.getOAuthMetadata();\n  // Clear everything before attempting to visted logout endpoint since the current application\n  // state could be wiped away on redirect\n  await completeOAuthSignOut(store);\n  // The isOAuthSignIn flag is propagated by the oAuthToken store which manages oauth keys in local storage only.\n  // These keys are used to determine if a user is in an inflight or signedIn oauth states.\n  // However, this behavior represents an issue when 2 apps share the same set of tokens in Cookie storage because the app that didn't\n  // start the OAuth will not have access to the oauth keys.\n  // A heuristic solution is to add oauth metadata to the tokenOrchestrator which will have access to the underlying\n  // storage mechanism that is used by Amplify.\n  if (isOAuthSignIn || oauthMetadata?.oauthSignIn) {\n    // On web, this will always end up being a void action\n    return oAuthSignOutRedirect(cognitoConfig, false, redirectUrl);\n  }\n};\nexport { handleOAuthSignOut };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createRevokeTokenClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('RevokeToken'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createRevokeTokenClient };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createGlobalSignOutClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('GlobalSignOut'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createGlobalSignOutClient };\n", "import { ConsoleLogger, Amplify, clearCredentials, Hub, defaultStorage } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, AMPLIFY_SYMBOL, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { DefaultOAuthStore } from '../utils/signInWithRedirectStore.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens, assertAuthTokensWithRefreshToken } from '../utils/types.mjs';\nimport '@aws-crypto/sha256-js';\nimport { handleOAuthSignOut } from '../utils/oauth/handleOAuthSignOut.mjs';\nimport { OAUTH_SIGNOUT_EXCEPTION } from '../../../errors/constants.mjs';\nimport '../../../Errors.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../types/Auth.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport { createRevokeTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRevokeTokenClient.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createGlobalSignOutClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGlobalSignOutClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('Auth');\n/**\n * Signs a user out\n *\n * @param input - The SignOutInput object\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signOut(input) {\n  const cognitoConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(cognitoConfig);\n  if (input?.global) {\n    await globalSignOut(cognitoConfig);\n  } else {\n    await clientSignOut(cognitoConfig);\n  }\n  let hasOAuthConfig;\n  try {\n    assertOAuthConfig(cognitoConfig);\n    hasOAuthConfig = true;\n  } catch (err) {\n    hasOAuthConfig = false;\n  }\n  if (hasOAuthConfig) {\n    const oAuthStore = new DefaultOAuthStore(defaultStorage);\n    oAuthStore.setAuthConfig(cognitoConfig);\n    const {\n      type\n    } = (await handleOAuthSignOut(cognitoConfig, oAuthStore, tokenOrchestrator, input?.oauth?.redirectUrl)) ?? {};\n    if (type === 'error') {\n      throw new AuthError({\n        name: OAUTH_SIGNOUT_EXCEPTION,\n        message: `An error occurred when attempting to log out from OAuth provider.`\n      });\n    }\n  } else {\n    // complete sign out\n    tokenOrchestrator.clearTokens();\n    await clearCredentials();\n    Hub.dispatch('auth', {\n      event: 'signedOut'\n    }, 'Auth', AMPLIFY_SYMBOL);\n  }\n}\nasync function clientSignOut(cognitoConfig) {\n  try {\n    const {\n      userPoolEndpoint,\n      userPoolId,\n      userPoolClientId\n    } = cognitoConfig;\n    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n    assertAuthTokensWithRefreshToken(authTokens);\n    if (isSessionRevocable(authTokens.accessToken)) {\n      const revokeToken = createRevokeTokenClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n          endpointOverride: userPoolEndpoint\n        })\n      });\n      await revokeToken({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)\n      }, {\n        ClientId: userPoolClientId,\n        Token: authTokens.refreshToken\n      });\n    }\n  } catch (err) {\n    // this shouldn't throw\n    logger.debug('Client signOut error caught but will proceed with token removal');\n  }\n}\nasync function globalSignOut(cognitoConfig) {\n  try {\n    const {\n      userPoolEndpoint,\n      userPoolId\n    } = cognitoConfig;\n    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n    assertAuthTokens(authTokens);\n    const globalSignOutClient = createGlobalSignOutClient({\n      endpointResolver: createCognitoUserPoolEndpointResolver({\n        endpointOverride: userPoolEndpoint\n      })\n    });\n    await globalSignOutClient({\n      region: getRegionFromUserPoolId(userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)\n    }, {\n      AccessToken: authTokens.accessToken.toString()\n    });\n  } catch (err) {\n    // it should not throw\n    logger.debug('Global signOut error caught but will proceed with token removal');\n  }\n}\nconst isSessionRevocable = token => !!token?.payload?.origin_jti;\nexport { signOut };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createGetUserAttributeVerificationCodeClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('GetUserAttributeVerificationCode'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createGetUserAttributeVerificationCodeClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createGetUserAttributeVerificationCodeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserAttributeVerificationCodeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resends user's confirmation code when updating attributes while authenticated.\n *\n * @param input - The SendUserAttributeVerificationCodeInput object\n * @returns SendUserAttributeVerificationCodeOutput\n * @throws - {@link GetUserAttributeVerificationException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nconst sendUserAttributeVerificationCode = async input => {\n  const {\n    userAttributeKey,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const clientMetadata = options?.clientMetadata;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const getUserAttributeVerificationCode = createGetUserAttributeVerificationCodeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    CodeDeliveryDetails\n  } = await getUserAttributeVerificationCode({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SendUserAttributeVerificationCode)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    ClientMetadata: clientMetadata,\n    AttributeName: userAttributeKey\n  });\n  const {\n    DeliveryMedium,\n    AttributeName,\n    Destination\n  } = {\n    ...CodeDeliveryDetails\n  };\n  return {\n    destination: Destination,\n    deliveryMedium: DeliveryMedium,\n    attributeName: AttributeName\n  };\n};\nexport { sendUserAttributeVerificationCode };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createDeleteUserAttributesClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('DeleteUserAttributes'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createDeleteUserAttributesClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createDeleteUserAttributesClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createDeleteUserAttributesClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Deletes user attributes.\n *\n * @param input -  The DeleteUserAttributesInput object\n * @throws  -{@link DeleteUserAttributesException } - Thrown due to invalid attribute.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function deleteUserAttributes(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userAttributeKeys\n  } = input;\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const deleteUserAttributesClient = createDeleteUserAttributesClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await deleteUserAttributesClient({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.DeleteUserAttributes)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    UserAttributeNames: userAttributeKeys\n  });\n}\nexport { deleteUserAttributes };\n", "import { parseJsonError } from '@aws-amplify/core/internals/aws-client-utils';\nimport { assertServiceError } from '../../../../../../errors/utils/assertServiceError.mjs';\nimport { AuthError } from '../../../../../../errors/AuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createEmptyResponseDeserializer = () => async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseJsonError(response);\n    assertServiceError(error);\n    throw new AuthError({\n      name: error.name,\n      message: error.message\n    });\n  } else {\n    return undefined;\n  }\n};\nexport { createEmptyResponseDeserializer };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { createEmptyResponseDeserializer } from './shared/serde/createEmptyResponseDeserializer.mjs';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createDeleteUserClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('DeleteUser'), createEmptyResponseDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createDeleteUserClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createDeleteUserClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createDeleteUserClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { signOut } from './signOut.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Deletes a user from the user pool while authenticated.\n *\n * @throws - {@link DeleteUserException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function deleteUser() {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  const serviceDeleteUser = createDeleteUserClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await serviceDeleteUser({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.DeleteUser)\n  }, {\n    AccessToken: tokens.accessToken.toString()\n  });\n  await tokenOrchestrator.clearDeviceMetadata();\n  await signOut();\n}\nexport { deleteUser };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createUpdateDeviceStatusClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('UpdateDeviceStatus'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createUpdateDeviceStatusClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens, assertDeviceMetadata } from '../utils/types.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createUpdateDeviceStatusClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateDeviceStatusClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Marks device as remembered while authenticated.\n *\n * @throws - {@link UpdateDeviceStatusException} - Cognito service errors thrown when\n * setting device status to remembered using an invalid device key.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function rememberDevice() {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata();\n  assertDeviceMetadata(deviceMetadata);\n  const updateDeviceStatus = createUpdateDeviceStatusClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await updateDeviceStatus({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.RememberDevice)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    DeviceKey: deviceMetadata.deviceKey,\n    DeviceRememberedStatus: 'remembered'\n  });\n}\nexport { rememberDevice };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { createEmptyResponseDeserializer } from './shared/serde/createEmptyResponseDeserializer.mjs';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createForgetDeviceClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ForgetDevice'), createEmptyResponseDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createForgetDeviceClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens, assertDeviceMetadata } from '../utils/types.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createForgetDeviceClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createForgetDeviceClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Forget a remembered device while authenticated.\n *\n * @param input - The ForgetDeviceInput object.\n * @throws - {@link ForgetDeviceException} - Cognito service errors thrown when\n * forgetting device with invalid device key\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function forgetDevice(input) {\n  const {\n    device: {\n      id: externalDeviceKey\n    } = {\n      id: undefined\n    }\n  } = input ?? {};\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata();\n  const currentDeviceKey = deviceMetadata?.deviceKey;\n  if (!externalDeviceKey) assertDeviceMetadata(deviceMetadata);\n  const serviceForgetDevice = createForgetDeviceClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await serviceForgetDevice({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ForgetDevice)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    DeviceKey: externalDeviceKey ?? currentDeviceKey\n  });\n  if (!externalDeviceKey || externalDeviceKey === currentDeviceKey) await tokenOrchestrator.clearDeviceMetadata();\n}\nexport { forgetDevice };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createListDevicesClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ListDevices'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createListDevicesClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createListDevicesClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createListDevicesClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Cognito Documentation for max device\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nconst MAX_DEVICES = 60;\n/**\n * Fetches devices that have been remembered using {@link rememberDevice}\n * for the currently authenticated user.\n *\n * @returns FetchDevicesOutput\n * @throws {@link ListDevicesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function fetchDevices() {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  const listDevices = createListDevicesClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await listDevices({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.FetchDevices)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    Limit: MAX_DEVICES\n  });\n  return parseDevicesResponse(response.Devices ?? []);\n}\nconst parseDevicesResponse = async devices => {\n  return devices.map(({\n    DeviceKey: id = '',\n    DeviceAttributes = [],\n    DeviceCreateDate,\n    DeviceLastModifiedDate,\n    DeviceLastAuthenticatedDate\n  }) => {\n    let deviceName;\n    const attributes = DeviceAttributes.reduce((attrs, {\n      Name,\n      Value\n    }) => {\n      if (Name && Value) {\n        if (Name === 'device_name') deviceName = Value;\n        attrs[Name] = Value;\n      }\n      return attrs;\n    }, {});\n    const result = {\n      id,\n      name: deviceName,\n      attributes,\n      createDate: DeviceCreateDate ? new Date(DeviceCreateDate * 1000) : undefined,\n      lastModifiedDate: DeviceLastModifiedDate ? new Date(DeviceLastModifiedDate * 1000) : undefined,\n      lastAuthenticatedDate: DeviceLastAuthenticatedDate ? new Date(DeviceLastAuthenticatedDate * 1000) : undefined\n    };\n    return result;\n  });\n};\nexport { fetchDevices };\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst IdentityIdStorageKeys = {\n  identityId: 'identityId'\n};\nexport { IdentityIdStorageKeys };\n", "import { ConsoleLogger } from '@aws-amplify/core';\nimport { assertIdentityPoolIdConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore.mjs';\nimport { IdentityIdStorageKeys } from './types.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('DefaultIdentityIdStore');\nclass DefaultIdentityIdStore {\n  setAuthConfig(authConfigParam) {\n    assertIdentityPoolIdConfig(authConfigParam.Cognito);\n    this.authConfig = authConfigParam;\n    this._authKeys = createKeysForAuthStorage('Cognito', authConfigParam.Cognito.identityPoolId);\n  }\n  constructor(keyValueStorage) {\n    this._authKeys = {};\n    this._hasGuestIdentityId = false;\n    this.keyValueStorage = keyValueStorage;\n  }\n  async loadIdentityId() {\n    assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n    try {\n      if (this._primaryIdentityId) {\n        return {\n          id: this._primaryIdentityId,\n          type: 'primary'\n        };\n      } else {\n        const storedIdentityId = await this.keyValueStorage.getItem(this._authKeys.identityId);\n        if (storedIdentityId) {\n          this._hasGuestIdentityId = true;\n          return {\n            id: storedIdentityId,\n            type: 'guest'\n          };\n        }\n        return null;\n      }\n    } catch (err) {\n      logger.log('Error getting stored IdentityId.', err);\n      return null;\n    }\n  }\n  async storeIdentityId(identity) {\n    assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n    if (identity.type === 'guest') {\n      this.keyValueStorage.setItem(this._authKeys.identityId, identity.id);\n      // Clear in-memory storage of primary identityId\n      this._primaryIdentityId = undefined;\n      this._hasGuestIdentityId = true;\n    } else {\n      this._primaryIdentityId = identity.id;\n      // Clear locally stored guest id\n      if (this._hasGuestIdentityId) {\n        this.keyValueStorage.removeItem(this._authKeys.identityId);\n        this._hasGuestIdentityId = false;\n      }\n    }\n  }\n  async clearIdentityId() {\n    this._primaryIdentityId = undefined;\n    await this.keyValueStorage.removeItem(this._authKeys.identityId);\n  }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n  return getAuthStorageKeys(IdentityIdStorageKeys)(`com.amplify.${provider}`, identifier);\n};\nexport { DefaultIdentityIdStore };\n", "import { cognitoIdentityPoolEndpointResolver } from '@aws-amplify/core';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createCognitoIdentityPoolEndpointResolver = ({\n  endpointOverride\n}) => input => {\n  if (endpointOverride) {\n    return {\n      url: new AmplifyUrl(endpointOverride)\n    };\n  }\n  return cognitoIdentityPoolEndpointResolver(input);\n};\nexport { createCognitoIdentityPoolEndpointResolver };\n", "import { decodeJWT } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction formLoginsMap(idToken) {\n  const issuer = decodeJWT(idToken).payload.iss;\n  const res = {};\n  if (!issuer) {\n    throw new AuthError({\n      name: 'InvalidIdTokenException',\n      message: 'Invalid Idtoken.'\n    });\n  }\n  const domainName = issuer.replace(/(^\\w+:|^)\\/\\//, '');\n  res[domainName] = idToken;\n  return res;\n}\nexport { formLoginsMap };\n", "import { createGetIdClient } from '@aws-amplify/core';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { getRegionFromIdentityPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport { createCognitoIdentityPoolEndpointResolver } from '../factories/createCognitoIdentityPoolEndpointResolver.mjs';\nimport { formLoginsMap } from './utils.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Provides a Cognito identityId\n *\n * @param tokens - The AuthTokens received after SignIn\n * @returns string\n * @throws configuration exceptions: `InvalidIdentityPoolIdException`\n *  - Auth errors that may arise from misconfiguration.\n * @throws service exceptions: {@link GetIdException }\n */\nasync function cognitoIdentityIdProvider({\n  tokens,\n  authConfig,\n  identityIdStore\n}) {\n  identityIdStore.setAuthConfig({\n    Cognito: authConfig\n  });\n  // will return null only if there is no identityId cached or if there is an error retrieving it\n  const identityId = await identityIdStore.loadIdentityId();\n  if (identityId) {\n    return identityId.id;\n  }\n  const logins = tokens?.idToken ? formLoginsMap(tokens.idToken.toString()) : {};\n  const generatedIdentityId = await generateIdentityId(logins, authConfig);\n  // Store generated identityId\n  identityIdStore.storeIdentityId({\n    id: generatedIdentityId,\n    type: tokens ? 'primary' : 'guest'\n  });\n  return generatedIdentityId;\n}\nasync function generateIdentityId(logins, authConfig) {\n  const identityPoolId = authConfig?.identityPoolId;\n  const region = getRegionFromIdentityPoolId(identityPoolId);\n  const getId = createGetIdClient({\n    endpointResolver: createCognitoIdentityPoolEndpointResolver({\n      endpointOverride: authConfig.identityPoolEndpoint\n    })\n  });\n  // IdentityId is absent so get it using IdentityPoolId with Cognito's GetId API\n  let idResult;\n  // for a first-time user, this will return a brand new identity\n  // for a returning user, this will retrieve the previous identity assocaited with the logins\n  try {\n    idResult = (await getId({\n      region\n    }, {\n      IdentityPoolId: identityPoolId,\n      Logins: logins\n    })).IdentityId;\n  } catch (e) {\n    assertServiceError(e);\n    throw new AuthError(e);\n  }\n  if (!idResult) {\n    throw new AuthError({\n      name: 'GetIdResponseException',\n      message: 'Received undefined response from getId operation',\n      recoverySuggestion: 'Make sure to pass a valid identityPoolId in the configuration.'\n    });\n  }\n  return idResult;\n}\nexport { cognitoIdentityIdProvider };\n", "import { ConsoleLogger, createGetCredentialsForIdentityClient } from '@aws-amplify/core';\nimport { assertIdentityPoolIdConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { getRegionFromIdentityPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertIdTokenInAuthTokens } from '../utils/types.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport { createCognitoIdentityPoolEndpointResolver } from '../factories/createCognitoIdentityPoolEndpointResolver.mjs';\nimport { cognitoIdentityIdProvider } from './IdentityIdProvider.mjs';\nimport { formLoginsMap } from './utils.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('CognitoCredentialsProvider');\nconst CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nclass CognitoAWSCredentialsAndIdentityIdProvider {\n  constructor(identityIdStore) {\n    this._nextCredentialsRefresh = 0;\n    this._identityIdStore = identityIdStore;\n  }\n  async clearCredentialsAndIdentityId() {\n    logger.debug('Clearing out credentials and identityId');\n    this._credentialsAndIdentityId = undefined;\n    await this._identityIdStore.clearIdentityId();\n  }\n  async clearCredentials() {\n    logger.debug('Clearing out in-memory credentials');\n    this._credentialsAndIdentityId = undefined;\n  }\n  async getCredentialsAndIdentityId(getCredentialsOptions) {\n    const isAuthenticated = getCredentialsOptions.authenticated;\n    const {\n      tokens\n    } = getCredentialsOptions;\n    const {\n      authConfig\n    } = getCredentialsOptions;\n    try {\n      assertIdentityPoolIdConfig(authConfig?.Cognito);\n    } catch {\n      // No identity pool configured, skipping\n      return;\n    }\n    if (!isAuthenticated && !authConfig.Cognito.allowGuestAccess) {\n      // TODO(V6): return partial result like Native platforms\n      return;\n    }\n    const {\n      forceRefresh\n    } = getCredentialsOptions;\n    const tokenHasChanged = this.hasTokenChanged(tokens);\n    const identityId = await cognitoIdentityIdProvider({\n      tokens,\n      authConfig: authConfig.Cognito,\n      identityIdStore: this._identityIdStore\n    });\n    // Clear cached credentials when forceRefresh is true OR the cache token has changed\n    if (forceRefresh || tokenHasChanged) {\n      this.clearCredentials();\n    }\n    if (!isAuthenticated) {\n      return this.getGuestCredentials(identityId, authConfig.Cognito);\n    } else {\n      assertIdTokenInAuthTokens(tokens);\n      return this.credsForOIDCTokens(authConfig.Cognito, tokens, identityId);\n    }\n  }\n  async getGuestCredentials(identityId, authConfig) {\n    // Return existing in-memory cached credentials only if it exists, is not past it's lifetime and is unauthenticated credentials\n    if (this._credentialsAndIdentityId && !this.isPastTTL() && this._credentialsAndIdentityId.isAuthenticatedCreds === false) {\n      logger.info('returning stored credentials as they neither past TTL nor expired.');\n      return this._credentialsAndIdentityId;\n    }\n    // Clear to discard if any authenticated credentials are set and start with a clean slate\n    this.clearCredentials();\n    const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);\n    const getCredentialsForIdentity = createGetCredentialsForIdentityClient({\n      endpointResolver: createCognitoIdentityPoolEndpointResolver({\n        endpointOverride: authConfig.identityPoolEndpoint\n      })\n    });\n    // use identityId to obtain guest credentials\n    // save credentials in-memory\n    // No logins params should be passed for guest creds:\n    // https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html\n    let clientResult;\n    try {\n      clientResult = await getCredentialsForIdentity({\n        region\n      }, {\n        IdentityId: identityId\n      });\n    } catch (e) {\n      assertServiceError(e);\n      throw new AuthError(e);\n    }\n    if (clientResult?.Credentials?.AccessKeyId && clientResult?.Credentials?.SecretKey) {\n      this._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n      const res = {\n        credentials: {\n          accessKeyId: clientResult.Credentials.AccessKeyId,\n          secretAccessKey: clientResult.Credentials.SecretKey,\n          sessionToken: clientResult.Credentials.SessionToken,\n          expiration: clientResult.Credentials.Expiration\n        },\n        identityId\n      };\n      if (clientResult.IdentityId) {\n        res.identityId = clientResult.IdentityId;\n        this._identityIdStore.storeIdentityId({\n          id: clientResult.IdentityId,\n          type: 'guest'\n        });\n      }\n      this._credentialsAndIdentityId = {\n        ...res,\n        isAuthenticatedCreds: false\n      };\n      return res;\n    } else {\n      throw new AuthError({\n        name: 'CredentialsNotFoundException',\n        message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`\n      });\n    }\n  }\n  async credsForOIDCTokens(authConfig, authTokens, identityId) {\n    if (this._credentialsAndIdentityId && !this.isPastTTL() && this._credentialsAndIdentityId.isAuthenticatedCreds === true) {\n      logger.debug('returning stored credentials as they neither past TTL nor expired.');\n      return this._credentialsAndIdentityId;\n    }\n    // Clear to discard if any unauthenticated credentials are set and start with a clean slate\n    this.clearCredentials();\n    const logins = authTokens.idToken ? formLoginsMap(authTokens.idToken.toString()) : {};\n    const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);\n    const getCredentialsForIdentity = createGetCredentialsForIdentityClient({\n      endpointResolver: createCognitoIdentityPoolEndpointResolver({\n        endpointOverride: authConfig.identityPoolEndpoint\n      })\n    });\n    let clientResult;\n    try {\n      clientResult = await getCredentialsForIdentity({\n        region\n      }, {\n        IdentityId: identityId,\n        Logins: logins\n      });\n    } catch (e) {\n      assertServiceError(e);\n      throw new AuthError(e);\n    }\n    if (clientResult?.Credentials?.AccessKeyId && clientResult?.Credentials?.SecretKey) {\n      this._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n      const res = {\n        credentials: {\n          accessKeyId: clientResult.Credentials.AccessKeyId,\n          secretAccessKey: clientResult.Credentials.SecretKey,\n          sessionToken: clientResult.Credentials.SessionToken,\n          expiration: clientResult.Credentials.Expiration\n        },\n        identityId\n      };\n      if (clientResult.IdentityId) {\n        res.identityId = clientResult.IdentityId;\n        // note: the following call removes guest identityId from the persistent store (localStorage)\n        this._identityIdStore.storeIdentityId({\n          id: clientResult.IdentityId,\n          type: 'primary'\n        });\n      }\n      // Store the credentials in-memory along with the expiration\n      this._credentialsAndIdentityId = {\n        ...res,\n        isAuthenticatedCreds: true,\n        associatedIdToken: authTokens.idToken?.toString()\n      };\n      return res;\n    } else {\n      throw new AuthError({\n        name: 'CredentialsException',\n        message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`\n      });\n    }\n  }\n  isPastTTL() {\n    return this._nextCredentialsRefresh === undefined ? true : this._nextCredentialsRefresh <= Date.now();\n  }\n  hasTokenChanged(tokens) {\n    return !!tokens && !!this._credentialsAndIdentityId?.associatedIdToken && tokens.idToken?.toString() !== this._credentialsAndIdentityId.associatedIdToken;\n  }\n}\nexport { CognitoAWSCredentialsAndIdentityIdProvider };\n"],
  "mappings": "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",
  "names": ["AuthValidationErrorCode", "AuthErrorStrings", "AuthErrorCodes", "getCurrentUser", "AssociateSoftwareTokenException", "ChangePasswordException", "ConfirmDeviceException", "ConfirmForgotPasswordException", "ConfirmSignUpException", "DeleteUserAttributesException", "DeleteUserException", "ForgetDeviceException", "ForgotPasswordException", "GetUserException", "GetIdException", "GetCredentialsForIdentityException", "GetUserAttributeVerificationException", "GlobalSignOutException", "InitiateAuthException", "ResendConfirmationException", "RespondToAuthChallengeException", "SetUserMFAPreferenceException", "SignUpException", "UpdateUserAttributesException", "VerifySoftwareTokenException", "VerifyUserAttributeException", "UpdateDeviceStatusException", "ListDevicesException", "TokenProviderErrorCode", "createKeysForAuthStorage", "oauthSignIn", "name", "getCurrentUser", "PasskeyErrorCode", "tokenOrchestrator", "tokenOrchestrator", "tokenOrchestrator", "tokenOrchestrator", "tokenOrchestrator", "tokenOrchestrator", "getCurrentUser", "tokenOrchestrator", "name", "autoSignIn", "fetchAuthSession", "fetchAuthSession", "fetchAuthSession", "fetchAuthSession", "fetchAuthSession", "fetchAuthSession", "fetchAuthSession", "AuthErrorTypes", "fetchUserAttributes", "tokenOrchestrator", "logger", "oAuthStore", "fetchAuthSession", "fetchAuthSession", "fetchAuthSession", "fetchAuthSession", "fetchAuthSession", "fetchAuthSession", "logger", "createKeysForAuthStorage", "logger", "isAuthenticated"]
}
